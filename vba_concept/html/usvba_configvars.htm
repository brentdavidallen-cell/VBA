<!--ArborText, Inc., 1988-2002, v.4002-->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>VBA Environment Variables</title>
<link href="/Office.css" type="text/css" rel="StyleSheet" media="screen"></head>
<body><div><h1>MicroStation VBA Environment Variables</h1><p>There are several
environment variables that are specific to the Visual Basic implementation
in MicroStation. These primarily control the location for new Visual Basic
project files, and the search path for existing Visual Basic project files.
There are additional considerations though, when setting these variables.
</p><p>To quickly find the variables related to Visual Basic, open the Configuration
dialog box (File > Settings > Configuration > Configuration Variables) then scroll through
the list on the left side of the dialog to the bottom, and select the Visual
Basic for Applications category.</p><div><h2><a name="usvbaConfigvarNewProject"></a>Location
of new VBA projects</h2><p>The MicroStation configuration variable MS_VBANEWPROJECTDIRECTORY
determines the default location for new Visual Basic project files. By default,
this variable is set to WorkSpace\Example\Standards\Macros\ which is also the
location of the SampleProject.mvba file, one of the delivered Visual Basic
projects.</p><p>The MS_VBANEWPROJECTDIRECTORY can contain more than one directory,
although only the first directory is used, all others are ignored.</p><div><h2><a
name="usvbaConfigvarProjectSearchPath"></a>Search path for VBA projects</h2><p>
The MicroStation configuration variable MS_VBASEARCHDIRECTORIES determines
the directories in which MicroStation will search for projects when they are
loaded by name. This variable also sets the location from which VBA projects
can be autoloaded at startup time. See <a href="usvba_projectMngr.htm#autoloadingVBA">
Autoloading a project</a> for more information on choosing a project to load
automatically.</p></div>
<div><h2>Names of standard projects</h2>
<p>The MicroStation configuration variables MS_VBAAUTOLOADPROJECTS and MS_VBAREQUIREDPROJECTS determine which projects are
automatically loaded at startup time.  MicroStation loads the projects listed in MS_VBAREQUIREDPROJECTS prior to
loading the projects listed in MS_VBAAUTOLOADPROJECTS.</p>
<p>MS_VBAAUTOLOADPROJECTS is not usually set in
the Configuration dialog box, but it contains a list of the project names
that are chosen in the Project Manager dialog. See <a href="usvba_projectMngr.htm#autoloadingVBA">
Autoloading a project</a> for more information on choosing a project to load
automatically.</p>
<p>One benefit of adding a project to the MS_VBAAUTOLOADPROJECTS
variable through the Configuration dialog box, is that a project outside of
the paths specified by MS_VBASEARCHDIRECTORIES can be set to autoload by entering
the full file path specification including drive and directory paths.</p>
<p>The MicroStation configuration variable MS_VBAREQUIREDPROJECTS also names projects that are autoloaded.
The VBA Project Manager nevers adds projects to or removes projects from the list that MS_VBAREQUIREDPROJECTS
specifies.</p>
<p>The VBA Project Manager displays a check in the Auto-Load column for every project listed by MS_VBAAUTOLOADPROJECTS
or MS_VBAREQUIREDPROJECTS.  However, the user cannot turn off Auto-Load for projects listed by MS_VBAREQUIREDPROJECTS.</p>
<p>MicroStation has some configuration variables that let a user specify a list of applications to be loaded
in response to some event.  When MicroStation processes one of these lists, it checks each entry to see if it
ends with ".MVBA". If the entry does end with ".MVBA", then MicroStation interprets it as the name of a VBA application. Otherwise,
MicroStation interprets it as the name of an MDL application. As an example, the Standards Checker's initialization logic
asks MicroStation to load all of the applications that the configurarion variable MS_STANDARDSCHECKER_APPS specifies.
Therefore, setting MS_STANDARDSCHECKER_APPS to "SCByLevel.mvba;SCCompleteRefCheck.mvba;SCSimpleRefCheck.mvba" causes
the StandardsChecker's initialization logic to load these VBA projects.
</p></div>
<div><h2>Automatically saving projects</h2>
<p>The MicroStation configuration variable
MS_VBASAVEONRUN determines whether modified VBA projects are automatically
saved when a VBA program is executed. The default value for this variable
is 1, indicating projects will automatically be saved. To prevent MicroStation
from saving modified projects automatically, set this variable to 0. If this variable is 0,
MicroStation does not automatically save the project. When unloading a project MicroStation
tests to see if a project has changes that have not been saved. If it does and this variable is
1 then MicroStation saves the project. If it has unsaved changes and this variable is 0,
then MicroStation asks the user if he wants to save the changes. This logic applies when the
user makes an explicit request to unload a project. It also applies at shutdown, since MicroStation
unloads every project at shutdown.</p></div>
<div><h2>Opening project from memory or disk</h2>
<p>
<p>The MicroStation configuration variable MS_VBA_OPEN_IN_MEMORY controls whether MicroStation keeps a project's data available by keeping the
project's disk file open, or by copying the project into memory. If a lot of users are accessing they same project, they may encounter an error
that happens because there is a limit on the number of processes that can simultaneously have a file open. To avoid this restriction,
set MS_VBA_OPEN_IN_MEMORY to tell MicroStation to open the project from an in-memory image instead of keeping the project file open.</p>
<p>The allowable values for MS_VBA_OPEN_IN_MEMORY are "all", "readonly", and "none".
If the value is "readonly", then MicroStation tests to see if the project file is read-only.
If it is, then MicroStation copies the image into memory and opens it from the in-memory image. Otherwise, it opens the project from the file
and keeps the file open. If the value is "all", then everytime MicroStation opens a project it copies that project into memory and
opens it from the in-memory image. A value of "all" also forces MicroStation to make all projects read-only.
If the value of MS_VBA_OPEN_IN_MEMORY is "none" or if MS_VBA_OPEN_IN_MEMORY is not defined, then MicroStation opens all projects from disk.</p>
<p>To be able to save the changes to a project, it is necessary to have MicroStation load it from
disk. A user who edits projects should not have MS_VBA_OPEN_IN_MEMORY defined, or should have it defined as "none" or "readonly".</p>
<p>To be able to have a lot of users open a project at once, it is necessary to have MicroStation copy it into
memory so MicroStation does not need to keep the project file open. The users who open this project should have MS_VBA_OPEN_IN_MEMORY
set to "readonly" if they edit some projects and open some shared, readonly projects; or they should have MS_VBA_OPEN_IN_MEMORY
set to "all" if they open projects shared by a lot of users but never edit projects.</p>
<p>The value of "a lot of users" is determined by the number of processes that
can have a file open at once. The limit comes from the Windows enviroment.  20 is a common limit.</p>
<p>MS_VBA_OPEN_IN_MEMORY normally is not defined because the default behavior is acceptable for most users.</p></div>
</div>
<div><h2>Automatically referencing projects at project creation</h2>
<p>A MicroStation project can contain references to other VBA projects and to type libraries.
A user can set these refererences manually in the VBA Editor by selecting the project, selecting References
from the Tools pulldown menu, and then selecting the library or VBA project.  A user can use the MS_VBAGUIDREFERENCES
and the MS_VBANAMEDREFERENCES enviroment variables to force MicroStation to assign project references when
it creates a new project.  For a example, a user could add the following lines to msfiles.cfg:
<pre>
#   The following causes MicroStation to add a reference
#   to Microsoft Visual Basic for Applications Extensibility 5.3
#   (VBE6EXT.OLB) when it creates a new VBA project
MS_VBAGUIDREFERENCES > {0002E157-0000-0000-C000-000000000046},5,3

#   The following causes causes MicroStation to add a reference
#   to the Microsoft Scripting Runtime (scrrun.dll) when it creates
#   a new VBA project
MS_VBAGUIDREFERENCES > {420B2830-E718-11CF-893D-00A0C9054228}

#   The following causes causes MicroStation to add a reference
#   to Microsoft VBScript Regular Expressions (vbscript.dll) when it
#   creates a new VBA project
# MS_VBAGUIDREFERENCES > {3F4DACA7-160D-11D2-A8E9-00104B365C9F}

#   The following causes causes MicroStation to references to the
#   VBA project NativeCodeUtilities, VBE_Tools, and MSElementWrapper when
#   it creates a new VBA project.
MS_VBANAMEDREFERENCES=NativeCodeUtilities;VBE_Tools;MSElementWrapper
</pre>
</p></div></div></body>
</html>
