<!--ArborText, Inc., 1988-2002, v.4002-->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>The MicroStation VBA Editor</title>
<link href="/Office.css" type="text/css" rel="StyleSheet" media="screen"></head>
<body> <div><h1><a name="vbaEditor"></a>Using
the MicroStation VBA Editor</h1><p>The MicroStation VBA editor window provides
standard features found in all implementations of Visual Basic for Applications
whether in Microsoft Word, Microsoft Excel, MicroStation CONNECT Edition or any other program
that includes VBA.</p><div><h2>About the VBA Editor</h2><p>Visual Basic and
VBA present a user-friendly yet complete program development environment for
both the casual programmer and the professional application developer alike.
Once opened by clicking Show the VBA Editor icon in the VBA Projects dialog (Drawing > Utilities > Macros > VBA Manager), the Visual Basic editor provides a rich set of tools and functions.
If you are starting a new VBA project, you must first create then load the
project using the VBA Project Manager (select the New Project icon located
on the Project Manager toolbar). This is also required before you can use
the Record macro function.</p><p>Project files loaded from the Project Manager
or the command line will appear in the Project window. From here, you begin
the program creation process by inserting one or more of the VB items (Forms,
Modules or Class Modules). Probably the fastest way to get some code into
your project is to insert a code module (from the Visual Basic Editor's main
menu, Insert > Module). The VB Editor inserts an empty module named Module1
in your project file (the Modules category automatically appears when you
create your first module). Module1 is also opened for editing in its own code
window. You can rename the module using the Properties window for the module.
</p><p>The Properties window is another important feature you will want to
watch in the VB Editor. This window displays the properties of whatever item
you currently have selected. You can set or change a variety of settings for
the active item, depending on the nature of the item.</p></div><div><h2>The
Object Browser</h2><p>One of the most useful features in the VBA Editor environment
is the Object Browser window. To display the object browser, select View >Object
Browser, or press the &lt;F2> key after the VBA Editor environment is opened.
</p><p>The Object Browser provides a point-and-click interface to all objects
currently available for use in your program. This is a good place to start
exploring the actions you can perform using VBA in MicroStation. Selecting
&ldquo;MicroStationDGN&rdquo; from the Libraries selection menu shows only
those objects, methods, properties and events associated with the MicroStation
DGN Object Library. Clicking on an individual class item in the left column
displays the members of the class in the right column. If you then click on
the Help icon (the question mark), the entry on that particular member is
displayed in the Help window.</p></div><div><h2>Debugging a macro</h2><p>
Once a macro has executable code in it, you can step through the code in the
debugger. This process allows you to watch the execution of the code line
by line to help you identify problem areas of the macro.</p><h4>To debug a
macro in the VBA Editor environment:</h4></div><ol>
<li>Make sure the input focus is in the code window in the macro to be run
in debugging mode.</li>
<li>From the Visual Basic Editor main menu select Debug >Step Into.<br>The
debugging process begins. The first line becomes highlighted and an arrow
on the left side of the code shows the current line of execution.</li>
<li>Pressing the &lt;F8> key advances the execution to the next line in the
macro that contains an executable instruction.<br><b>Note:</b> Dimension statements
are not considered executable statements in a macro and are skipped over in
the debugger.</li>
</ol><h4>To stop the debugging process:</h4><ol>
<li>Advance the debugger to the last instruction in the macro by repeatedly
pressing the &lt;F8> key. <br>The debugger stops after last instruction is
executed.</li>
</ol><h4>Alternative method to stop the debugging process:</h4><ol>
<li>From the main menu in the VBA Editor environment, select Run >Reset.<br>If
the debugging process is running, it stops immediately.</li>
</ol></div></body>
</html>
