<!--ArborText, Inc., 1988-2002, v.4002-->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Working with MicroStation objects</title>
<link href="/Office.css" type="text/css" rel="StyleSheet" media="screen"></head>
<body><div><h1>Working with MicroStation objects</h1><p>Visual Basic is an
&ldquo;object oriented&rdquo; language. A full explanation of object-oriented
programming is beyond the scope of this documentation. There are many good
books available on the subject, and many are written expressly for Visual
Basic programmers. It is necessary though, to understand the role that &ldquo;objects&rdquo;
play in Visual Basic in MicroStation.</p><div><h2>Where are the objects?</h2><p>
Nearly every instruction you write in a Visual Basic macro deals with some
object, whether it is implied that the object is MicroStation itself, or Visual
Basic, or whether the object is explicitly referenced. Many statements will
refer to more than one object, but the point is that objects are everywhere.
</p><div><h3>Global methods and properties</h3><p>In the Visual Basic Editor,
you can view the set of object classes, methods, and properties through the
Object Browser. This is an excellent place to start learning about MicroStation's
objects that are available to Visual Basic programs. Select the Object Browser
from the View menu.</p><p>The Object Browser displays available features by
library. The MicroStationDGN library contains the objects specific to MicroStation,
so change the combo-box in the Object Browser from &lt;All Libraries> to MicroStationDGN.
</p><p>In the list on the left, select &lt;globals> from the list of Classes.
The list on the right shows the members of the MicroStationDGN.Application
object. This is the &ldquo;default&rdquo; object that is implied when one
of the methods or properties in the list on the right is used in a Visual
Basic instruction. For example to change the active color to yellow, we can
use the instruction:</p><p><code>ActiveSettings.Color = 4</code></p><p>The
ActiveSettings property belongs to the MicroStationDGN.Application object,
but we don't need to specify this object because it is implied. This instruction
actually uses another object as well, that is a Settings object. The ActiveSettings
property gives us access to the Settings object that holds the active settings
in MicroStation. The Color property belongs to the Settings object.</p></div></div><div><h2>
Elements as objects</h2><p>An element in a DGN file can be manipulated and
modified in VBA by using an object of the appropriate type. The MicroStationDGN
library contains an Element class for generic handling of elements where the
type may not be known or may not be particularly important, and specific classes
for each element type such as ArcElement and LineElement.</p></div><div><h2>
Other objects in MicroStation</h2><p>There are several other objects besides
design elements and the Application object that are important to know about.
They allow your VBA programs to access specific features of MicroStation.
One of these objects is the CadInputQueue.</p><div><h3>The CadInputQueue object
</h3><p>The methods of the <a href="ms-its:MicroStationVBA.chm::/html/usobjcadinputqueue.htm">
CadInputQueue</a> object allow your VBA programs to send input to MicroStation,
and to collect input from the user. Using the CadInputQueue object, your program
can respond to key-ins, data points, and resets. Your program can also send
these messages to MicroStation, and it can send messages to an MDL application
that is running at the same time.</p></div><div><h3>The CommandState object
</h3><p>The <a href="ms-its:MicroStationVBA.chm::/html/usobjcommandstate.htm">
CommandState</a> object is used to implement and initiate VBA programs that
operate like standard MicroStation element-creation and element-modification
commands. These programs must create an object that implements the <a href="ms-its:MicroStationVBA.chm::/html/usobjIPrimitiveCommandEvents.htm">
IPrimitiveCommandEvents</a> interface, or the <a href="ms-its:MicroStationVBA.chm::/html/usobjILocateCommandEvents.htm">
ILocateCommandEvents</a> interface. Either the CommandState object's <a href="ms-its:MicroStationVBA.chm::/html/usmthStartPrimitive.htm">
StartPrimitive</a> method or <a href="ms-its:MicroStationVBA.chm::/html/usmthStartLocate.htm">
StartLocate</a> method is then called to activate the object. For code examples
of these, see the <a href="ms-its:MicroStationVBA.chm::/html/ussmpprimitive.htm">
Element Creation Command Example</a> and the <a href="ms-its:MicroStationVBA.chm::/html/ussmpanalyzearc.htm">
Analyze Arc Example</a>.</p></div><div><h3>The ActiveWorkspace object</h3><p>
The ActiveWorkspace object is an instance of the <a href="ms-its:MicroStationVBA.chm::/html/usobjWorkspace.htm">
Workspace</a> class. This class has methods for reading, creating and deleting
MicroStation's configuration variables. To see an example of how the ActiveWorkspace
object can be used, see the <a href="ms-its:MicroStationVBA.chm::/html/ussmpconfigvar.htm">
Configuration Variable Example</a>.</p></div><div><h3>More objects and documentation
</h3><p>There are many more classes listed in the Object Browser, each is
documented in the Reference part of the MicroStation VBA documentation. To
find the documentation for a specific class, property or method, select the
item in the Object Browser window, then press the &lt;F1> key.</p></div></div></div></body>
</html>
