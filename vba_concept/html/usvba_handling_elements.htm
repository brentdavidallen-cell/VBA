<!--ArborText, Inc., 1988-2002, v.4002-->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Handling Design Elements</title>
<link href="/Office.css" type="text/css" rel="StyleSheet" media="screen"></head>
<body><div><h1>Handling Design Elements</h1><p>Sooner or later your Visual
Basic programs in MicroStation will have to create or manipulate elements
within a DGN file. Understanding how to create an element and add it to the
design file is important to writing good VBA programs for MicroStation. </p><div><h2>
Creating elements</h2><p>Creating an element in a VBA program is actually
rather easy. A line, for example, can be created with the <a href="ms-its:MicroStationVBA.chm::/html/usobjlineelement.htm">
LineElement</a> class as shown by the following code:</p><p><code>Dim oEl
as LineElement<br>Set oEl = CreateLineElement2 (Nothing, startPnt, endPnt)
</code></p><p>Assuming you have valid <a href="ms-its:MicroStationVBA.chm::/html/usudtpoint3d.htm">
Point3d</a> objects for startPnt and endPnt, the line oEl is created when
this code is run. If you run it though, nothing happens on the screen. No
line shows up. The reason is that drawing a line is an additional step. To
make the line element appear on the screen, we must tell it to redraw itself.
The <a href="ms-its:MicroStationVBA.chm::/html/usmthredraw.htm">Redraw</a> method
is a member of the <a href="ms-its:MicroStationVBA.chm::/html/usobjelement.htm">
Element</a> class, so the code to do this is:</p><p><code>oEl.Redraw</code></p><p>
Now the line appears on the screen, but when you refresh the screen, the line
is gone. Even though we created the line object, and made it redraw on the
screen, we did not add it to the contents of the DGN file. This task requires
telling the <a href="ms-its:MicroStationVBA.chm::/html/usobjmodelreference.htm">
ActiveModelReference</a> to add the <a href="ms-its:MicroStationVBA.chm::/html/usobjlineelement.htm">
LineElement</a> to its list of elements. The code for this is:</p><p><code>
ActiveModelReference.AddElement oEl</code></p><p>Now, when the program is
run the line is drawn on the screen and added to the DGN file. The process
of adding the element to the ActiveModelReference can easily be overlooked.
</p></div><div><h2>Getting existing elements</h2><p>Getting existing elements
is another task that has hidden complexities to it. MicroStation has more
than one way for the user to select elements on which to perform an operation,
so your VBA program that manipulates existing elements may have to recognize
more than one way as well. The two primary ways of getting elements that have
previously been selected by the user are via the selection set, and from a
fence. A third way to find elements is by scanning the DGN file for the desired
elements. A fourth way is to prompt the user to enter a data point, but that
requires writing methods for the <a href="ms-its:MicroStationVBA.chm::/html/usobjilocatecommandevents.htm">
ILocateCommandEvents</a> interface. That topic is covered elsewhere.</p><div><h3>
Getting the selection set</h3><p>The selection set is made of the currently
selected elements. These could be chosen with a single data point using the
Element Selection tool, or by Power Selector or another means, it really doesn't
matter to your VBA program. The selection set is already made up when your
program runs. So you must get the selection set and find out whether it has
any elements of interest to your program.</p><p>The selection set is obtained
from the <a href="ms-its:MicroStationVBA.chm::/html/usobjmodelreference.htm">
ActiveModelReference</a> by calling the <a href="ms-its:MicroStationVBA.chm::/html/usmthgetselectedelements.htm">
GetSelectedElements</a> method. This creates an <a href="ms-its:MicroStationVBA.chm::/html/usobjelementenumerator.htm">
ElementEnumerator</a> which allows you to process the elements it holds one
at a time. This process sounds complicated, but the code is simple. It looks
like this:</p><p><code>Public Sub getSelectionSet ()<br>&nbsp;&nbsp;&nbsp;Dim
oElEnum As ElementEnumerator<br>&nbsp;&nbsp;&nbsp;Dim oEl As Element<br>&nbsp;&nbsp;&nbsp;Set
oElEnum = ActiveModelReference.GetSelectedElements<br>&nbsp;&nbsp;&nbsp;oElEnum.Reset<br>&nbsp;&nbsp;&nbsp;While
oElEnum.MoveNext<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set oEl = oElEnum.Current<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'Change
the color of the element<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oEl.Color
= 3<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oEl.Redraw msdDrawingModeNormal<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oEl.Rewrite<br>&nbsp;&nbsp;&nbsp;Wend<br>End
Sub</code></p><p>This example changes the color of each element to red then
redraws it on the screen. To make the change permanent, the element must be
replaced in the <a href="ms-its:MicroStationVBA.chm::/html/usobjmodelreference.htm">
ActiveModelReference</a> after the change is made. The line that does this
is:</p><p><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oEl.Rewrite</code></p><p>
The <a href="ms-its:MicroStationVBA.chm::html/usmthmovenext.htm">MoveNext
</a> method of the <a href="ms-its:MicroStationVBA.chm::/html/usobjelementenumerator.htm">
ElementEnumerator</a> returns True if there are more elements in the selection
set, and False if there aren't any more. This makes it very convenient to
process the elements just once.</p><p><b>Note:</b> When you get the ElementEnumerator
from the <a href="ms-its:MicroStationVBA.chm::/html/usmthgetselectedelements.htm">
GetSelectedElements</a> method, always remember to call <a href="ms-its:MicroStationVBA.chm::/html/usmthreset.htm">
Reset</a> to make sure that you are processing the ElementEnumerator from
the beginning.</p></div><div><h3>Processing elements in a fence</h3><p>Processing
the set of elements in a fence is very similar to using a selection set. The
initial setup requires a few more lines since there is not always an active
fence and your program must test for it before processing. By contrast, the
ActiveModelReference will always return an ElementEnumerator when you call
the GetSelectedElements method to handle a selection set, it just will not
have any elements if nothing is selected.</p><p>The code to see if a fence
is active uses the <a href="ms-its:MicroStationVBA.chm::/html/usobjfence.htm">
Fence</a> object and looks like this:</p><p><code>Dim oFence As Fence<br>Set
oFence = ActiveDesignFile.Fence<br>If oFence.IsDefined Then<br>&nbsp;&nbsp;&nbsp;'we
can process the elements here<br>End If</code></p><p>To get and process the
elements in the fence, we use an ElementEnumerator just like we did for the
selection set in the example above. So the code for the same example, only
this time getting the elements from the fence, looks like this:</p><p><code>
Public Sub getFenceElements()<br>&nbsp;&nbsp;&nbsp;Dim oFence As Fence<br>&nbsp;&nbsp;&nbsp;Dim
oElEnum As ElementEnumerator<br>&nbsp;&nbsp;&nbsp;Dim oEl As Element<br>&nbsp;&nbsp;&nbsp;Set
oFence = ActiveDesignFile.Fence<br>&nbsp;&nbsp;&nbsp;If oFence.IsDefined Then<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set
oElEnum = oFence.GetContents<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oElEnum.Reset<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;While
oElEnum.MoveNext<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set
oEl = oElEnum.Current<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'Change
the color of the element<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oEl.Color
= 3<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oEl.Redraw msdDrawingModeNormal<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oEl.Rewrite<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wend<br>&nbsp;&nbsp;&nbsp;End
If<br>End Sub</code></p><p>A really flexible program is able to take its input
from either a fence or a selection set. This is probably most easily handled
by testing for the fence, and if it is not active, getting the selection set.
Either way, we get an ElementEnumerator containing the elements. The code
to handle both would be written this way:</p><p><code>Public Sub getElementsFromFenceOrSelectionSet()<br>&nbsp;&nbsp;&nbsp;Dim
oFence As Fence<br>&nbsp;&nbsp;&nbsp;Dim oElEnum As ElementEnumerator<br>&nbsp;&nbsp;&nbsp;Dim
oEl As Element<br>&nbsp;&nbsp;&nbsp;Set oFence = ActiveDesignFile.Fence<br>&nbsp;&nbsp;&nbsp;If
oFence.IsDefined = True Then<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set oElEnum
= oFence.GetContents<br>&nbsp;&nbsp;&nbsp;Else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set
oElEnum = ActiveModelReference.GetSelectedElements<br>&nbsp;&nbsp;&nbsp;End
If<br>&nbsp;&nbsp;&nbsp;oElEnum.Reset<br>&nbsp;&nbsp;&nbsp;While oElEnum.MoveNext<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set
oEl = oElEnum.Current<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'Change the color
of the element<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oEl.Color = 3<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oEl.Redraw
msdDrawingModeNormal<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oEl.Rewrite<br>&nbsp;&nbsp;&nbsp;Wend<br><br>End
Sub</code></p><p>Another example, <a href="ms-its:MicroStationVBA.chm::/html/ussmpselectset.htm">
Selection Set Processing</a> is also provided.</p></div><div><h3>Scanning
the design file for elements</h3><p>The ModelReference class has a Scan function
that can be used with or without an <a href="ms-its:MicroStationVBA.chm::/html/usobjelementscancriteria.htm">
ElementScanCriteria</a> object. The difference is that when you use it without
the ElementScanCriteria, you get the set of all elements within the model
and you have to sort out which ones you want to process. The ElementScanCriteria
lets you filter out the elements you do not want to process so the Scan function
returns only those elements that meet your criteria. Here again, we use the
ElementEnumerator to receive the objects from the Scan function.</p><p>This
example finds only the elements with color 3. Once found, these elements are
changed to color 2, redrawn and rewritten to the design file.</p><p><code>
Public Sub changeColor()<br>&nbsp;&nbsp;&nbsp;Dim oElScan As ElementScanCriteria<br>&nbsp;&nbsp;&nbsp;Dim
oElEnum As ElementEnumerator<br>&nbsp;&nbsp;&nbsp;Dim oEl As Element<br>&nbsp;&nbsp;&nbsp;Set
oElScan = New ElementScanCriteria<br>&nbsp;&nbsp;&nbsp;oElScan.ExcludeAllColors<br>&nbsp;&nbsp;&nbsp;oElScan.IncludeColor
3<br>&nbsp;&nbsp;&nbsp;Set oElEnum = ActiveModelReference.Scan (oElScan)<br>&nbsp;&nbsp;&nbsp;oElEnum.Reset<br>&nbsp;&nbsp;&nbsp;While
oElEnum.MoveNext<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set oEl = oElEnum.Current<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'Change
the color of the element<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oEl.Color
= 2<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oEl.Redraw msdDrawingModeNormal<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oEl.Rewrite<br>&nbsp;&nbsp;&nbsp;Wend<br><br>End
Sub</code></p><p>The code in this example looks pretty much the same as the
previous examples from the point at which the ElementEnumerator is filled
with elements to the end of the sub procedure.</p><p><b>Note:</b> The ElementScanCriteria
initially will accept all elements, so before calling the IncludeColor (3)
method, we must set it to exclude all of the other colors, otherwise it will
accept them too. This is the true for all of the different criteria types
that the ElementScanCriteria can be set to filter.</p><p>Other examples of
using the <a href="ms-its:MicroStationVBA.chm::/html/usmthscan.htm">Scan</a> method
to retrieve elements are shown in the <a href="ms-its:MicroStationVBA.chm::/html/ussmplevel.htm">
Change Element Level Examples</a>.</p></div></div></div></body>
</html>
