<!--ArborText, Inc., 1988-2002, v.4002-->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Units and coordinate systems</title>
<link href="/Office.css" type="text/css" rel="StyleSheet" media="screen"></head>
<body><div><h1>Units and coordinate systems</h1><p>In MicroStation CONNECT Edition, unit
definitions and the global origin position are stored as properties of a <a
href="ms-its:MicroStationVBA.chm::/html/usobjmodelreference.htm">ModelReference
</a>. To determine distances in meaningful units other than master units,
your VBA program must get the unit definitions and relationships from the
ActiveModelReference object.</p><div><h2>Distances</h2><p>Nearly all of the
functions in VBA in MicroStation that calculate and return a distance value
give the value in master units. The same is true of most functions that return
a position as a <a href="ms-its:MicroStationVBA.chm::/html/usudtpoint2d.htm">
Point2d</a> or <a href="ms-its:MicroStationVBA.chm::/html/usudtpoint3d.htm">
Point3d</a>, the coordinates are in master units of the active model. As an
example, the following lines calculate the distance between two points, pnt1
and pnt2.</p><p><code>Dim pnt1 As Point3d<br>Dim pnt2 As Point3d<br>Dim dist
As Double<br><br>dist = Point3dDistance (pnt1, pnt2)</code></p><p>If the value
in <i>dist</i> were to be displayed to the user in sub units rather than master
units, we would need to convert it to sub units using the <a href="ms-its:MicroStationVBA.chm::/html/usprosubunitspermasterunit.htm">
SubUnitsPerMasterUnit</a> property of the ActiveModelReference in a calculation
like the following:</p><p><code>dist = dist * ActiveModelReference.SubUnitsPerMasterUnit
</code></p><p>The value in <i>dist</i> is now in sub units. The same type
of conversion can be made to get the value in terms of positional units, storage
units or units of resolution if necessary.</p><div><h3>Global origin</h3><p>
A <a href="ms-its:MicroStationVBA.chm::/html/usobjmodelreference.htm">ModelReference
</a> object has a <a href="ms-its:MicroStationVBA.chm::/html/usproglobalorigin.htm">
GlobalOrigin</a> property that gives the location of the global origin for
the model as a Point3d.</p></div></div><div><h2>Element rotation and Matrix3d
</h2><p>The rotation of an element in space is usually represented by a 3x3
matrix of values. In Visual Basic this matrix is in the form of the <a href="ms-its:MicroStationVBA.chm::/html/usudtmatrix3d.htm">
Matrix3d</a> data type. The functions necessary to manage and apply these
data types are part of the <a href="ms-its:MicroStationVBA.chm::/html/usobjapplication.htm">
Application</a> object.</p><p>The values in a Matrix3d should not be accessed
directly, but should be handled through the <a href="ms-its:MicroStationVBA.chm::/html/usmthmatrix3dgetcomponentbyrowandcolumn.htm">
Matrix3dGetComponentByRowAndColumn</a> and <a href="ms-its:MicroStationVBA.chm::/html/usmthmatrix3dsetcomponentbyrowandcolumn.htm">
Matrix3dSetComponentByRowAndColumn</a> global functions.</p><p>The orientation
of a <a href="ms-its:MicroStationVBA.chm::/html/usobjview.htm">View</a> is
also given by a Matrix3d. You can get and set the orientation of a View using
the <a href="ms-its:MicroStationVBA.chm::/html/usprorotation.htm">Rotation
</a> property.</p><div><h3>Applying rotation using a Matrix3d</h3><p>Below
is a short example of using a Matrix3d to rotate a text element by 15 degrees
about the Z axis at the origin of the element.</p><br><p><code>Public Sub
rotateText ()<br>&nbsp;&nbsp;&nbsp;Dim rMatrix As Matrix3d<br>&nbsp;&nbsp;&nbsp;Dim
tTransform As Transform3d<br>&nbsp;&nbsp;&nbsp;Dim dAngle As Double<br>&nbsp;&nbsp;&nbsp;Dim
zAxis as Point3d<br>&nbsp;&nbsp;&nbsp;Dim oEl As TextElement<br>&nbsp;&nbsp;&nbsp;Dim
oElEnum as ElementEnumerator<br>&nbsp;<br><br>&nbsp;&nbsp;&nbsp;dAngle = 15
* Pi /180&nbsp;&nbsp;&nbsp;'Change the angle to radians<br>&nbsp;&nbsp;&nbsp;zAxis.x
= 0&nbsp;&nbsp;&nbsp;'Set the zAxis to (0,0,1)<br>&nbsp;&nbsp;&nbsp;zAxis.y
= 0<br>&nbsp;&nbsp;&nbsp;zAxis.z = 1<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;'Now we
can get the Matrix3d for rotation<br>&nbsp;&nbsp;&nbsp;rMatrix = Matrix3dFromVectorAndRotationAngle
(zAxis, dAngle)<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;'Find the text elements in
the selection set, skip others<br>&nbsp;&nbsp;&nbsp;Set oElEnum = ActiveModelReference.GetSelectedElements<br>&nbsp;&nbsp;&nbsp;oElEnum.Reset&nbsp;&nbsp;&nbsp;'reset
oElEnum to the first element<br>&nbsp;&nbsp;&nbsp;While oElEnum.MoveNext<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If
(oElEnum.Current.Type = msdElementTypeText) Then<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set
oEl = oElEnum.Current<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tTransform
= Transform3dFromMatrix3dAndFixedPoint3d (rMatrix, oEl.Origin)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oEl.Transform
tTransform<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ActiveModelReference.ReplaceElement
oElEnum.Current, oEl<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oEl.Redraw<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End
If<br>&nbsp;&nbsp;&nbsp;Wend<br>&nbsp;&nbsp;&nbsp;RedrawAllViews<br><br>End
Sub</code></p></div><div><h3>Explanation of the example</h3><p>The example
above uses hardcoded values for the rotation angle and axis of rotation for
the sake of simplicity. The angle is converted to radians since all rotation
calculations in MicroStation occur in radians. The axis of rotation is set
to the Z axis (0,0,1). The <a href="ms-its:MicroStationVBA.chm::/html/usudtmatrix3d.htm">
Matrix3d</a> is then calculated from the rotation angle and the axis of rotation
(a vector).</p><p>The set of elements in the selection set is then collected
in oElEnum. While there are elements in this <a href="ms-its:MicroStationVBA.chm::/html/usobjelementenumerator.htm">
ElementEnumerator</a> they are tested one at a time, and only the text elements
are rotated. The Matrix3d cannot be applied to an element by itself, so a <a
href="ms-its:MicroStationVBA.chm::/html/usobjtransform3d.htm">Transform3d
</a> is formed from the origin of the text element and the Matrix3d created
earlier. The element is then transformed using this Transfom3d, then the original
element is replaced with the modified element, and the element is redrawn.
</p><p><b>Note:</b> Before you run this example, place a text element into
the current design then select it with the Element Selection tool. You can
have multiple elements in the selection set, though only text elements will
be affected.</p><p>The Transform3d data type, usually used for scaling and
translation of elements, is discussed in further detail below.</p></div></div><div><h2>
Transform3ds</h2><p>A <a href="ms-its:MicroStationVBA.chm::/html/usobjtransform3d.htm">
Transform3d</a> is a data type similar to a <a href="ms-its:MicroStationVBA.chm::/html/usudtmatrix3d.htm">
Matrix3d</a>, but it represents a 3x4 matrix used to store and apply values
for scaling, rotation and translation operations. Like the Matrix3d, the functions
to manage and apply a Transform3d are global functions that belong to the
Application object. Also like the Matrix3d, you should not try to access the
values within the matrix directly, but use functions instead. For the Transform3d
type, the functions are <a href="ms-its:MicroStationVBA.chm::/html/usmthtransform3dgetmatrixcomponentbyrowandcolumn.htm">
Transform3dGetMatrixComponentByRowAndColumn</a> and <a href="ms-its:MicroStationVBA.chm::/html/usmthtransform3dsetmatrixcomponentbyrowandcolumn.htm">
Transform3dSetMatrixComponentByRowAndColumn</a>. Additionally, the data within
the Transform3d can be retrieved as Point3d data types using the <a href="ms-its:MicroStationVBA.chm::/html/usmthtransform3dgetpointcomponent.htm">
Transform3dGetPointComponent</a> function, and set using the <a href="ms-its:MicroStationVBA.chm::/html/usmthtransform3dsetpointcomponent.htm">
Transform3dSetPointComponent</a> function.</p><div><h3>Using Transform3d to
apply rotation and scaling</h3><p>The lines below can be added to the code
example above to create an additional Matrix3d used to scale the text element
by a factor of 1.5. This transformation is applied at the same time as the
rotation.</p><p><code>&nbsp;&nbsp;&nbsp;Dim sMatrix As Matrix3d<br>&nbsp;&nbsp;&nbsp;sMatrix
= Matrix3dFromScale (1.5)<br>&nbsp;&nbsp;&nbsp;tTransform = Transform3dFromMatrix3dTimesTransform3d
(sMatrix, tTransform)</code></p><p>To add the scaling operation to the example
above copy these lines and paste them just <i>before</i> the line that reads:
</p><p><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oEl.Transform
tTransform</code></p><p>After creating the sMatrix and setting it to a scale
factor of 1.5 this Matrix3d is added to the tTransform Transform3d so that
it applies both the rotation and scaling at the same time.</p></div></div></div></body>
</html>
