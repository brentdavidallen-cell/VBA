<!--ArborText, Inc., 1988-2002, v.4002-->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Interacting with MDL</title>
<link href="/Office.css" type="text/css" rel="StyleSheet" media="screen"></head>
<body><div><h1>Interacting with MDL</h1>
<p>This section describes ways a VBA program can interact with an MDL application.  The section <a href="usvba_calling_dll_functions.htm">
Calling DLL functions from VBA</a> describes how a VBA program can using MDL built-ins and other functions in DLL's.</p>
<p>The mechanism through which a VBA
program interacts with an MDL application is the same as it is for MicroStation
Basic macros. By publishing variables to make them accessible to a Visual
Basic program, an MDL application can create a way to pass values between
the two different types of applications. This is the primary means of passing
data back and forth between MDL and VBA programs.</p>
<p>Commands can be sent
from a Visual Basic program to an MDL program through the <a href="ms-its:MicroStationVBA.chm::/html/usmthsendmessagetoapplication.htm">
SendMessageToApplication</a> method of the <a href="ms-its:MicroStationVBA.chm::/html/usobjcadinputqueue.htm">
CadInputQueue</a> object.</p><div>
<p>An MDL application can execute VBA code a variety of ways, including using the mdlInput functions to queue VBA RUN commands; using
mdlVBA_runMacro or mdlVBA_runProcedure to run a macro or procedure; or using mdlVBA_executeLine to execute a line of VBA code.  For example,
<pre><code>    //  Executes method Test in project Default. It is declared as
    //          Sub Test(i As Long, j As Long, str As String)
    mdlVBA_executeLine ("Default", "Test 1, 2, \"Hello World\"");

    //  Executes CadInputQueue.SendCommand in the VBA context. That synchronously runs
    //  the macro MyMacro
    mdlVBA_executeLine (NULL, "CadInputQueue.SendCommand \"vba run MyMacro\"");</code></pre>
<h2>Accessing published variables</h2><p>
An MDL program must first create and publish a variable before it can be accessed
by a VBA application. Once this is done, a VBA program can use the <a href="ms-its:MicroStationVBA.chm::/html/usmthgetcexpressionvalue.htm">
GetCExpressionValue</a> method of the Application object to retrieve the value
of the variable. The Visual Basic programmer must know at design time the
name of the published variable, though its type is not necessary. A variant
is used to receive the value of the named variable.</p><p>To set the value
of a published variable, a similar method of the Application object is used, <a
href="ms-its:MicroStationVBA.chm::/html/usmthsetcexpressionvalue.htm">SetCExpressionValue
</a>.</p><p>For an example of how these functions can be used, see the <a
href="ms-its:MicroStationVBA.chm::/html/ussmparcsbylength.htm">Arcs By Length
Example</a>.</p></div><div><h2>MDL Structure Equivalents</h2><p>To utilize
data in MDL structures, a binary equivalent UDT (User Defined Type) may be
used. The term &ldquo;binary compatible&rdquo; means that the structure layouts
are identical, byte for byte. Using information in the MDL header (.h) files
these data types can be created for the structures you need to access. Each
field in the MDL structure will translate to one field in the VBA UDT, utilizing
the following conversion information:</p><table border="1" frame="box" rules="all"
cellspacing="3" cellpadding="3"><colgroup><col><col><col></colgroup><thead>
<tr>
<td><b>MDL Type</b></td>
<td><b>VBA Type</b></td>
<td><b>Notes</b></td>
</tr>
</thead><tbody>
<tr>
<td>BoolInt</td>
<td>Long</td>
<td>A value of 0 represents False, and a value of 1 represents True. (Usually,
any non-zero value is treated as True.)</td>
</tr>
<tr>
<td>byte, unsigned char</td>
<td>Byte</td>
<td></td>
</tr>
<tr>
<td>char (not char*)</td>
<td>String * 1</td>
<td>In VBA, &ldquo;String * n&rdquo; defines a string whose length is always <i>
n</i>.</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
<td></td>
</tr>
<tr>
<td>Int16, short</td>
<td>Integer</td>
<td></td>
</tr>
<tr>
<td>Int32, long</td>
<td>Long</td>
<td></td>
</tr>
<tr>
<td>int64</td>
<td>DLong</td>
<td>DLong is a MicroStationDGN-specific type. For more information, see <a
href="ms-its:MicroStationVBA.chm::/html/usudtdlong.htm">DLong</a>.</td>
</tr>
<tr>
<td>MSWChar</td>
<td>Integer</td>
<td></td>
</tr>
<tr>
<td>UInt32, ULong, unsigned long</td>
<td>Long</td>
<td>VBA does not have an unsigned long type. Therefore, values greater than
2,147,483,647 (hex 7FFFFFFF) will appear as negative values.</td>
</tr>
<tr>
<td>UInt16, UShort</td>
<td>Integer</td>
<td>VBA does not have an unsigned integer type. Therefore, values greater
than 32,767 (hex 7FFF) will appear as negative values.</td>
</tr>
</tbody></table><div><h3>Bit Fields</h3><p>The Visual Basic language does
not directly support bit fields. If you're translating an MDL structure that
includes bit fields, you'll need to combine the bit fields into an appropriately
sized integer field, then use Visual Basic's &ldquo;And&rdquo; and &ldquo;Or&rdquo;
operators to parse out the bits.</p><p>For example, this MDL Structure:</p><p><code>
typedef struct applyViewGroupOptions<br>{<br>&nbsp;&nbsp;&nbsp;UInt16&nbsp;&nbsp;&nbsp;doNotApply:1;<br>&nbsp;&nbsp;&nbsp;UInt16&nbsp;&nbsp;&nbsp;applyActiveParamsSameModel:1;<br>&nbsp;&nbsp;&nbsp;UInt16&nbsp;&nbsp;&nbsp;optionPadding:14;<br>&nbsp;&nbsp;&nbsp;UInt16&nbsp;&nbsp;&nbsp;optionPadding2:16;<br>}
ApplyViewGroupOptions;</code></p><p>Would have the following equivalent VBA
UDT:</p><p><code>Type ApplyViewGroupOptions<br>&nbsp;&nbsp;&nbsp;BitFields
As Long<br>End Type</code></p><p>In this example, the field name &ldquo;BitFields&rdquo;
is arbitrary. The VBA <b>Long</b> type comprises 32 bits, the total number
of bits in the MDL structure.</p></div><div><h3>Nested Structures</h3><p>
Nested structures, one structure included or defined within the body of another,
are not uncommon in MDL. To defined the equivalent UDT in Visual Basic you
must first define the sub-structures separately. For example, the MDL structure
TextSizeParam comprises a field whose type is that of another structure, MSTextSize:
</p><p><code>typedef struct mstextsize<br>{<br>&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;&nbsp;width;<br>&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;&nbsp;height;<br>}
MSTextSize;<br>&nbsp;&nbsp;<br>typedef struct textSizeParam<br>{<br>&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mode;<br>&nbsp;&nbsp;&nbsp;MSTextSize&nbsp;&nbsp;size;<br>&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aspectRatio;<br>}
TextSizeParam;</code></p><p>The equivalent VBA UDT for these structures is
coded like this:</p><p><code>Type MSTextSize<br>&nbsp;&nbsp;&nbsp;width As
Double;<br>&nbsp;&nbsp;&nbsp;height As Double;<br>End Type<br>&nbsp;&nbsp;<br>Type
TextSizeParam<br>&nbsp;&nbsp;&nbsp;mode As Long<br>&nbsp;&nbsp;&nbsp;size
As MSTextSize<br>&nbsp;&nbsp;&nbsp;aspectRatio As Double<br>End Type</code></p><p><b>
Note:</b> For some of the commonly used MDL structure types, the VBA UDTs
are already defined.</p><table border="1" frame="box" rules="all" cellspacing="3"
cellpadding="3"><colgroup><col><col></colgroup><thead>
<tr>
<td><b>MDL Structure Type</b></td>
<td><b>Equivalent VBA UDT (already defined)</b></td>
</tr>
</thead><tbody>
<tr>
<td>DPoint2d, Dpoint2d</td>
<td>Point2d</td>
</tr>
<tr>
<td>DPoint3d, Dpoint3d</td>
<td>Point3d</td>
</tr>
<tr>
<td>DVector3d</td>
<td>Range3d</td>
</tr>
<tr>
<td>RotMatrix</td>
<td>Matrix3d</td>
</tr>
<tr>
<td>Transform</td>
<td>Transform3d</td>
</tr>
</tbody></table><p>These pre-defined types can be used to define UDTs. For
example, this MDL structure:</p><p><code>typedef struct dimCircleGeom<br>{<br>&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radius;<br>&nbsp;&nbsp;&nbsp;Dpoint3d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origin;<br>&nbsp;&nbsp;&nbsp;RotMatrix&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rMatrix;<br>}&nbsp;DimCircleGeom;
</code></p><p>requires both Dpoint3d, and RotMatrix types. Since these are
defined in VBA already, we can write this structure as follows:</p><p><code>
Type DimCircleGeom<br>&nbsp;&nbsp;&nbsp;radius As Double<br>&nbsp;&nbsp;&nbsp;origin
As Point3d<br>&nbsp;&nbsp;&nbsp;rMatrix As Matrix3d<br>End Type</code></p></div><div><h3>
Arrays</h3><p>Array equivalents are defined using the Visual Basic syntax
for arrays. For the MDL definition <i>field[n]</i> the equivalent VBA definition
is <i>field (0 to n-1)</i>. If the array size <i>n</i> is defined using a
constant in MDL, you'll need to define the equivalent constant in Visual Basic.
For example, this MDL structure:</p><p><code>typedef struct dwgHatchDefLine<br>{<br>&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;angle;<br>&nbsp;&nbsp;&nbsp;DPoint2d&nbsp;&nbsp;&nbsp;through;<br>&nbsp;&nbsp;&nbsp;DPoint2d&nbsp;&nbsp;&nbsp;offset;<br>&nbsp;&nbsp;&nbsp;short&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nDashes;<br>&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dashes[MAX_DWG_HATCH_LINE_DASHES];<br>}
DwgHatchDefLine;</code></p><p>Would have the following equivalent definition
in Visual Basic:</p><p><code>Const MAX_DWG_HATCH_LINE_DASHES = 20 'From mdl.h<br>&nbsp;&nbsp;<br>Type
DwgHatchDefLine<br>&nbsp;&nbsp;&nbsp;angle As Double<br>&nbsp;&nbsp;&nbsp;through
As Point2d<br>&nbsp;&nbsp;&nbsp;offset As Point2d<br>&nbsp;&nbsp;&nbsp;nDashes
As Integer<br>&nbsp;&nbsp;&nbsp;dashes(0 to MAX_DWG_HATCH_LINE_DASHES - 1)
As Double<br>End Type</code></p></div><div><h3>Pointers</h3><p>A pointer to <i>
anything</i> including a <b>char*</b> and a <b>void*</b>) should be defined
as a <b>Long</b> in Visual Basic. For example, this structure in MDL:</p><p><code>
typedef struct dimLStringGeom<br>{<br>&nbsp;&nbsp;&nbsp;byte&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;closed;<br>&nbsp;&nbsp;&nbsp;long&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numVerts;<br>&nbsp;&nbsp;&nbsp;Dpoint3d&nbsp;&nbsp;*points;<br>}
DimLStringGeom;</code></p><p>Would have the following equivalent definition
in Visual Basic:</p><p><code>Type DimLStringGeom<br>&nbsp;&nbsp;&nbsp;closed
As Byte<br>&nbsp;&nbsp;&nbsp;numVerts As Long<br>&nbsp;&nbsp;&nbsp;points
As Long&nbsp;&nbsp;&nbsp;'pointer to Point3d<br>End Type</code></p><p>Use
VBA's <b>VarPtr</b> function to assign values to <b>Long</b> fields that represent
pointers. You should also use <b>VarPtr</b> to pass the addresses of UDTs
to MDL functions.</p><p><b>Note:</b> The <b>VarPtr</b> function is an undocumented
feature of Visual Basic. For more information, visit the Microsoft Developer
Network library website (http://msdn.microsoft.com/library), and search for
the Knowledge Base article Q199824 in &ldquo;All Knowledge Base.&rdquo;</p></div></div></div></body>
</html>
