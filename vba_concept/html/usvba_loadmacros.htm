<!--ArborText, Inc., 1988-2002, v.4002-->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Loading and running a VBA macro</title>
<link href="/Office.css" type="text/css" rel="StyleSheet" media="screen"></head>
<body> <div><h1>Loading and
running a VBA macro</h1><p>Before you can run a Visual Basic macro in MicroStation
(VBA programs are often called macros) you must first load the VBA project
within which the macro resides.</p><h2>Loading a project</h2><p>A project
is usually a complete collection of the VBA components for a particular macro
or set of macros. A project file has the file extension .mvba.</p><h4><a name="loading"></a>To
load a VBA project:</h4><ol>
<li>On the ribbon, select the Utilities tab on the Drawing workflow.</li>
<li>Under the Macros ribbon group, click the VBA Manager icon.</li>
<li>From the VBA Manager, click the Load Project icon in the toolbar</li>
<li>Choose the VBA project you wish to load and click OK.</li>
<li>The chosen project is now shown in the VBA Manager.  Ensure that it is
loaded by looking at the column next to the name.</li>
</ol><h4>Alternative method of loading a VBA project:</h4><ol>
<li>In the Keyin window, type: MACRO VBA LOAD &lt;path to project></li>
<li>Select VBA Manager from the Macros ribbon group on the Utilities ribbon tab.
<br>The project appears in the VBA Project Manager dialog box.</li>
</ol><h2>Running a macro from a loaded project</h2><p>Before running a macro,
first make sure the project that contains it is loaded.</p><h4>To run a macro:
</h4><ol>
<li>On the ribbon under the Utilities tab, you will find a list of available
macros in the Macros group.  This list can also be found in the Macros dialog
available from that group or by using the keyin DIALOG MACROS TOGGLE.
<li>Select the macro you wish to run then click Play in the toolbar.
</ol><h4>Alternative method of running a macro from a loaded VBA project:
</h4><ol>
<li>In the Keyin window, type: MACRO VBA RUN &lt;macro name><br>The macro begins
to execute immediately.</li>
</ol><h2>Loading and running a macro with one command</h2><p>With one command,
a project can be loaded and a macro within the project initiated, but only
from the Keyin window in MicroStation.</p><h4>To load a VBA project and run
a macro within it:</h4><ol>
<li>In the Keyin window, type: MACRO VBA RUN [project name]&lt;macro name><br>For
example:<p><code>MACRO VBA RUN [Default]CopyElement</code></p></li>
</ol><p>The square brackets must surround the name of the project to be loaded.
</p><h2>What's inside a VBA project?</h2><p>A VBA project is normally a collection
of several VBA items related to a specific task or operation. There are three
types of items within a project:</p><div><h3>Forms</h3><p>Forms are definitions
for GUI components such as dialog boxes or settings windows (also referred
to as UserForms).</p><h3>Modules</h3><p>Modules are programming code organized
as functions and subroutines. Macro names are identified from specific subroutine
names. Modules also are referred to as Code Modules.</p><p><a name="macro_def"></a><b>
Note:</b> A &ldquo;macro&rdquo; in MicroStation VBA is a sub procedure that
takes no arguments, and is defined in a code module.</p><h3>Class Modules
</h3><p>A class module is a container in which you can create a definition
of your own object type. Usually a class module has data and methods for working
with that data. This sounds a lot like a code module doesn't it? The primary
difference between a code module and a class module is that there is never
more than one copy of anything inside a code module, but you can create multiple
copies of a class by creating objects from the class.</p></div></div></body>
</html>
