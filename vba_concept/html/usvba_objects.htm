<!--ArborText, Inc., 1988-2002, v.4002-->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Understanding Objects, Properties and Methods in MicroStation VBA</title>
<link href="/Office.css" type="text/css" rel="StyleSheet" media="screen"></head>
<body><div><h1>Understanding Objects, Properties and Methods in MicroStation
VBA</h1><p>Collectively, the objects and methods that are specific to MicroStation
are known as the &ldquo;MicroStation Automation Object Model&rdquo;.</p><p>
Nearly every instruction that you add to VBA code in MicroStation will somehow
reference an object, property or method, so it is important to understand
these terms and the features they represent.</p><div><h2>MicroStation's Objects
</h2><p>Each drawing element in a MicroStation DGN file can be represented
by an object in Visual Basic. Objects are also used to represent MicroStation's
features such as views and view groups, cell libraries, the fence, fonts and
many other features. There is also an object that represents the MicroStation
application itself. In short, objects are a fundamental necessity for working
with VBA in MicroStation.</p></div><div><h2>Object Properties</h2><p>Most
objects, especially objects that represent drawing elements, have properties.
A property is an attribute of an object, such as color, line weight or style.
Properties can also affect the behavior of the object. For example the <a
href="ms-its:MicroStationVBA.chm::/html/usproislocked.htm">IsLocked</a> property
can be used to set an element's locked status.</p><p>To set the value of a
property, use the name of the object followed by a period and the name of
the property, an equal sign, and the new value for the property. For example,
to change the color of a line element object named &ldquo;element1&rdquo;
to red, you would use the following line: </p><p><code>element1.Color = 3
</code></p><p>Some object properties cannot be changed, for example the <a
href="ms-its:MicroStationVBA.chm::/html/usproisplanar.htm">IsPlanar</a> property
is used to test whether an element lies completely in one plane. Since this
is a test of whether the object meets the specific condition, it is useful
for taking action based on that condition. To continue with the same example,
the following line sets the color of line element &ldquo;element1&rdquo; to
blue if it is planar:</p><p><code>If element1.isPlanar = True Then element1.Color
= 1</code></p><p>When object properties can only be &ldquo;read&rdquo; in
this fashion and are not changeable, they are said to be &ldquo;Read-only&rdquo;
properties. The Help topic for each property indicates whether it is &ldquo;Read/Write&rdquo;
or &ldquo;Read-only&rdquo;.</p></div><div><h2>Object Methods</h2><p>A &ldquo;method&rdquo;
is an action that an object can perform. For example, the <a href="ms-its:MicroStationVBA.chm::/html/usobjshapeelement.htm">
ShapeElement</a> object has an <a href="ms-its:MicroStationVBA.chm::/html/usmtharea.htm">
Area</a> method. To calculate the area enclosed by the ShapeElement object
&ldquo;shape1&rdquo;, you would use the following line:</p><p><code>Double
dArea = shape1.area()</code></p><p>Methods often require arguments that determine
specifically how the action is performed, or with what information it is performed.
For instance, the <a href="ms-its:MicroStationVBA.chm::/html/usobjview.htm">
View</a> object has a <a href="ms-its:MicroStationVBA.chm::/html/usmthzoom.htm">
Zoom</a> method for zooming in. The Zoom method requires a value for setting
the zoom factor. Using the zoom method to increase magnification by a factor
of 3.0 in the view &ldquo;view1&rdquo; looks like this:</p><p><code>view1.Zoom
3.0</code></p><h3>Calling sub and function procedures</h3><p>The most common
types of methods in VBA are sub procedures and functions. The primary difference
between them is that a function returns a value to the statement where it
was called, and a sub procedure does not. When you call a sub procedure, you
can either use the Call statement, like this:</p><p><code>Call OpenDesignFile
("d:\myDesign.dgn")</code></p><p>or, just use the name of the sub procedure
followed by any arguments it requires, like this:</p><p><code>OpenDesignFile
"d:\myDesign.dgn"</code></p><p><b>Note:</b> when you use the Call statement,
you must put parentheses around the arguments for the procedure. When you
use just the name of the sub procedure, the parentheses should not be used.
</p><p>Calling a function is similar to calling a sub procedure. If you are
not using the return value of the function you may choose to use the Call
statement or not, following the guidelines above. If you use the return value
from a function, you must surround the arguments to the function with parentheses.
</p><p><code>If DistanceXY(point1, point2) > 10 Then<br>&nbsp;&nbsp;&nbsp;userChoice
= MsgBox ("Distance is too great.", vbOKCancel)<br>End If</code></p><p>This
example shows two function calls, the first to DistanceXY() and the second
to MsgBox. In both cases, the return value is used in the calling statement,
so the parentheses are required.</p></div></div></body>
</html>
