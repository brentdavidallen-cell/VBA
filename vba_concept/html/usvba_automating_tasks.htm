<!--ArborText, Inc., 1988-2002, v.4002-->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Automating MicroStation Tasks with VBA</title>
<link href="/Office.css" type="text/css" rel="StyleSheet" media="screen"></head>
<body><div><h1>Automating MicroStation Tasks with VBA</h1><p>One of the purposes
of Visual Basic for Applications is to assist in automating repetitive tasks
in MicroStation. To this end, VBA has a &ldquo;record&rdquo; feature that
will watch your actions in MicroStation and write them to a VBA macro that
you can edit later. While the results of recording a set of actions this way
can be played back as is, the macro is nearly always more useful if you edit
the code to be more flexible.</p><div><h2>Automating key-in command sequences
</h2><p>One way that you can begin to write your own VBA macros, even without
recording a sequence of actions, is to use the MicroStation key-in commands
as &ldquo;instructions&rdquo;. For example, if you use the same sequence of
actions to reset your MicroStation environment every time you begin a new
file, you can automate this process using the necessary key-in commands and
simply run the macro each time you need it.</p><p>To use a MicroStation key-in
as a macro instruction</p><ol>
<li>From the Utilities menu, choose Macro > Project Manager.</li>
<li>In the Project Manager dialog, create a new project, or load an existing
project to contain the macro.</li>
<li>Click the Visual Basic Editor button in the tool bar of the Project Manager
dialog.<br>The VBA Editor window appears.</li>
<li>Add a code module to the project by selecting the Insert menu, then choosing
Module.</li>
<li>In the Properties window for the Module, change the Name to myKeyinMacro.<br>The
title of the editor window also changes to show the new macro name.</li>
<li>In the blank code module window type these two lines:<br><code>Option
Explicit<br>Sub myStartUpCommand()</code><br>then, press the &lt;Enter> key
on the keyboard. The Visual Basic Editor will add a line for you to complete
the subroutine.</li>
<li>On the empty line between, type these lines:<p><code>With CadInputQueue<br>&nbsp;&nbsp;&nbsp;.SendKeyin
"active color green"<br>&nbsp;&nbsp;&nbsp;.SendKeyin "active level 10"<br>&nbsp;&nbsp;&nbsp;.SendKeyin
"history initialize"<br>&nbsp;&nbsp;&nbsp;.SendKeyin "popset on"<br>&nbsp;&nbsp;&nbsp;.SendKeyin
"accudraw shortcuts default"<br>End With</code></p></li>
</ol><p>As you might have guessed, the instruction to get VBA to send a key-in
command to MicroStation is a method called SendKeyin. This method belongs
to the CadInputQueue object though, so we have to address that object first.
We could have written each line as:<br><code>CadInputQueue.SendKeyin "active
color green"</code><br>but, it was easier to use the With statement to tell
the Visual Basic compiler that each of the statements beginning with a period
is addressing the same object, the CadInputQueue. The With statement saved
a considerable amount of typing, and reduced the chances of a typing error.
</p><div><h2>Prompting the user</h2><p>When a macro is played back, the user
might not recognize exactly what is happening, so it's always a good idea
to add a prompt message at the beginning of a macro. We could have the prompt
appear in any of several places, but let's keep it simple.</p><p>Add the following
lines before the With statement in this macro:<br><code>ShowCommand "myKeyinMacro"<br>ShowPrompt
"Running custom setup macro"</code></p><p>Let's also add a prompt to tell
the user when it's safe to start doing things. Add the following line after
the End With statement:<br><code>ShowPrompt "Setup complete. Ready for user
input."</code></p></div><div><h2>The complete key-in macro example</h2><p>
This example macro can now be saved and played back. The complete macro looks
like this:</p><p><code>Option Explicit<br>Sub myStartUpCommand()<br>&nbsp;&nbsp;&nbsp;ShowCommand
"myKeyinMacro"<br>&nbsp;&nbsp;&nbsp;ShowPrompt "Running custom setup macro"<br>&nbsp;&nbsp;&nbsp;With
CadInputQueue<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.SendKeyin "active color
green"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.SendKeyin "active level 10"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.SendKeyin
"history initialize"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.SendKeyin "popset
on"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.SendKeyin "accudraw shortcuts
default"<br>&nbsp;&nbsp;&nbsp;End With<br><br>ShowPrompt "Setup complete.
Ready for user input."<br>End Sub</code></p><p>Of course, you can add other
key-in commands to this macro, and customize it with other features that you
use when you set up your DGN file. Similar macros might be used at other times
as well, perhaps before plotting you would run a similar macro to turn off
construction elements, and hide certain levels.</p></div></div><div><h2>Running
a VBA macro</h2><p>Once a macro has been written, it can be run to execute
the instructions it contains. This is the same as &ldquo;playing back&rdquo;
a VBA macro that was recorded using the record feature. From within the editor,
select the Run menu, then choose Run Sub/User Form. The &lt;F5> function key
is a keyboard shortcut to this menu item. The macro can also be run from the <a
href="ms_its://vba_concept.chm::/html/usvba_macrosdb.htm">Macros dialog box
</a>, or by using a key-in command (see <a href="usvba_keyins.htm#keyin_vba_run">
MicroStation VBA key-ins</a>).</p><p>The key-in command for running a specific
macro can also be assigned to a function key, so that a VBA macro can be launched
with a single keystroke.</p></div></div></body>
</html>
