<!--ArborText, Inc., 1988-2002, v.4002-->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Accessing data and other applications</title>
<link href="/Office.css" type="text/css" rel="StyleSheet" media="screen"></head>
<body><div><h1>Accessing data and other applications</h1><p>Part of the reason
that Visual Basic has become so popular is that it works well with many applications.
Each program in the Microsoft Office suite has some implementation of Visual
Basic for applications. A typical use for VBA programs then is to automate
processes within an application or to automate the process of sharing information
between applications. Here, we briefly describe the process of copying data
from a MicroStation DGN file to another application.</p><div><h2>Accessing
another application</h2><p>To access another application via Visual Basic,
you create an object of that application then send commands to it. With the
programs in Microsoft Office you can do more than just send commands, but
for the sake of brevity we will limit this discussion to basics.</p><p>In
the following example the list of level names is obtained and written to a
spreadsheet in Microsoft Excel, putting the names in the cells in column 1.
A short explanation of this example follows after the code. </p><p><b>Note:
</b>To run this example, you must have Microsoft Excel installed on your computer,
otherwise an error will occur.</p><p><code>Sub sendLevelNamesToExcel()<br>&nbsp;&nbsp;&nbsp;Dim
oXL As Object<br>&nbsp;&nbsp;&nbsp;Dim oBook As Object<br>&nbsp;&nbsp;&nbsp;Dim
oSheet As Object<br>&nbsp;&nbsp;&nbsp;Dim i As Integer, lvlCount As Long<br>&nbsp;&nbsp;&nbsp;Dim
lvlName As String<br>&nbsp;&nbsp;&nbsp;Dim oLevels As Levels<br>&nbsp;&nbsp;&nbsp;Dim
oLvl As Level<br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;Set oXL = CreateObject
("Excel.Application")<br>&nbsp;&nbsp;&nbsp;oXL.Visible = True<br>&nbsp;&nbsp;&nbsp;Set
oBook = oXL.Workbooks.Add<br>&nbsp;&nbsp;&nbsp;Set oSheet = oBook.Sheets(1)<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;Set
oLevels = ActiveDesignFile.Levels<br>&nbsp;&nbsp;&nbsp;lvlCount = oLevels.Count<br>&nbsp;&nbsp;&nbsp;For
i = 1 to lvlCount<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set oLvl = oLevels.Item(i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lvlName
= oLvl.Name<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oSheet.Cells(i,1).Value
= lvlName<br>&nbsp;&nbsp;&nbsp;Next i<br>End Sub</code></p><p>This program
begins by creating objects for the Excel application, a workbook, and a worksheet.
These items are all declared as type Object. Using methods documented in the
help files for Excel, a workbook is created and a worksheet is created within
the workbook.</p><p>Next, this program gets a <a href="ms-its:MicroStationVBA.chm::/html/usobjlevels.htm">
Levels</a> object containing the set of levels from the <a href="ms-its:MicroStationVBA.chm::/html/usobjdesignfile.htm">
ActiveDesignFile</a> object, and from this obtains the <a href="ms-its:MicroStationVBA.chm::/html/usprocount.htm">
Count</a> of levels. This number is used for the limit of the loop.</p><p>
In turn, the program gets each <a href="ms-its:MicroStationVBA.chm::/html/usobjlevel.htm">
Level</a> from the <a href="ms-its:MicroStationVBA.chm::/html/usobjlevels.htm">
Levels</a> object, gets its <a href="ms-its:MicroStationVBA.chm::/html/usproname.htm">
Name</a> and sends it to the Excel spreadsheet specifying the cell row and
column to place the name in.</p></div><div><h2>Accessing MicroStation from
another application</h2><p>The Automation library for MicroStation CONNECT Edition can
be accessed from other applications that also include Microsoft Visual Basic
for Applications, such as Microsoft Excel.</p><div><h3>The Bentley MicroStation
DGN 9.1 Object Library</h3><p>To access the same Automation library that you
see in MicroStation's Visual Basic Editor from another application, you need
to add a &ldquo;reference&rdquo; to the MicroStation library. This requires
that you have MicroStation installed on the computer where you are writing
your code and also on each computer that will run the VBA program you write.
</p><h4>To create a reference to the DGN 9.1 library:</h4><ol>
<li>Open the Microsoft Visual Basic environment window in the application
you are working in. This can usually be done with the &lt;Alt-F11> keyboard
shortcut.</li>
<li>Select the Tools menu, and choose References.<br>The Reference dialog
box appears displaying a list of the libraries that may be available for use
with VBA on your computer.</li>
<li>In this list, scroll down until you see &ldquo;Bentley MicroStation DGN
9.1 Object Library&rdquo;.</li>
<li>Click the small check box next to the MicroStation DGN 9.1 Library and
then click the OK button in the References dialog.<br>The MicroStationDGN
library will appear in the Object Browser window.</li>
</ol></div></div><div><h2></h2></div></div></body>
</html>
