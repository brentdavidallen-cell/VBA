<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Changes for 64-bit Processes</title>
<link href="/Office.css" type="text/css" rel="StyleSheet" media="screen"></head>
<body>
    <div>
        <a name="#changes_vba71"</a>
        <h2>Changes for VBA 7.1</h2>
        <p>
            VBA 7.1 introduces support for working in a 64-bit program.  There are a few changes in VBA 7.1 to help
            programs work with native code in a 64-bit process.
        </p>
        <p>
            In a 64-bit process a pointer is 64 bits; in a 32-bit process it is 32 bits. VBA 7.1 introduces the type <b>LongLong</b>
            to represent a 64-bit pointer. It introduces the type <b>LongPtr</b> that is treated as a <b>Long</b> in a 32-bit process
            and a <b>LongLong</b> in a 64-bit process.  <b>LongPtr</b> is the preferred type for declaring a variable to hold a native
            pointer.
        </p>
        <p>
            An existing declaration that declares all pointers as <b>Long</b> will not work reliably in a 64-bit process.  It will compile correctly
            but is very likely to cause a crash.  It may crash the first time it is used, or it may just crash
            intermittently. To help programmers cope with this, Microsoft introduced the keyword <b>PtrSafe</b>.  When running in
            a 64-bit process the VBA compiler generates an error any time it sees a Declare statement that does not include <b>PtrSafe</b>.
            This forces the programmer to examine every use of Declare to decide what arguments are pointer arguments, replacing
            <b>Long</b> with <b>LongPtr</b> as necessary.
        </p>
        <p>
            VBA 6 does not support <b>LongPtr</b> or <b>PtrSafe</b> so code that is shared between VBA 6 and VBA 7 must be conditionally
            defined.  Microsoft has introduced a built-in conditional compilation argument Vba7 to assist with this.  For example:
        </p>
        <p>
            <code>
                #If Vba7 Then
                <br>Declare PtrSafe Sub CopyMemoryToVBA Lib "kernel32"  _
                <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alias "RtlMoveMemory" _
                <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(ByRef VBALocation As Any,  _
                <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ByVal SourceLoc As LongPtr,  _
                <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ByVal length As Long)
                <br>#Else
                <br>Declare Sub CopyMemoryToVBA Lib "kernel32"  _
                <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alias "RtlMoveMemory" _
                <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(ByRef VBALocation As Any,  _
                <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ByVal SourceLoc As Long,  _
                <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ByVal length As Long)
                <br>#EndIf
            </code>
        <p>See the section  <a href="usvba_calling_dll_functions.htm#declare_statement" target="">Declare Statement</a> for information on declaring a native function.</p>
        <div>
            <a name="#com_32bit"</a>
            <h2>Some COM Components Not Available in 64-bit Process</h2>
            <p>
                If a COM component server is a DLL or an OCX the pointer size of the COM DLL/OCX and the process must match.  VBA hosted in a 64-bit
                process does not let the VBA program reference a 32-bit DLL/OCX.
                Microsoft Windows Common Controls is an example of a 32-bit OCX that cannot be used in a 64-bit process.
                Microsoft has not provided a 64-bit version of this OCX, so the COM library is not available to a VBA program running in a 64-bit process.
            </p>
            <p>Some COM components run in-process and others run out-of-process.  Typically, if a DLL or OCX file provides a COM
            component, then the component runs in-process. If an EXE provides a COM component, then the component runs out-of-process.</p>
            <p>If a COM component runs out-of-process then pointer sizes do not have to match. Therefore, a 32-bit process can use
            the MicroStationDGN object model from a MicroStation process regardless of whether the MicroStation process is a 32-bit MicroStation or  
            a 64-bit MicroStation. Likewise, a 64-bit process can use
            the MicroStationDGN object model regardless of whether the MicroStation process is a 32-bit MicroStation or a 64-bit MicroStation</p>
            <p>All DLL's loaded into a process must use the same size addresses. Therefore, a DLL using 32-bit addresses cannot be used in
            a 64-bit process.</p>
            <p>
            For more information see:
                <ul>
                    <li><a href="http://msdn.microsoft.com/en-us/library/office/gg264421(v=office.15).aspx">64-Bit Visual Basic for Applications Overview</a></li>
                    <li><a href="http://msdn.microsoft.com/en-us/library/office/ee691831(v=office.14).aspx#odc_office2010_Compatibility32bit64bit_ActiveXControlCOMAddinCompatibility /">Compatibility Between the 32-bit and 64-bit Versions of Office</a></li>
                </ul>
            </p>
</body>
</html>
