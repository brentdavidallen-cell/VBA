<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Construct a B-spline Surface that Approximates Points</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>Construct a B-spline Surface that Approximates Points</H1>

<P class=T>
Demonstrates how to construct bounded and unbounded B-spline surface least squares (LSQ)
                  approximations to points sampled from a generic surface.  Examples of such surfaces include
                  bivariate scalar functions, digital terrain meshes or surfaces implied by point clouds or
                  contour lines.
</P>
<P class=T>
Specifically, this example contains four subroutines.  In the first two subroutines, we demonstrate
                  unweighted LSQ approximation of a function with and without interpolated boundaries.  In the latter
                  two subroutines, we demonstrate approximation of DTM data with and without boundaries, and using one
                  of three methods to extract the fit points: from scanned text DTM atoms, from scanned contour lines,
                  or from a known Mesh Element.
</P>
<PRE class=CT><CODE>
Private Declare PtrSafe Function mdlMesh_getVertices Lib "stdbspline.dll" (ByVal pMeshHeader As LongPtr, ByVal pVertexArray As LongPtr, ByRef pNumPerRow As LongPtr, ByVal useInvCurrTrans As Long) As Long
Private Declare PtrSafe Function jmdlEmbeddedDPoint3dArray_getDPoint3d Lib "stdmtg.dll" (ByVal pHeader As LongPtr, ByRef pPoint As <A href="usudtPoint3d.htm">Point3d</A>, ByVal index As Long) As Long
Private Declare PtrSafe Function jmdlEmbeddedDPoint3dArray_getCount Lib "stdmtg.dll" (ByVal pHeader As LongPtr) As Long
Private Declare PtrSafe Function jmdlEmbeddedDPoint3dArray_grab Lib "stdmtg.dll" () As LongPtr
Private Declare PtrSafe Function jmdlEmbeddedDPoint3dArray_drop Lib "stdmtg.dll" (ByVal pHeader As LongPtr) As LongPtr

Sub TestBsplineSurfaceFromWeightedPointsAndBoundaries()
    Dim oSurfaceElt As <A href="usobjBsplineSurfaceElement.htm">BsplineSurfaceElement</A>
    Dim oCurveElt As <A href="usobjBsplineCurveElement.htm">BsplineCurveElement</A>
    Dim oLine As <A href="usobjLineElement.htm">LineElement</A>
    Dim oSurface As New BsplineSurface
    Dim aBoundaryCurves() As <A href="usobjBsplineCurve.htm">BsplineCurve</A>, oUCurve0 As BsplineCurve, oUCurve1 As BsplineCurve, oVCurve0 As BsplineCurve, oVCurve1 As BsplineCurve
    Dim transform As <A href="usudtTransform3d.htm">Transform3d</A>
    Dim plane As <A href="usudtPlane3d.htm">Plane3d</A>
    Dim segment As <A href="usudtSegment3d.htm">Segment3d</A>
    Dim aFitPoints() As Point3d, aBoundaryVertices(0 To 3) As Point3d
    Dim aNullWeights() As Double
    Dim nFitPoints As Long, nBoundaryPoints As Long, nSurfacePolesU As Long, nSurfacePolesV As Long
    Dim i As Long, j As Long

    nFitPoints = 1000
    nBoundaryPoints = 30    ' total points to split up among all four boundary curves
    nSurfacePolesU = 20
    nSurfacePolesV = 20

    ' Plane relative to which to transform data
    plane.origin = <A href="usmthPoint3dOne.htm">Point3dOne</A>
    plane.normal = <A href="usmthPoint3dFromXYZ.htm">Point3dFromXYZ</A>(1, 0, 0)

    ' Domain quadrilateral to determine surface boundary curves
    ' Note: boundary curves do not have to be linear.
    aBoundaryVertices(0) = <A href="usmthPoint3dZero.htm">Point3dZero</A>
    aBoundaryVertices(1) = <A href="usmthPoint3dFromXY.htm">Point3dFromXY</A>(10, 0)
    aBoundaryVertices(2) = Point3dFromXY(5, 10)
    aBoundaryVertices(3) = Point3dFromXY(0, 5)

    ' Get data to approximate
    sampleFunctionInsideAndAlongDomainQuadrilateral aFitPoints, aBoundaryCurves, nFitPoints, nBoundaryPoints, aBoundaryVertices, 0.001
    aBoundaryCurves(2).<A href="usmthReverse.htm">Reverse</A>  ' must be same direction as opposite boundary curve
    aBoundaryCurves(3).Reverse  ' must be same direction as opposite boundary curve

    ' Transform the data to another plane
    transform = <A href="usmthTransform3dFromPlane3dToWorld.htm">Transform3dFromPlane3dToWorld</A>(plane)
    For i = LBound(aFitPoints) To UBound(aFitPoints)
        aFitPoints(i) = <A href="usmthPoint3dFromTransform3dTimesPoint3d.htm">Point3dFromTransform3dTimesPoint3d</A>(transform, aFitPoints(i))
    Next

    ' Transform the boundary curves to the plane (by transforming their poles)
    For i = LBound(aBoundaryCurves) To UBound(aBoundaryCurves)
        For j = 0 To aBoundaryCurves(i).<A href="usproPolesCount.htm">PolesCount</A> - 1
            aBoundaryCurves(i).<A href="usproPole.htm">Pole</A>(j) = Point3dFromTransform3dTimesPoint3d(transform, aBoundaryCurves(i).Pole(j))
        Next
    Next

    ' Collect pairs of boundary curves
    Set oUCurve0 = aBoundaryCurves(0)
    Set oVCurve1 = aBoundaryCurves(1)
    Set oUCurve1 = aBoundaryCurves(2)
    Set oVCurve0 = aBoundaryCurves(3)

    ' Display fit points and boundary curves
    For i = LBound(aFitPoints) To UBound(aFitPoints)
        Set oLine = <A href="usmthCreateLineElement2.htm">CreateLineElement2</A>(Nothing, aFitPoints(i), aFitPoints(i))
        oLine.<A href="usproLineWeight.htm">LineWeight</A> = 2
        oLine.color = 1
        <A href="usproActiveModelReference.htm">ActiveModelReference</A>.<A href="usmthAddElement.htm">AddElement</A> oLine
    Next i
    For i = 0 To 3
        Set oCurveElt = <A href="usmthCreateBsplineCurveElement1.htm">CreateBsplineCurveElement1</A>(Nothing, aBoundaryCurves(i))
        oCurveElt.color = 2
        ActiveModelReference.AddElement oCurveElt
    Next
    <A href="usmthRedrawAllViews.htm">RedrawAllViews</A>

    ' Compute bounded LSQ surface
    oSurface.<A href="usmthFromWeightedPointsAndBoundaries.htm">FromWeightedPointsAndBoundaries</A> aFitPoints, aNullWeights, oUCurve0, oUCurve1, oVCurve0, oVCurve1, nSurfacePolesU, nSurfacePolesV
    Set oSurfaceElt = <A href="usmthCreateBsplineSurfaceElement1.htm">CreateBsplineSurfaceElement1</A>(Nothing, oSurface)
    oSurfaceElt.color = 3
    ActiveModelReference.AddElement oSurfaceElt
    oSurfaceElt.<A href="usmthRedraw.htm">Redraw</A>
End Sub

Sub TestBsplineSurfaceFromWeightedPointsAndPlane()
    Dim oSurfaceElt As BsplineSurfaceElement
    Dim oLine As LineElement
    Dim oSurface As New BsplineSurface
    Dim transform As Transform3d
    Dim plane As Plane3d
    Dim range As <A href="usudtRange3d.htm">Range3d</A>
    Dim aFitPoints() As Point3d
    Dim aNullWeights() As Double
    Dim nFitPoints As Long, nBoundaryPoints As Long, nSurfacePolesU As Long, nSurfacePolesV As Long
    Dim i As Long

    nFitPoints = 1000
    nSurfacePolesU = 20
    nSurfacePolesV = 20

    ' Plane relative to which to transform data
    plane.origin = Point3dOne
    plane.normal = Point3dFromXYZ(1, 0, 0)

    ' XY domain box for point sampling
    range.Low = Point3dZero
    range.High = Point3dFromXY(10, 10)

    ' Get data to approximate
    nBoundaryPoints = 0
    sampleFunctionInsideDomainRange aFitPoints, nFitPoints, nBoundaryPoints, range

    ' Transform the data to another plane
    transform = Transform3dFromPlane3dToWorld(plane)
    For i = LBound(aFitPoints) To UBound(aFitPoints)
        aFitPoints(i) = Point3dFromTransform3dTimesPoint3d(transform, aFitPoints(i))
    Next

    ' Compute unbounded LSQ surface over known plane
    ' Note: the boundary may oscillate wildly; this is because it is not constrained.  More points sampled along the boundary may help.
    oSurface.<A href="usmthFromWeightedPointsAndPlane.htm">FromWeightedPointsAndPlane</A> aFitPoints, aNullWeights, transform, nSurfacePolesU, nSurfacePolesV
    Set oSurfaceElt = CreateBsplineSurfaceElement1(Nothing, oSurface)
    oSurfaceElt.color = 4
    ActiveModelReference.AddElement oSurfaceElt
    oSurfaceElt.Redraw

    ' Compute unbounded LSQ surface over known plane and with oversampled boundary (this may lead to a better fit)
    nBoundaryPoints = 50
    sampleFunctionInsideDomainRange aFitPoints, nFitPoints, nBoundaryPoints, range
    transform = Transform3dFromPlane3dToWorld(plane)
    For i = LBound(aFitPoints) To UBound(aFitPoints)
        aFitPoints(i) = Point3dFromTransform3dTimesPoint3d(transform, aFitPoints(i))
    Next
    oSurface.FromWeightedPointsAndPlane aFitPoints, aNullWeights, transform, nSurfacePolesU, nSurfacePolesV
    Set oSurfaceElt = CreateBsplineSurfaceElement1(Nothing, oSurface)
    oSurfaceElt.color = 5
    ActiveModelReference.AddElement oSurfaceElt
    oSurfaceElt.Redraw

End Sub

' Fits a least-squares B-spline surface to four known boundary curves and the vertices of a DTM.
Sub TestBsplineSurfaceFromBoundedDTM()
    Dim oSurfaceElt As BsplineSurfaceElement
    Dim oSurface As New BsplineSurface
    Dim oUCurve0 As BsplineCurve, oUCurve1 As BsplineCurve, oVCurve0 As BsplineCurve, oVCurve1 As BsplineCurve
    Dim aFitPoints() As Point3d
    Dim aNullWeights() As Double
    Dim nSurfacePolesU As Long, nSurfacePolesV As Long
    Dim i As Long, j As Long

    nSurfacePolesU = 20
    nSurfacePolesV = 10

    ' Collect data to approximate (in one of several ways)
    'aFitPoints = collectFitPointsFromScannedTextElements()
    aFitPoints = collectFitPointsFromScannedContourLineStrings()
    'aFitPoints = collectVerticesFromKnownMeshElement(994)

    ' Collect known boundary curves
    Set oUCurve0 = <A href="usproActiveDesignFile.htm">ActiveDesignFile</A>.<A href="usmthGetElementByID.htm">GetElementByID</A>(<A href="usmthDLongFromLong.htm">DLongFromLong</A>(4491)).<A href="usproAsBsplineCurveElement.htm">AsBsplineCurveElement</A>.<A href="usmthExtractBsplineCurve.htm">ExtractBsplineCurve</A>
    Set oVCurve1 = ActiveDesignFile.GetElementByID(DLongFromLong(4497)).AsBsplineCurveElement.ExtractBsplineCurve
    Set oUCurve1 = ActiveDesignFile.GetElementByID(DLongFromLong(4495)).AsBsplineCurveElement.ExtractBsplineCurve
    Set oVCurve0 = ActiveDesignFile.GetElementByID(DLongFromLong(4493)).AsBsplineCurveElement.ExtractBsplineCurve

    ' Compute bounded LSQ surface
    oSurface.FromWeightedPointsAndBoundaries aFitPoints, aNullWeights, oUCurve0, oUCurve1, oVCurve0, oVCurve1, nSurfacePolesU, nSurfacePolesV, 3, 3, True
    Set oSurfaceElt = CreateBsplineSurfaceElement1(Nothing, oSurface)
    oSurfaceElt.color = 3
    ActiveModelReference.AddElement oSurfaceElt
    oSurfaceElt.Redraw

End Sub

' Fits a least-squares B-spline surface to the vertices of a known DTM.
Sub TestBsplineSurfaceFromDTM()
    Dim oSurfaceElt As BsplineSurfaceElement
    Dim oSurface As New BsplineSurface
    Dim aFitPoints() As Point3d
    Dim aNullWeights() As Double
    Dim nSurfacePolesU As Long, nSurfacePolesV As Long
    Dim i As Long, j As Long

    nSurfacePolesU = 15
    nSurfacePolesV = 5

    ' Collect data to approximate (in one of several ways)
    'aFitPoints = collectFitPointsFromScannedTextElements()
    aFitPoints = collectFitPointsFromScannedContourLineStrings()
    'aFitPoints = collectVerticesFromKnownMeshElement(994)

    ' Compute bounded LSQ surface (pass in zero transform to autocompute plane)
    oSurface.FromWeightedPointsAndPlane aFitPoints, aNullWeights, <A href="usmthTransform3dZero.htm">Transform3dZero</A>, nSurfacePolesU, nSurfacePolesV, 4, 4, True
    Set oSurfaceElt = CreateBsplineSurfaceElement1(Nothing, oSurface)
    oSurfaceElt.color = 3
    ActiveModelReference.AddElement oSurfaceElt
    oSurfaceElt.Redraw

End Sub

Function bump(ByVal x As Double, ByVal y As Double, ByVal h As Double, ByVal k As Double) As Double
    bump = Exp(-((x - h) * (x - h) + (y - k) * (y - k)))
End Function

' Five exponential perturbations centered in [0,10]x[0,10]
Function bumps(ByVal x As Double, ByVal y As Double) As Double
    bumps = -1 * bump(x, y, 1, 1) + 1.2 * bump(x, y, 5, 5) - 1.5 * bump(x, y, 7, 3) + 1.75 * bump(x, y, 8, 9) + 1.1 * bump(x, y, 0, 7)
End Function

' Return a B-spline curve that approximates the bumps function along an xy-domain segment
Function sampleFunctionAlongDomainSegment(nCurveFitPoints As Long, domainSegment As Segment3d) As BsplineCurve
    Dim oCurve As New BsplineCurve
    Dim oFitCurve As New InterpolationCurve
    Dim aFitPoints() As Point3d
    Dim pt As Point3d
    Dim i As Long

    ReDim aFitPoints(0 To nCurveFitPoints - 1)

    ' Sample points along domain segment
    For i = LBound(aFitPoints) + 1 To UBound(aFitPoints) - 1
        pt = <A href="usmthPoint3dFromSegment3dFractionParameter.htm">Point3dFromSegment3dFractionParameter</A>(domainSegment, i / (nCurveFitPoints - 1))
        aFitPoints(i) = Point3dFromXYZ(pt.x, pt.y, bumps(pt.x, pt.y))
    Next

    ' Sample end points exactly so any neighboring boundary curves will meet
    With domainSegment.startPoint
        aFitPoints(LBound(aFitPoints)) = Point3dFromXYZ(.x, .y, bumps(.x, .y))
    End With
    With domainSegment.endPoint
        aFitPoints(UBound(aFitPoints)) = Point3dFromXYZ(.x, .y, bumps(.x, .y))
    End With

    oFitCurve.<A href="usmthSetFitPoints.htm">SetFitPoints</A> aFitPoints
    oFitCurve.<A href="usproBesselTangents.htm">BesselTangents</A> = True

    oCurve.<A href="usmthFromInterpolationCurve.htm">FromInterpolationCurve</A> oFitCurve

    Set sampleFunctionAlongDomainSegment = oCurve
End Function

' Returns points and four boundary curves sampled from the bumps function inside a given quadrilateral xy-domain.
' To avoid later computational instability, the interior fit points are offset from the boundary fit points by the given (absolute) distance tolerance.
Sub sampleFunctionInsideAndAlongDomainQuadrilateral(aFitPoints() As Point3d, aBoundaryCurves() As BsplineCurve, nInteriorSamplePoints As Long, nBoundarySamplePoints As Long, aBoundaryDomainQuadrilateral() As Point3d, tolerance As Double)
    Dim range As Range3d
    Dim samplePoint As Point3d
    Dim boundaryLength As Double, aEdgeLengths(0 To 3) As Double
    Dim i As Long, index0 As Long

    Randomize
    ReDim aFitPoints(0 To nInteriorSamplePoints - 1)
    ReDim aBoundaryCurves(0 To 3)

    ' Find bounding box and length of domain quad (only use first 4 points of aBoundaryDomainQuadrilateral)
    index0 = LBound(aBoundaryDomainQuadrilateral)
    range = <A href="usmthRange3dInit.htm">Range3dInit</A>
    For i = 0 To 3
        range = <A href="usmthRange3dUnionPoint3d.htm">Range3dUnionPoint3d</A>(range, aBoundaryDomainQuadrilateral(index0 + i))
        If i &lt; 3 Then
            aEdgeLengths(i) = <A href="usmthPoint3dDistance.htm">Point3dDistance</A>(aBoundaryDomainQuadrilateral(index0 + i), aBoundaryDomainQuadrilateral(index0 + i + 1))
        Else
            aEdgeLengths(3) = Point3dDistance(aBoundaryDomainQuadrilateral(index0 + 3), aBoundaryDomainQuadrilateral(index0))
        End If
        Debug.Assert (aEdgeLengths(i) &gt; 0)
        boundaryLength = boundaryLength + aEdgeLengths(i)
    Next

    ' Sample interior points inside bounding box of domain quad, but throw out any outside or close to the domain quad boundary
    i = LBound(aFitPoints)
    While i &lt;= UBound(aFitPoints)
        samplePoint.x = range.Low.x + Rnd * (range.High.x - range.Low.x)
        samplePoint.y = range.Low.y + Rnd * (range.High.y - range.Low.y)
        If <A href="usmthPoint3dInPolygonXY.htm">Point3dInPolygonXY</A>(samplePoint, aBoundaryDomainQuadrilateral, tolerance) &gt; 0 Then
            samplePoint.Z = bumps(samplePoint.x, samplePoint.y)
            aFitPoints(i) = samplePoint
            i = i + 1
        End If
    Wend

    ' Sample points along boundary domain at which to interpolate the four boundary curves
    For i = 0 To 3
        If i &lt; 3 Then
            Set aBoundaryCurves(i) = sampleFunctionAlongDomainSegment(Int(nBoundarySamplePoints * (aEdgeLengths(i) / boundaryLength)), <A href="usmthSegment3dFromPoint3dStartEnd.htm">Segment3dFromPoint3dStartEnd</A>(aBoundaryDomainQuadrilateral(index0 + i), aBoundaryDomainQuadrilateral(index0 + i + 1)))
        Else
            Set aBoundaryCurves(3) = sampleFunctionAlongDomainSegment(Int(nBoundarySamplePoints * (aEdgeLengths(i) / boundaryLength)), Segment3dFromPoint3dStartEnd(aBoundaryDomainQuadrilateral(index0 + 3), aBoundaryDomainQuadrilateral(index0)))
        End If
    Next

End Sub

' Returns points sampled from the bumps function inside the given xy-range.
Sub sampleFunctionInsideDomainRange(aFitPoints() As Point3d, nInteriorSamplePoints As Long, nBoundarySamplePoints As Long, domainRangeXY As Range3d)
    Dim samplePoint As Point3d
    Dim i As Long

    Randomize
    ReDim aFitPoints(0 To nInteriorSamplePoints + nBoundarySamplePoints - 1)

    ' Sample interior points inside bounding box
    While i &lt;= nInteriorSamplePoints - 1
        samplePoint.x = domainRangeXY.Low.x + Rnd * (domainRangeXY.High.x - domainRangeXY.Low.x)
        samplePoint.y = domainRangeXY.Low.y + Rnd * (domainRangeXY.High.y - domainRangeXY.Low.y)
        samplePoint.Z = bumps(samplePoint.x, samplePoint.y)
        aFitPoints(i) = samplePoint
        i = i + 1
    Wend

    If nBoundarySamplePoints &lt; 4 Then Exit Sub

    ' Sample points at each corner for better corner fit
    aFitPoints(i) = Point3dFromXYZ(domainRangeXY.Low.x, domainRangeXY.Low.y, bumps(domainRangeXY.Low.x, domainRangeXY.Low.y))
    aFitPoints(i + 1) = Point3dFromXYZ(domainRangeXY.High.x, domainRangeXY.Low.y, bumps(domainRangeXY.High.x, domainRangeXY.Low.y))
    aFitPoints(i + 2) = Point3dFromXYZ(domainRangeXY.High.x, domainRangeXY.High.y, bumps(domainRangeXY.High.x, domainRangeXY.High.y))
    aFitPoints(i + 3) = Point3dFromXYZ(domainRangeXY.Low.x, domainRangeXY.High.y, bumps(domainRangeXY.Low.x, domainRangeXY.High.y))
    i = i + 4

    ' Sample points on bounding box for better boundary fit
    While i &lt;= UBound(aFitPoints)
        <A href="usmthSelect.htm">Select</A> Case i Mod 4
        Case 0
            samplePoint.x = domainRangeXY.Low.x
            samplePoint.y = domainRangeXY.Low.y + Rnd * (domainRangeXY.High.y - domainRangeXY.Low.y)
        Case 1
            samplePoint.x = domainRangeXY.High.x
            samplePoint.y = domainRangeXY.Low.y + Rnd * (domainRangeXY.High.y - domainRangeXY.Low.y)
        Case 2
            samplePoint.x = domainRangeXY.Low.x + Rnd * (domainRangeXY.High.x - domainRangeXY.Low.x)
            samplePoint.y = domainRangeXY.Low.y
        Case 3
            samplePoint.x = domainRangeXY.Low.x + Rnd * (domainRangeXY.High.x - domainRangeXY.Low.x)
            samplePoint.y = domainRangeXY.High.y
        End Select
        samplePoint.Z = bumps(samplePoint.x, samplePoint.y)
        aFitPoints(i) = samplePoint
        i = i + 1
    Wend
End Sub

Function collectFitPointsFromScannedTextElements() As Point3d()
    Dim oElement As <A href="usobjElement.htm">Element</A>
    Dim aFitPoints() As Point3d
    Dim oScanCrit As New ElementScanCriteria
    Dim oEnumerator As <A href="usobjElementEnumerator.htm">ElementEnumerator</A>
    Dim count As Long, i As Long

    ' get all text elements (assumed to be DTM atoms)
    oScanCrit.<A href="usmthExcludeAllTypes.htm">ExcludeAllTypes</A>
    oScanCrit.<A href="usmthIncludeType.htm">IncludeType</A> msdElementTypeText
    Set oEnumerator = ActiveModelReference.<A href="usmthScan.htm">Scan</A>(oScanCrit)

    ' count points
    Do While oEnumerator.<A href="usmthMoveNext.htm">MoveNext</A>
        count = count + 1
    Loop

    ReDim aFitPoints(0 To count - 1)

    oEnumerator.<A href="usmthReset.htm">Reset</A>
    i = 0
    Do While oEnumerator.MoveNext
        Set oElement = oEnumerator.<A href="usproCurrent.htm">Current</A>
        With oElement.<A href="usproAsTextElement.htm">AsTextElement</A>
            aFitPoints(i) = .origin
            i = i + 1
        End With
    Loop

    collectFitPointsFromScannedTextElements = aFitPoints
End Function

Function collectFitPointsFromScannedContourLineStrings() As Point3d()
    Dim oElement As Element
    Dim oBsplineCurve As New BsplineCurve
    Dim aFitPoints() As Point3d, aPoints() As Point3d
    Dim aParams() As Double
    Dim oScanCrit As New ElementScanCriteria
    Dim oEnumerator As ElementEnumerator
    Dim count As Long, i As Long, j As Long, numPointsPerLineString As Long

    ' get all linestring elements (assumed to be DTM contour atoms)
    oScanCrit.ExcludeAllTypes
    oScanCrit.IncludeType msdElementTypeLineString
    Set oEnumerator = ActiveModelReference.Scan(oScanCrit)

    ' count points
    Do While oEnumerator.MoveNext
        count = count + 1
    Loop

    numPointsPerLineString = 100
    ReDim aFitPoints(0 To count * numPointsPerLineString - 1)

    ' oversample each line string and add the points to the main array
    oEnumerator.Reset
    i = 0
    Do While oEnumerator.MoveNext
        oBsplineCurve.<A href="usmthFromElement.htm">FromElement</A> oEnumerator.Current
        aPoints = oBsplineCurve.<A href="usmthEvaluatePointsAtEqualLengthChords.htm">EvaluatePointsAtEqualLengthChords</A>(aParams, numPointsPerLineString - 1)
        For j = LBound(aPoints) To UBound(aPoints)
            aFitPoints(i + j - LBound(aPoints)) = aPoints(j)
        Next j
        i = i + UBound(aPoints) - LBound(aPoints) + 1
    Loop

    collectFitPointsFromScannedContourLineStrings = aFitPoints
End Function

Function collectVerticesFromKnownMeshElement(meshID As Long) As Point3d()
    Dim oElement As Element
    Dim aFitPoints() As Point3d
    Dim pVertices As LongPtr, count As Long, i As Long

    Set oElement = ActiveDesignFile.GetElementByID(DLongFromLong(meshID))

    pVertices = jmdlEmbeddedDPoint3dArray_grab
    mdlMesh_getVertices oElement.<A href="usmthMdlElementDescrP.htm">MdlElementDescrP</A>, pVertices, 0, 1

    count = jmdlEmbeddedDPoint3dArray_getCount(pVertices)

    ' Copy vertices in MDL array to VBA array
    ReDim aFitPoints(0 To count - 1)
    For i = LBound(aFitPoints) To UBound(aFitPoints)
        jmdlEmbeddedDPoint3dArray_getDPoint3d pVertices, aFitPoints(i), i
    Next

    pVertices = jmdlEmbeddedDPoint3dArray_drop(pVertices)

    collectVerticesFromKnownMeshElement = aFitPoints
End Function

</CODE></PRE>
