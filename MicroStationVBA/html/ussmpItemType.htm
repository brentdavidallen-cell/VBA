<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Itemtypelibraries, ItemTypeLibrary, ItemType, ItemtypeProperty, ItemTypePropertyHandler, and Items</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>Itemtypelibraries, ItemTypeLibrary, ItemType, ItemtypeProperty, ItemTypePropertyHandler, and Items</H1>

<P class=T>
The macro CreateLibraryAndAttachItem calls the other subroutines and functions to Create ItemtypeLibrary , Itemtype and ItemTypeProperty,
            and to create Item by attaching Itemtype to Element\ActiveModel\ActiveDesignFile.
</P>
<PRE class=CT><CODE>
' A summary of all example subroutines
Sub RunAllTests()
    OpenNewFile
    CreateLibraryAndAttachItem
    FindItemTypeLibraryFromActiveDesignFile
    FindItemTypeLibraryFromSpecificDesignFile
    FindItemTypeLibraryFromDesignFileAndDgnLibs
    FindItemTypeUsingFind
    <A href="usmthGetSchemaAccessString.htm">GetSchemaAccessString</A>
    FindItemTypePropertyUsingFind
    FindItemsFromDesignFile
    FindItemsFromDesignFileUsingItemType
    FindItemsFromElement
    FindItemsFromElementUsingItemType
    FindItemsFromModelReference
    FindItemsFromModelReferenceUsingItemType
    HasItemsAttachedtoDesignFile
    HasItemsAttachedtoDesignFileUsingItemtype
    HasItemsAttachedtoModelReference
    HasItemsAttachedtoModelReferenceUsingItemtype
    HasItemsAttachedtoElement
    HasItemsAttachedtoElementUsingItemtype
    RenameItemTypeLibrary
    RenameItemType
    RenameItemTypeProperty
    UpdateActiveDesignFileItem
    UpadteActiveModelItem
    UpdateElementItem
    DetachItemFromActiveDesignFile
    DetachItemFromActiveModel
    DetachItemFromElement
    DeleteItemTypeProperty
    DeleteItemType
    DeleteItemTypeLibrary
    CalculatedPropertyExpression
    GetAndSetPoint3dPropertyAttachedToDesignFile
    GetAndSetPoint2dPropertyAttachedToDesignFile
    GetSetValueForArrayProperty
    AddOrInsertArrayElementsOnInstance
    RemoveSpecificArrayElementOnInstance
    ClearAllArrayElementsFromInstance
    SetAndGetReadOnlyProperty
    SetAndGetHiddenProperty
    MsgBox "Finished: RunAllTests", vbOKOnly
End Sub

Sub OpenNewFile()
    Dim oDgn As designFile
    Dim sFileName As String
    Dim sSeedName As String
    
    sFileName = <A href="usproActiveDesignFile.htm">ActiveDesignFile</A>.<A href="usproPath.htm">Path</A> & "\" & "COPY_" & ActiveDesignFile.<A href="usproName.htm">Name</A>
    If Dir(sFileName) &lt;&gt; "" Then
        Kill sFileName
    End If
    sSeedName = <A href="usproActiveWorkspace.htm">ActiveWorkspace</A>.<A href="usmthConfigurationVariableValue.htm">ConfigurationVariableValue</A>("MS_DESIGNMODELSEED", True)
    Set oDgn = <A href="usmthCreateDesignFile.htm">CreateDesignFile</A>(sSeedName, sFileName, True)
End Sub

Sub CreateLibraryAndAttachItem()

    Dim oItemLib As <A href="usobjItemTypeLibrary.htm">ItemTypeLibrary</A>
    Dim oItemLib1 As ItemTypeLibrary
    Dim oItemLibs As <A href="usobjItemTypeLibraries.htm">ItemTypeLibraries</A>
    Dim sLibName As String, sItemName As String
    
    sLibName = "TestLibrary"
    sItemName = "FirstItemType"
    Set oItemLib = CreateItemTypeLibrary(sLibName)

    If Not oItemLib Is Nothing Then
        AttachItemToElement oItemLib, sItemName
        AttachItemToActiveModel oItemLib, sItemName
        AttachItemToDesignFile oItemLib, sItemName
    Else
        Set oItemLibs = New <A href="usproItemTypeLibraries.htm">ItemTypeLibraries</A>
        Set oItemLib1 = oItemLibs.<A href="usmthFindByName.htm">FindByName</A>(sLibName)
        AttachItemToElement oItemLib1, sItemName
        AttachItemToActiveModel oItemLib1, sItemName
        AttachItemToDesignFile oItemLib1, sItemName
    End If
    
End Sub

Function CreateItemTypeLibrary(sLibName As String) As ItemTypeLibrary

    Dim oItem As <A href="usobjItemType.htm">ItemType</A>
    Dim oItemProp As <A href="usobjItemTypeProperty.htm">ItemTypeProperty</A>
    Dim oItemLibs As ItemTypeLibraries
    Dim sMessage As String
    
    'Create ItemType Library
    Set oItemLibs = New ItemTypeLibraries
    
    'if the ItemTypeLibrary with same name already exist, then failed error msg is dispalyed
    Set CreateItemTypeLibrary = oItemLibs.<A href="usmthCreateLib.htm">CreateLib</A>(sLibName, False)
    If CreateItemTypeLibrary Is Nothing Then
        MsgBox ("ItemTypeLibrary with name TestLibrary already exist")
    Else
    
        'Create first ItemType
        Set oItem = CreateItemTypeLibrary.<A href="usmthAddItemType.htm">AddItemType</A>("FirstItemType")
        
        'string property with default value
        Set oItemProp = oItem.<A href="usmthAddProperty.htm">AddProperty</A>("TextProperty", ItemPropertyTypeString)
        oItemProp.<A href="usmthSetDefaultValue.htm">SetDefaultValue</A> ("DefaultValue")
        
        'integer property
        Set oItemProp = oItem.AddProperty("IntegerProperty", ItemPropertyTypeInteger)
        
        'boolean
        Set oItemProp = oItem.AddProperty("BooleanProperty", ItemPropertyTypeBoolean)
        
        'double
        Set oItemProp = oItem.AddProperty("DoubleProperty", ItemPropertyTypeDouble)
        
        'datetime
        Set oItemProp = oItem.AddProperty("Datetime Property", ItemPropertyTypeDateTime) ' Property name is "Datetime Property" not "DatetimeProperty"
        
        'Calculated property
        Set oItemProp = oItem.AddProperty("CalculatedProperty", ItemPropertyTypeString)
        Success = oItemProp.<A href="usmthSetExpression.htm">SetExpression</A>("10+20", "Failed", sMessage)
        If Not sMessage = "" Then
            MsgBox(sMessage)
        End If

        'write into dgn
        CreateItemTypeLibrary.<A href="usmthWrite.htm">Write</A>
    End If
    
End Function

Sub AttachItemToElement(oItemLib As ItemTypeLibrary, sItemName As String)

    'Local variables for creating line
    Dim oStartPoint As <A href="usudtPoint3d.htm">Point3d</A>
    Dim oEndPoint As Point3d
    Dim oLine As <A href="usobjLineElement.htm">LineElement</A>
    Dim oItem As ItemType
    Dim oItemPropHandler As <A href="usobjItemTypePropertyHandler.htm">ItemTypePropertyHandler</A>
    Dim vDateTime As String

    'Starting and ending points of Line
    oStartPoint = <A href="usmthPoint3dFromXYZ.htm">Point3dFromXYZ</A>(0, 0, 0)
    oEndPoint = Point3dFromXYZ(200, 200, 0)
    
    'draw lines
    Set oLine = <A href="usmthCreateLineElement2.htm">CreateLineElement2</A>(Nothing, oStartPoint, oEndPoint)
    
    'Add line in Active Model
    <A href="usproActiveModelReference.htm">ActiveModelReference</A>.<A href="usmthAddElement.htm">AddElement</A> oLine
    ActiveModelReference.<A href="usmthSelectElement.htm">SelectElement</A> oLine, True
    
    'Get desired ItemType
    Set oItem = oItemLib.<A href="usmthGetItemTypeByName.htm">GetItemTypeByName</A>(sItemName)
    If Not oItem Is Nothing Then
    
        'Attach ItemType to Created element
        Set oItemPropHandler = oItem.<A href="usmthAttachItem.htm">AttachItem</A>(oLine)
        If (oItemPropHandler.<A href="usmthSetPropertyValue.htm">SetPropertyValue</A>("IntegerProperty", 10)) = True Then
            Debug.Print oItemPropHandler.<A href="usmthGetPropertyValue.htm">GetPropertyValue</A>("IntegerProperty")
        End If
        If (oItemPropHandler.SetPropertyValue("BooleanProperty", True)) = True Then
            Debug.Print oItemPropHandler.GetPropertyValue("BooleanProperty")
        End If
        If (oItemPropHandler.SetPropertyValue("DoubleProperty", 10.1)) = True Then
            Debug.Print oItemPropHandler.GetPropertyValue("DoubleProperty")
        End If
        vDateTime = DateTime.Now
        If (oItemPropHandler.SetPropertyValue("Datetime Property", vDateTime)) = True Then
            Debug.Print oItemPropHandler.GetPropertyValue("Datetime Property")
        End If
    Else
        Debug.Print "Item with name " & sItemName; " not found"
    End If
    
End Sub


Sub AttachItemToActiveModel(oItemLib As ItemTypeLibrary, sItemName As String)

    Dim oModel As <A href="usobjModelReference.htm">ModelReference</A>
    Dim oItem As ItemType
    Dim oItemPropHandler As ItemTypePropertyHandler
    Set oModel = ActiveModelReference
    Dim vDateTime As Variant
    
    'Get ItemType Using name
    Set oItem = oItemLib.GetItemTypeByName(sItemName)
    
    'Attach ItemType to ActiveModel
    Set oItemPropHandler = oItem.AttachItem(oModel)
    If Not oItemPropHandler Is Nothing Then
        
        'Get ItemTypeProperty by usng name to set its value
        If (oItemPropHandler.SetPropertyValue("TextProperty", "linehandle")) = True Then
            Debug.Print oItemPropHandler.GetPropertyValue("TextProperty")
        End If
        If (oItemPropHandler.SetPropertyValue("IntegerProperty", 10)) = True Then
            Debug.Print oItemPropHandler.GetPropertyValue("IntegerProperty")
        End If
        If (oItemPropHandler.SetPropertyValue("BooleanProperty", True)) = True Then
            Debug.Print oItemPropHandler.GetPropertyValue("BooleanProperty")
        End If
        If (oItemPropHandler.SetPropertyValue("DoubleProperty", 10.1)) = True Then
            Debug.Print oItemPropHandler.GetPropertyValue("DoubleProperty")
        End If
        vDateTime = DateTime.Now
        If (oItemPropHandler.SetPropertyValue("Datetime Property", vDateTime)) = True Then
            Debug.Print oItemPropHandler.GetPropertyValue("Datetime Property")
        End If
    Else
        Debug.Print "ItemType is already attached to the model"
    End If
    
End Sub

Sub AttachItemToDesignFile(oItemLib As ItemTypeLibrary, sItemName As String)

    Dim oDgn As designFile
    Dim oItem As ItemType
    Dim oItemPropHandler As ItemTypePropertyHandler
    Dim vDateTime As String
    
    'Get ItemType Using name
    Set oDgn = ActiveDesignFile
    Set oItem = oItemLib.GetItemTypeByName(sItemName)
    
    'Attach ItemType to ActiveDesignFile
    Set oItemPropHandler = oItem.AttachItem(oDgn)
    
    If Not oItemPropHandler Is Nothing Then
    
        'Get ItemTypeProperty by using name to set its value
        If (oItemPropHandler.SetPropertyValue("TextProperty", "linehandle")) = True Then
            Debug.Print oItemPropHandler.GetPropertyValue("TextProperty")
        End If

        If (oItemPropHandler.SetPropertyValue("IntegerProperty", 10)) = True Then
            Debug.Print oItemPropHandler.GetPropertyValue("IntegerProperty")
        End If

        If (oItemPropHandler.SetPropertyValue("BooleanProperty", True)) = True Then
            Debug.Print oItemPropHandler.GetPropertyValue("BooleanProperty")
        End If

        If (oItemPropHandler.SetPropertyValue("DoubleProperty", 10.1)) = True Then
            Debug.Print oItemPropHandler.GetPropertyValue("DoubleProperty")
        End If
        
        vDateTime = DateTime.Now
        If (oItemPropHandler.SetPropertyValue("Datetime Property", vDateTime)) = True Then
            Debug.Print oItemPropHandler.GetPropertyValue("Datetime Property")
        End If
        
    Else
        Debug.Print "Itemtype is already attached to the model"
    End If
    
End Sub


Sub FindItemTypeLibraryFromActiveDesignFile()

    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oDgn As designFile
    
    'Instead of ActiveDesignFile user can also get ItemTypeLibraries from specific DesignFile by calling following Apis.
    'If you are adding new ItemTypelibrary after running example then please call refresh method from ItemTypeLibraries.
    Do
        Set oItemLib = ActiveDesignFile.ItemTypeLibraries.<A href="usmthFind.htm">Find</A>("*", oItemLib)
        If oItemLib Is Nothing Then Exit Do
        Debug.Print oItemLib.<A href="usproLibName.htm">LibName</A>
    Loop
    
    'If user want to find ItemTypeLibrary with specific name pattern
    Do
        Set oItemLib = ActiveDesignFile.ItemTypeLibraries.Find("*Test*", oItemLib)
        If oItemLib Is Nothing Then Exit Do
        Debug.Print oItemLib.LibName
    Loop
    
End Sub

Sub FindItemTypeLibraryFromSpecificDesignFile()

    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oDgn As designFile
    Dim oAtt As <A href="usobjAttachment.htm">Attachment</A>
    
    For Each oAtt In ActiveModelReference.<A href="usproAttachments.htm">Attachments</A>
        Set oDgn = oAtt.designFile
        Set oItemLibs = New ItemTypeLibraries
        Do
            Set oItemLib = oItemLibs.<A href="usmthFindForDesignFile.htm">FindForDesignFile</A>("*", oDgn, False, oItemLib)
            If oItemLib Is Nothing Then Exit Do
            Debug.Print oItemLib.LibName
        Loop
    Next

End Sub

Sub FindItemTypeLibraryFromDesignFileAndDgnLibs()

    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oDgn As designFile
    Dim oAtt As Attachment
    
    For Each oAtt In ActiveModelReference.Attachments
        Set oDgn = oAtt.designFile
        Set oItemLibs = New ItemTypeLibraries
        Do
            Set oItemLib = oItemLibs.FindForDesignFile("*a*", oDgn, True, oItemLib)
            If oItemLib Is Nothing Then Exit Do
            Debug.Print oItemLib.LibName
        Loop
    Next

End Sub

Sub FindItemTypeUsingFind()

    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oItem As ItemType
    Dim oDgn As designFile
    
    Set oItemLib = ActiveDesignFile.ItemTypeLibraries.Find("TestLibrary", oItemLib)
    
    'If you are adding new ItemTypes after running example then please call refresh method from ItemTypeLibrary.
    'oItemLib.Refresh
    
    Do
        Set oItem = oItemLib.Find("*", oItem)
        If oItem Is Nothing Then Exit Do
        Debug.Print oItem.<A href="usproItemTypeName.htm">ItemTypeName</A>
    Loop
    
    'If user want to find ItemType with specific name pattern
    Do
        Set oItem = oItemLib.Find("*item*", oItem)
        If oItem Is Nothing Then Exit Do
        Debug.Print oItem.ItemTypeName
    Loop

End Sub

Sub GetSchemaAccessString()

    Dim oItemLib As ItemTypeLibrary
    Dim schemaString As String

    Set oItemLib = ActiveDesignFile.ItemTypeLibraries.Find("TestLibrary", oItemLib)
    schemaString = oItemLib.GetSchemaAccessString
    
    Debug.Print schemaString

End Sub

Sub FindItemTypePropertyUsingFind()

    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oItem As ItemType
    Dim oItemProp As ItemTypeProperty
    
    Set oItemLibs = New ItemTypeLibraries
    Set oItemLib = oItemLibs.FindByName("TestLibrary")
    Set oItem = oItemLib.GetItemTypeByName("FirstItemType")
    
    'user can also use following Apis to get ItemTypeLibrary and ItemType
    
    'Set oItemLib = ActiveDesignFile.ItemTypeLibraries.Find("TestLibrary")
    'Set oItem = oItemLib.Find("FirstItemType")
    
    'If you are adding new ItemTypes after running example then please call refresh method from ItemTypelibrary.
    'oItemLib.Refresh
    
    Do
        Set oItemProp = oItem.Find("*", oItemProp)
        If oItemProp Is Nothing Then Exit Do
        Debug.Print oItemProp.<A href="usproPropertyName.htm">PropertyName</A>
    Loop
    
    'If user want to find ItemType with specific name pattern
    Do
        Set oItemProp = oItem.Find("*Prop*", oItemProp)
        If oItemProp Is Nothing Then Exit Do
        Debug.Print oItemProp.PropertyName
    Loop

End Sub

Sub FindItemsFromDesignFile()

    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oItem As ItemType
    Dim oItemPropHandler As ItemTypePropertyHandler
    Dim result As String
    Dim oItems As <A href="usobjItems.htm">Items</A>
    Dim Success As Boolean
    
    'Use commented scenario if Attaching new ItemType after  running this method
    'Set oItems = ActiveDesignFile.AttachedItems
    'oItems.Refresh ("*Test*")
    
    Do
        Set oItemPropHandler = ActiveDesignFile.<A href="usproAttachedItems.htm">AttachedItems</A>.Find("*Test*", "*", oItemPropHandler)
        If oItemPropHandler Is Nothing Then
            Exit Do
        Else
            Success = oItemPropHandler.SetPropertyValue("TextProperty", "TextPropertyValue")
            result = oItemPropHandler.ItemTypeName
            Debug.Print oItemPropHandler.GetPropertyValue("TextProperty")
            Debug.Print result
        End If
    Loop
End Sub

Sub FindItemsFromDesignFileUsingItemType()

    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oItem As ItemType
    Dim oItemPropHandler As ItemTypePropertyHandler
    Dim val As Boolean
    Dim oItems As Items
   
    Set oItemLibs = New ItemTypeLibraries
    Set oItemLib = oItemLibs.FindByName("TestLibrary")
    Set oItem = oItemLib.GetItemTypeByName("FirstItemType")

    Set oItemPropHandler = ActiveDesignFile.AttachedItems.<A href="usmthFindForItemType.htm">FindForItemType</A>(oItem)
    If oItemPropHandler Is Nothing Then
        Debug.Print "No Item found with given ItemType name"
    Else
        val = oItemPropHandler.SetPropertyValue("IntegerProperty", 310)
        Debug.Print oItemPropHandler.GetPropertyValue("IntegerProperty")
    End If

End Sub

Sub FindItemsFromElement()

    Dim oItemPropHandler As ItemTypePropertyHandler
    Dim Success As Boolean
    Dim result As String
    Dim oItems As Items
    Dim oModel As ModelReference
    Dim oEE As elementEnumerator
    
    Set oEE = ActiveModelReference.<A href="usmthGetSelectedElements.htm">GetSelectedElements</A>

    Do While oEE.<A href="usmthMoveNext.htm">MoveNext</A>
        Dim line As LineElement
        Set line = oEE.<A href="usproCurrent.htm">Current</A>
        Set oItems = line.<A href="usproItems.htm">Items</A>
        oItems.<A href="usmthRefresh.htm">Refresh</A> ("TestLibrary")
        
        'Find ElementItem, to update its Property
        Do
            Set oItemPropHandler = oItems.Find("TestLibrary", "*", oItemPropHandler)
            If oItemPropHandler Is Nothing Then
                Debug.Print "No Element to update"
                Exit Do
            Else
                Success = oItemPropHandler.SetPropertyValue("TextProperty", "newval")
                result = oItemPropHandler.ItemTypeName
                Debug.Print oItemPropHandler.GetPropertyValue("TextProperty")
                Debug.Print result
            End If
        Loop
    Loop
    
End Sub

Sub FindItemsFromElementUsingItemType()

    Dim oItemPropHandler As ItemTypePropertyHandler
    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim sample As Boolean
    Dim result As String
    Dim oItems As Items
    Dim oItem As ItemType
    Dim oModel As ModelReference
    Dim oEE As elementEnumerator
    
    Set oItemLibs = New ItemTypeLibraries
    Set oItemLib = oItemLibs.FindByName("TestLibrary")
    Set oItem = oItemLib.GetItemTypeByName("FirstItemType")
    Set oEE = ActiveModelReference.GetSelectedElements

    Do While oEE.MoveNext
        Dim line As LineElement
        Set line = oEE.Current
        Set oItems = line.Items
        oItems.Refresh ("TestLibrary")
        
        'Find ElementItem, to update its Property
        Set oItemPropHandler = oItems.FindForItemType(oItem)
        If oItemPropHandler Is Nothing Then
            Debug.Print " No Item found with given ItemTypename"
        Else
            sample = oItemPropHandler.SetPropertyValue("TextProperty", "ChangedVal")
            result = oItemPropHandler.ItemTypeName
            Debug.Print oItemPropHandler.GetPropertyValue("TextProperty")
            Debug.Print result
        End If
    Loop
End Sub


Sub FindItemsFromModelReference()

    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oItem As ItemType
    Dim oItemPropHandler As ItemTypePropertyHandler
    Dim tests As String
    Dim oItems As Items
    Dim Success As Boolean
    
    ' Use commented scenario if Attaching new ItemType after  running this method
    Set oItems = ActiveModelReference.Items
    oItems.Refresh ("*Test*")
    
    Do
        Set oItemPropHandler = oItems.Find("*Test*", "*", oItemPropHandler)
        If oItemPropHandler Is Nothing Then
        Exit Do
        Else
        Success = oItemPropHandler.SetPropertyValue("TextProperty", "changedVal")
        Debug.Print oItemPropHandler.GetPropertyValue("TextProperty")
        End If
    Loop
End Sub

Sub FindItemsFromModelReferenceUsingItemType()

    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oItem As ItemType
    Dim oItemPropHandler As ItemTypePropertyHandler
    Dim val As Boolean
    Dim oItems As Items
   
    Set oItemLibs = New ItemTypeLibraries
    Set oItemLib = oItemLibs.FindByName("TestLibrary")
    Set oItem = oItemLib.GetItemTypeByName("FirstItemType")

    Set oItemPropHandler = ActiveModelReference.Items.FindForItemType(oItem)
    If oItemPropHandler Is Nothing Then
        Debug.Print " No Item found with given ItemTypename"
    Else
        val = oItemPropHandler.SetPropertyValue("IntegerProperty", 310)
        Debug.Print oItemPropHandler.GetPropertyValue("IntegerProperty")
    End If

End Sub

Sub HasItemsAttachedtoDesignFile()

    Dim oItems As Items
    Dim IsItem As Boolean

    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oItem As ItemType
    
    'user can pass both ItemTypeLibrary Name and ItemType Name as follows.
    IsItem = ActiveDesignFile.AttachedItems.<A href="usmthHasItems.htm">HasItems</A>("TestLibrary", "FirstItemType")
    Debug.Print IsItem

    'User can Only pass ItemTypeLibrary Name
    IsItem = ActiveDesignFile.AttachedItems.HasItems("TestLibrary")
    Debug.Print IsItem
    
End Sub

Sub HasItemsAttachedtoDesignFileUsingItemtype()

    Dim oItems As Items
    Dim IsItem As Boolean

    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oItem As ItemType

    Set oItemLibs = New ItemTypeLibraries
    Set oItemLib = oItemLibs.FindByName("TestLibrary")
    Set oItem = oItemLib.GetItemTypeByName("FirstItemType")

    IsItem = ActiveDesignFile.AttachedItems.<A href="usmthHasItem.htm">HasItem</A>(oItem)
    Debug.Print IsItem

End Sub

Sub HasItemsAttachedtoModelReference()

    Dim oItems As Items
    Dim IsItem As Boolean

    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oItem As ItemType
    
    'user can pass both ItemTypeLibrary Name and ItemType Name as follows.
    IsItem = ActiveModelReference.Items.HasItems("TestLibrary", "FirstItemType")
    Debug.Print IsItem

    'User can Only pass ItemTypeLibrary Name
    IsItem = ActiveModelReference.Items.HasItems("TestLibrary")
    Debug.Print IsItem
    
End Sub


Sub HasItemsAttachedtoModelReferenceUsingItemtype()

    Dim oItems As Items
    Dim IsItem As Boolean

    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oItem As ItemType

    Set oItemLibs = New ItemTypeLibraries
    Set oItemLib = oItemLibs.FindByName("TestLibrary")
    Set oItem = oItemLib.GetItemTypeByName("FirstItemType")

    IsItem = ActiveModelReference.Items.HasItem(oItem)
    Debug.Print IsItem

End Sub

Sub HasItemsAttachedtoElement()

    Dim oItems As Items
    Dim IsItem As Boolean
    Dim oEE As elementEnumerator
    
    Set oEE = ActiveModelReference.GetSelectedElements

    Do While oEE.MoveNext
        Dim line As LineElement
        Set line = oEE.Current
        
        'Find ElementItem, to update its Property
        'user can pass both ItemTypeLibrary Name and ItemType Name as follows.
        IsItem = line.Items.HasItems("TestLibrary", "FirstItemType")
        Debug.Print IsItem

        'User can Only pass ItemTypeLibrary Name
        IsItem = line.Items.HasItems("TestLibrary")
        Debug.Print IsItem
    Loop
    
End Sub

Sub HasItemsAttachedtoElementUsingItemtype()

    Dim IsItem As Boolean
    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oItem As ItemType
    Dim oEE As elementEnumerator
    
    Set oEE = ActiveModelReference.GetSelectedElements

    Set oItemLibs = New ItemTypeLibraries
    Set oItemLib = oItemLibs.FindByName("TestLibrary")
    Set oItem = oItemLib.GetItemTypeByName("FirstItemType")

    Do While oEE.MoveNext
        Dim line As LineElement
        Set line = oEE.Current
        IsItem = line.Items.HasItem(oItem)
        Debug.Print IsItem
    Loop

End Sub

Sub RenameItemTypeLibrary()
    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    
    Set oItemLibs = New ItemTypeLibraries
    Set oItemLib = oItemLibs.FindByName("TestLibrary")
    
    If oItemLib Is Nothing Then
        Debug.Print "ItemTypeLibrary with name TestLibrary is renamed"
    Else
        oItemLib.LibName = "RenamedLib"
        oItemLib.Write
    End If
End Sub

Sub RenameItemType()
    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oItem As ItemType
    
    Set oItemLibs = New ItemTypeLibraries
    Set oItemLib = oItemLibs.FindByName("RenamedLib")
    Set oItem = oItemLib.GetItemTypeByName("FirstItemType")
    
    If oItem Is Nothing Then
        Debug.Print "ItemType with name FirstItemType is renamed"
    Else
        oItem.ItemTypeName = "FirstItemType_Rename"
        oItemLib.Write
    End If
End Sub

Sub RenameItemTypeProperty()
    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oItem As ItemType
    Dim oItemProp As ItemTypeProperty
    Dim itemTypePropId As Long
    
    Set oItemLibs = New ItemTypeLibraries
    Set oItemLib = oItemLibs.FindByName("RenamedLib")
    Set oItem = oItemLib.GetItemTypeByName("FirstItemType_Rename")
    Set oItemProp = oItem.<A href="usmthGetPropertyByName.htm">GetPropertyByName</A>("IntegerProperty")
    
    If oItemProp Is Nothing Then
        Debug.Print "ItemTypeProperty with name IntegerProperty is renamed"
    Else
        oItemProp.PropertyName = "IntegerProperty_Rename"
        oItemLib.Write
    End If
End Sub

Sub UpdateActiveDesignFileItem()
    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oItem As ItemType
    Dim oItemPropHandler As ItemTypePropertyHandler
    Dim oDgn As designFile
    
    Set oDgn = ActiveDesignFile
    Set oItemLibs = New ItemTypeLibraries
    Set oItemLib = oItemLibs.FindByName("RenamedLib")
    Set oItem = oItemLib.GetItemTypeByName("FirstItemType_Rename")
    
    'Find ActivedesignFileItem to update its property
    Set oItemPropHandler = oItem.<A href="usmthFindItem.htm">FindItem</A>(oDgn)
    
    If (oItemPropHandler.SetPropertyValue("TextProperty", "newvalue")) = True Then
         Debug.Print oItemPropHandler.GetPropertyValue("TextProperty")
    End If
End Sub

Sub UpadteActiveModelItem()
    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oItem As ItemType
    Dim oItemPropHandler As ItemTypePropertyHandler
    Dim oModel As ModelReference
    
    'Get Active model
    Set oModel = ActiveModelReference
    Set oItemLibs = New ItemTypeLibraries
    Set oItemLib = oItemLibs.FindByName("RenamedLib")
    Set oItem = oItemLib.GetItemTypeByName("FirstItemType_Rename")
    
    'Find ActiveModelItem to Update its property
    Set oItemPropHandler = oItem.FindItem(oModel)
    
    If (oItemPropHandler.SetPropertyValue("IntegerProperty_Rename", 102)) = True Then
        Debug.Print oItemPropHandler.GetPropertyValue("IntegerProperty_Rename")
    End If
End Sub

Sub UpdateElementItem()
    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oItem As ItemType
    Dim oEE As elementEnumerator
    Dim oItemPropHandler As ItemTypePropertyHandler
        
    
    Set oItemLibs = New ItemTypeLibraries
    Set oItemLib = oItemLibs.FindByName("RenamedLib")
    Set oItem = oItemLib.GetItemTypeByName("FirstItemType_Rename")
    
    Set oEE = ActiveModelReference.GetSelectedElements
    
    Do While oEE.MoveNext
        Dim line As LineElement
        Set line = oEE.Current
        
        'Find ElementItem, to update its Property
        Set oItemPropHandler = oItem.FindItem(line)
        If oItemPropHandler Is Nothing Then
            Debug.Print " No Element to update "
        Else
            If (oItemPropHandler.SetPropertyValue("IntegerProperty_Rename", 21)) = True Then
                Debug.Print oItemPropHandler.GetPropertyValue("IntegerProperty_Rename")
            End If
        End If
    Loop
End Sub

Sub DetachItemFromActiveDesignFile()

    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oItem As ItemType
    Dim oDgn As designFile
    
    'get Active Design File
    Set oDgn = ActiveDesignFile
    Set oItemLibs = New ItemTypeLibraries
    Set oItemLib = oItemLibs.FindByName("RenamedLib")
    Set oItem = oItemLib.GetItemTypeByName("FirstItemType_Rename")
    
    'Detach Item from Active DesignFile
    oItem.<A href="usmthDetachItem.htm">DetachItem</A> oDgn
End Sub

Sub DetachItemFromActiveModel()
    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oItem As ItemType
    Dim oModel As ModelReference
    
    'Get Active model
    Set oModel = ActiveModelReference
    Set oItemLibs = New ItemTypeLibraries
    Set oItemLib = oItemLibs.FindByName("RenamedLib")
    Set oItem = oItemLib.GetItemTypeByName("FirstItemType_Rename")
    
    'Detach Item from ActiveModelItem
    oItem.DetachItem oModel
End Sub


Sub DetachItemFromElement()
    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oItem As ItemType
    Dim oEE As elementEnumerator
    
    Set oItemLibs = New ItemTypeLibraries
    Set oItemLib = oItemLibs.FindByName("RenamedLib")
    Set oItem = oItemLib.GetItemTypeByName("FirstItemType_Rename")
    
    Set oEE = ActiveModelReference.GetSelectedElements
    
    Do While oEE.MoveNext
        Dim line As LineElement
        Set line = oEE.Current
        
        'Detach Item from Element
        oItem.DetachItem line
    Loop
End Sub

Sub DeleteItemTypeProperty()
    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oItem As ItemType
    Dim oItemProp As ItemTypeProperty
    Dim itemTypePropId As Long
    
    Set oItemLibs = New ItemTypeLibraries
    
    'Check for ItemTypelibrary, there are chances that it wont exist
    Set oItemLib = oItemLibs.FindByName("RenamedLib")
    
    'Check for ItemType, there are chances that it wont exist
    Set oItem = oItemLib.Find("FirstItemType_Rename", oItem)
    If Not oItem Is Nothing Then
        Set oItem = oItemLib.GetItemTypeByName("FirstItemType_Rename")
        Set oItemProp = oItem.GetPropertyByName("TextProperty")
    End If
    
    If oItemProp Is Nothing Then
        Debug.Print "ItemTypeProperty with name TextProperty doesnot exist"
    Else
        itemTypePropId = oItemProp.<A href="usmthGetPropId.htm">GetPropId</A>
        oItem.<A href="usmthRemoveProperty.htm">RemoveProperty</A> (itemTypePropId)
        oItemLib.Write
    End If
End Sub

Sub DeleteItemType()
    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    Dim oItem As ItemType
    Dim lItemID As Long
    
    Set oItemLibs = New ItemTypeLibraries
    
    'Check for ItemTypelibrary, there are chances that it wont exist
    Set oItemLib = oItemLibs.FindByName("RenamedLib")
    Set oItem = oItemLib.GetItemTypeByName("FirstItemType_Rename")
    
    If oItem Is Nothing Then
        Debug.Print "ItemType with name FirstItemType doesnot exist"
    Else
        lItemID = oItem.<A href="usmthGetId.htm">GetId</A>
        oItemLib.<A href="usmthRemoveItemType.htm">RemoveItemType</A> (lItemID)
        oItemLib.Write
    End If
End Sub

Sub DeleteItemTypeLibrary()
    Dim oItemLibs As ItemTypeLibraries
    Dim oItemLib As ItemTypeLibrary
    
    Set oItemLibs = New ItemTypeLibraries
    Set oItemLib = oItemLibs.FindByName("RenamedLib")
    
    If oItemLib Is Nothing Then
        Debug.Print "ItemTypeLibrary with name TestLibrary doesnot exist"
    Else
        oItemLib.<A href="usmthDeleteLib.htm">DeleteLib</A>
    End If
End Sub

Sub CalculatedPropertyExpression()
    Dim libset As ItemTypeLibraries
    Dim itemLibrary As ItemTypeLibrary
    Dim ItemType As ItemType
    Dim itemTypeProp As ItemTypeProperty
    Dim elementEnumerator As elementEnumerator
    Dim prophandle As ItemTypePropertyHandler
    Dim propertyExpression As String
    Dim propertyValue As String
    Dim failureValue As String
    
    Set libset = New ItemTypeLibraries
    Set itemLibrary = libset.FindByName("TestLibrary")
    Set ItemType = itemLibrary.GetItemTypeByName("FirstItemType")
    Set itemTypeProp = ItemType.GetPropertyByName("CalculatedProperty")

    Set elementEnumerator = ActiveModelReference.GetSelectedElements
    
    Do While elementEnumerator.MoveNext
        Dim line As LineElement
        Set line = elementEnumerator.Current
        Set prophandle = ItemType.FindItem(line)
        If prophandle Is Nothing Then
            Debug.Print " No Element to update "
        Else
            Debug.Print "Expression= " & itemTypeProp.<A href="usmthGetExpression.htm">GetExpression</A> & vbNewLine;

            propertyValue = prophandle.GetPropertyValue("CalculatedProperty")
            Debug.Print "Calulated propertyValue = " & propertyValue & vbNewLine;

            failureValue = itemTypeProp.<A href="usmthGetExpressionFailureValue.htm">GetExpressionFailureValue</A>
            Debug.Print "Calulated property failure value = " & failureValue & vbNewLine;
        End If
    Loop
End Sub

Sub GetAndSetPoint3dPropertyAttachedToDesignFile()
    Dim libset As ItemTypeLibraries
    Dim itemLibrary As ItemTypeLibrary
    Dim itemtype As itemtype
    Dim prophandle As ItemTypePropertyHandler
    Dim designFile As designFile
    Dim point As Point3d
    Dim newPoint As Point3d

    point = Point3dFromXYZ(10.1, 20.2, 30.3)
    
    Set designFile = ActiveDesignFile
    Set libset = New ItemTypeLibraries
    Set itemLibrary = libset.FindByName("TestLibrary")
    Set itemtype = itemLibrary.GetItemTypeByName("FirstItemType")
    
    'Find ActivedesignFileItem to set and get point property
    Set prophandle = itemtype.FindItem(designFile)
    
    If (prophandle.<A href="usmthSetPoint3dPropertyValue.htm">SetPoint3dPropertyValue</A>("PointProperty", point)) = True Then
        newPoint = prophandle.<A href="usmthGetPoint3dPropertyValue.htm">GetPoint3dPropertyValue</A>("PointProperty")
        Debug.Print "X=" & newPoint.X & " Y=" & newPoint.Y & " Z=" & newPoint.Z
    End If
End Sub

Sub GetAndSetPoint2dPropertyAttachedToDesignFile()
    Dim libset As ItemTypeLibraries
    Dim itemLibrary As ItemTypeLibrary
    Dim itemtype As itemtype
    Dim prophandle As ItemTypePropertyHandler
    Dim designFile As designFile
    Dim point As <A href="usudtPoint2d.htm">Point2d</A>
    Dim newPoint2d As Point2d

    point = <A href="usmthPoint2dFromXY.htm">Point2dFromXY</A>(11.5, 22.6)
    Set designFile = ActiveDesignFile
    Set libset = New ItemTypeLibraries
    Set itemLibrary = libset.FindByName("TestLibrary")
    Set itemtype = itemLibrary.GetItemTypeByName("FirstItemType")
    
    'Find ActivedesignFileItem to set and get point property
    Set prophandle = itemtype.FindItem(designFile)
    If (prophandle.<A href="usmthSetPoint2dPropertyValue.htm">SetPoint2dPropertyValue</A>("PointProperty", point)) = True Then
        newPoint2d = prophandle.<A href="usmthGetPoint2dPropertyValue.htm">GetPoint2dPropertyValue</A>("PointProperty")
        Debug.Print "X=" & newPoint2d.X & " Y=" & newPoint2d.Y
   End If
End Sub

Sub GetSetValueForArrayProperty()
    Dim ITPropertyHandler As ItemTypePropertyHandler
    Dim sample As Boolean
    Dim result As String
    Dim Items As Items
    Dim modelref As ModelReference
    Dim elementEnumerator As elementEnumerator
    
    Set libset = New ItemTypeLibraries
    Set itemLibrary = libset.FindByName("TestLibrary")
    Set ItemType = itemLibrary.GetItemTypeByName("FirstItemType")
    Set elementEnumerator = ActiveModelReference.GetSelectedElements

    Do While elementEnumerator.MoveNext
        Dim line As LineElement
        Set line = elementEnumerator.Current
        Set Items = line.Items
        Items.Refresh("TestLibrary")
        Set ITPropertyHandler = Items.FindForItemType(ItemType)
        If ITPropertyHandler Is Nothing Then
            Debug.Print "No Item found with given Itemtypename"
        Else
            'For access string : Use direct array property with [0] for simple array properties, Array contains struct use Struct Array[0].Struct Prop1
            sample = ITPropertyHandler.SetPropertyValue("ITArray Property[0]", "ITArray Property[0] modified")
            result = ITPropertyHandler.ItemTypeName
            Debug.Print ITPropertyHandler.GetPropertyValue("ITArray Property[0]")
        End If
    Loop
End Sub

Sub AddOrInsertArrayElementsOnInstance()
    Dim libraries As ItemTypeLibraries
    Dim itemTypelibrary As itemTypelibrary
    Dim itemType As itemType
    Dim colorProperty As itemTypeProperty
    Dim itemPropHandler As ItemTypePropertyHandler
    Dim instanceSetStatus As Boolean

    'Create new line element to use for attach item
    Set ele = CreateLineElement2(Nothing, <A href="usmthPoint3dFromXY.htm">Point3dFromXY</A>(0, 5), Point3dFromXY(5, 5))
    ele.<A href="usproColor.htm">Color</A> = 3
    ActiveModelReference.AddElement ele
    ele.<A href="usmthRedraw.htm">Redraw</A>

    'Creating new library and array property
    Set libraries = New ItemTypeLibraries
    Set itemTypelibrary = libraries.CreateLib("Bike")
    Set itemType = itemTypelibrary.AddItemType("Twowheeler")
    Set colorProperty = itemType.AddProperty("Color", ItemPropertyTypeString)
    colorProperty.<A href="usproIsArray.htm">IsArray</A> = True
    itemTypelibrary.Write

    Set itemPropHandler = itemType.AttachItem(ele)
    'The AddArrayElements() will create two empty entries in for color property
    instanceSetStatus = itemPropHandler.<A href="usmthAddArrayElements.htm">AddArrayElements</A>("Color", 2)
    'The InsertArrayElements() will create two empty entries from postion 2 for color property
    instanceSetStatus = itemPropHandler.<A href="usmthInsertArrayElements.htm">InsertArrayElements</A>("Color", 2, 2)
End Sub

Sub RemoveSpecificArrayElementOnInstance()
    Dim ele As <A href="usobjElement.htm">Element</A>
    Dim oItems As Items
    Dim oItemPropHandler As ItemTypePropertyHandler
    Dim isBoolean As Boolean

    'Use element specific Element Id
    Set ele = ActiveModelReference.<A href="usmthGetElementByID.htm">GetElementByID</A>(<A href="usmthDLongFromString.htm">DLongFromString</A>("804"))
    Set oItems = ele.Items

    Set oItemPropHandler = oItems.Find("Bike", "Twowheeler", Nothing)
    If oItemPropHandler Is Nothing Then
    Else
        Debug.Print "No. of Elements in Color array :" & oItemPropHandler.<A href="usmthGetArrayElementsCount.htm">GetArrayElementsCount</A>("Color")
    'RemoveArrayElement() call will remove the second entry i.e. index 1 for the Color property
        isBoolean = oItemPropHandler.<A href="usmthRemoveArrayElement.htm">RemoveArrayElement</A>("Color", 1)
        Debug.Print "No. of Elements in Color array :" & oItemPropHandler.GetArrayElementsCount("Color")
    End If
End Sub

Sub ClearAllArrayElementsFromInstance()
    Dim ele As Element
    Dim oItems As Items
    Dim oItemPropHandler As ItemTypePropertyHandler
    Dim isBoolean As Boolean

    'Use element specific Element Id
    Set ele = ActiveModelReference.GetElementByID(DLongFromString("804"))
    Set oItems = ele.Items

    Set oItemPropHandler = oItems.Find("Bike", "Twowheeler", Nothing)
    If oItemPropHandler Is Nothing Then
    Else
        Debug.Print "No. of Elements in Color array :" & oItemPropHandler.GetArrayElementsCount("Color")
        'ClearArray() call will clear all the array elements created for color property
        isBoolean = oItemPropHandler.<A href="usmthClearArray.htm">ClearArray</A>("Color")
    End If
End Sub

Sub SetAndGetReadOnlyProperty()
    Dim libraries As ItemTypeLibraries
    Dim itemTypelibrary As itemTypelibrary
    Dim ItemType As ItemType
    Dim colorProperty As itemTypeProperty

'Creating new library and property
Set libraries = New ItemTypeLibraries
Set itemTypelibrary = libraries.CreateLib("Bike")
Set ItemType = itemTypelibrary.AddItemType("Twowheeler")
Set colorProperty = ItemType.AddProperty("Color", ItemPropertyTypeString)
'Need to set default to set the Readonly option 
colorProperty.SetDefaultValue("Red")
    colorProperty.<A href="usproIsReadOnlyProperty.htm">IsReadOnlyProperty</A> = True
    itemTypelibrary.Write

    Debug.Print "Color Property Readonly status : " & colorProperty.IsReadOnlyProperty
End Sub

Sub SetAndGetHiddenProperty()
    Dim libraries As ItemTypeLibraries
    Dim itemTypelibrary As itemTypelibrary
    Dim ItemType As ItemType
    Dim colorProperty As itemTypeProperty

'Creating new library and 2 properties
Set libraries = New ItemTypeLibraries
Set itemTypelibrary = libraries.CreateLib("Bike")
Set ItemType = itemTypelibrary.AddItemType("Twowheeler")
' Creating color property which is set to hidden
Set colorProperty = ItemType.AddProperty("Color", ItemPropertyTypeString)
colorProperty.SetDefaultValue("Red")
colorProperty.<A href="usproIsHiddenProperty.htm">IsHiddenProperty</A> = True
' Creating shape property which is a regular property without any hidden setting
Set brandProperty = ItemType.AddProperty("Brand", ItemPropertyTypeString)
brandProperty.SetDefaultValue("No Brand")

itemTypelibrary.Write

Debug.Print "Color Property hidden status : " & colorProperty.IsHiddenProperty
Debug.Print "Brand Property hidden status : " & brandProperty.IsHiddenProperty
End Sub

</CODE></PRE>
