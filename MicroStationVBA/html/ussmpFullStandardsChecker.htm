<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Complete Missing-Attachments Standards Checker</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>Complete Missing-Attachments Standards Checker</H1>

<P class=T>
The VBA project SCCompleteRefCheck.mvba is a runnable version of the example. This
        project also uses some methods from the project XMLHelper.mvba.
</P>
<P class=T>
The following code is from the main module of the project.
</P>
<PRE class=CT><CODE>
Public onlyCheckDisplayed As Boolean
Private oSC As <A href="usobjIStandardsChecker.htm">IStandardsChecker</A>

Sub OnProjectLoad()
    AddAttachmentsChecker
End Sub
Sub AddAttachmentsChecker()
    '
    '   There is nothing to prevent this program from adding 2 standards checkers.
    '   To prevent that from happening, call RemoveAttachmentsChecker before
    '   adding the  checker.
    '
    RemoveAttachmentsChecker
    Set oSC = New clsAttachmentsCheckerFull
    <A href="usproStandardsCheckerController.htm">StandardsCheckerController</A>.<A href="usmthAddStandardsChecker.htm">AddStandardsChecker</A> oSC, 1000
End Sub
Sub RemoveAttachmentsChecker()
    If Not oSC Is Nothing Then StandardsCheckerController.<A href="usmthRemoveStandardsChecker.htm">RemoveStandardsChecker</A> oSC
    Set oSC = Nothing
End Sub

</CODE></PRE>
<P class=T>
The following code is from the project's class clsAttachmentsCheckerFull.
</P>
<PRE class=CT><CODE>
Implements IStandardsChecker
Private m_libraryID As Long
Private m_aborted As Boolean

'
'   Since the method SaveSettings in this class uses objects from the XML library,
'   this project requires a reference to Microsoft XML, v4.0.  Set the reference in
'   the Tools-&gt;Reference dialog.
'
Private Sub CreateDefaultSettings()
    onlyCheckDisplayed = False
End Sub
'
'   An alternate approach to using XML and SetApplicationSettings would be to save the
'   application's settings in an ApplicationElement.  There is no requirement to use
'   SetApplicationSettings to save the settings.
'
Private Sub <A href="usmthSaveSettings.htm">SaveSettings</A>()
    Dim oDom As DOMDocument60
    Dim oRootNode As IXMLDOMNode
    Dim oNode As IXMLDOMNode
    Dim strSaveValue As String

    '   Create a DOM and make ReferenceStandards the root element
    Set oDom = New DOMDocument60
    Set oRootNode = oDom.<A href="usmthCreateElement.htm">CreateElement</A>("ReferenceStandards")
    oDom.appendChild oRootNode

    Set oNode = oDom.CreateElement("onlyCheckDisplayed")
    oRootNode.appendChild oNode

    strSaveValue = "False"
    If onlyCheckDisplayed Then strSaveValue = "True"
    modXMLHelper.AddAttribute oNode, "Value", strSaveValue

    '   Now tell the API to save this DOM. SetApplicationSettings uses the current settings
    '   name and the current standards checker's <A href="usproIdentityString.htm">IdentityString</A> to create a unique identifier for
    '   these settings.
    StandardsCheckerController.<A href="usmthSetApplicationSettings.htm">SetApplicationSettings</A> oDom
End Sub
'
'   If the program saved its settings in an ApplicationElement, then it would retrieve them
'   from the ApplicationElement instead of using GetApplicationSettings
'
Private Sub LoadSettings()
    Dim oDom As DOMDocument60
    Dim oNode As IXMLDOMNode

    On Error GoTo HandleError

    '   Extract this standards checker's setting to a DOM
    Set oDom = StandardsCheckerController.<A href="usmthGetApplicationSettings.htm">GetApplicationSettings</A>
    If oDom Is Nothing Then GoTo HandleError

    '   Get the root element. Every child of the root element is
    '   a standard.
    Set oNode = oDom.selectSingleNode("ReferenceStandards")
    Set oNode = oNode.firstChild
    Do While Not oNode Is Nothing
        '   eleType looks like ELE02.  Strip off the first 3 characters
        '   to get the element number.
        If oNode.NodeName = "onlyCheckDisplayed" Then
            Dim strValue As String
            strValue = modXMLHelper.GetAttributeValue(oNode, "Value")
            onlyCheckDisplayed = (strValue = "True")
        End If
        Set oNode = oNode.nextSibling
    Loop

HandleError:
End Sub
'
'   Show the error in the StandardsCheckerController's dialog box and
'   add the error to the StandardsCheckerController's report.
'
Private Sub ReportMissingReference(att As <A href="usobjAttachment.htm">Attachment</A>)
    Dim scc As <A href="usobjStandardsCheckerController.htm">StandardsCheckerController</A>
    Dim rpt As <A href="usobjStandardsCheckerReport.htm">StandardsCheckerReport</A>
    Dim response As <A href="usenmMsdStandardsCheckerReplaceChoice.htm">MsdStandardsCheckerReplaceChoice</A>
    Dim strDescr As String

    strDescr = "Missing reference file: " & att.<A href="usproAttachName.htm">AttachName</A>
    If att.<A href="usproLogicalName.htm">LogicalName</A> &lt;&gt; "" Then
        strDescr = strDescr & ", Logical name: " & att.LogicalName
    End If

    '   Show it in the user interface. If the user has not selected interactive
    '   mode then ShowCheckerError just returns immediately
    Set scc = StandardsCheckerController
    scc.<A href="usmthShowCheckerError.htm">ShowCheckerError</A> response, strDescr, 0, False

    '  If the user entered Cancel, tell RunCheck to abort
    If response = msdStandardsCheckerReplaceChoiceAbort Then m_aborted = True

    scc.<A href="usproTotalProblems.htm">TotalProblems</A> = scc.TotalProblems + 1

    Set rpt = scc.<A href="usproReport.htm">Report</A>

    Dim scp As <A href="usobjStandardsCheckerProblem.htm">StandardsCheckerProblem</A>

    Set scp = rpt.<A href="usmthAddProblem.htm">AddProblem</A>(strDescr, "Reference", False)

    '
    '   Record the ElementID because it is the only property of an Attachment that cannot change.
    '   If someone writes a program that processes the problem report, they can use the ElementID
    '   to be certain the program accesses the same attachment that the report refers to.
    '
    scp.<A href="usmthAddElementID.htm">AddElementID</A> att.<A href="usproElementID.htm">ElementID</A>
    scp.<A href="usmthAddStandard.htm">AddStandard</A> "Missing File"
End Sub


Private Sub IStandardsChecker_<A href="usmthAddedCheckerToStandardsCheckerApps.htm">AddedCheckerToStandardsCheckerApps</A>(ByVal ApplicationXMLNode As Object)
    Dim rpt As StandardsCheckerReport
    '  If the program declares these as IXMLDOMNode, then the program
    '  can add custom XML data to the report.  If the program declares them
    '  as IXMLDOMNode then it must also set a reference to Microsoft XML, v4.0
    Dim oLibraryNode As Object ' or IXMLDOMNode

    Set rpt = StandardsCheckerController.Report

    '  m_libraryID is output from AddLibraryToCheckerApp. It is used later as input to AddStandard
    Set oLibraryNode = rpt.<A href="usmthAddLibraryToCheckerApp.htm">AddLibraryToCheckerApp</A>(ApplicationXMLNode, StandardsCheckerController.<A href="usproSettingsFile.htm">SettingsFile</A>, m_libraryID)
    rpt.<A href="usmthAddStandardToLibrary.htm">AddStandardToLibrary</A> oLibraryNode, "MissingFile", "Reference"
End Sub

Private Property Get IStandardsChecker_<A href="usproCallForEachModel.htm">CallForEachModel</A>() As Boolean
    IStandardsChecker_CallForEachModel = True
End Property

Private Sub IStandardsChecker_<A href="usmthCreateSettings.htm">CreateSettings</A>()
    CreateDefaultSettings
    SaveSettings
End Sub

Private Sub IStandardsChecker_<A href="usmthDeleteSettings.htm">DeleteSettings</A>()
    StandardsCheckerController.<A href="usmthDeleteApplicationSettings.htm">DeleteApplicationSettings</A>
End Sub

Private Property Get IStandardsChecker_<A href="usproDescription.htm">Description</A>() As String
    IStandardsChecker_Description = "Verifies that all reference files are found"
End Property

Private Property Get IStandardsChecker_<A href="usproDialogString.htm">DialogString</A>() As String
    IStandardsChecker_DialogString = "VBA Reference Checker"
End Property

Private Sub IStandardsChecker_<A href="usmthEditSettings.htm">EditSettings</A>(ByVal <A href="usproIsReadOnly.htm">IsReadOnly</A> As Boolean)
    Dim saveOnlyCheckDisplayed As Boolean

    saveOnlyCheckDisplayed = onlyCheckDisplayed
    frmSettings.cbxRestrictToDisplayed.Enabled = Not IsReadOnly
    frmSettings.Show
    If saveOnlyCheckDisplayed &lt;&gt; onlyCheckDisplayed Then SaveSettings
End Sub

Private Property Get IStandardsChecker_<A href="usproFoundSettings.htm">FoundSettings</A>() As Boolean
    LoadSettings
    IStandardsChecker_FoundSettings = True  ' It is okay to run
End Property

Private Sub IStandardsChecker_<A href="usmthGetFixDetail.htm">GetFixDetail</A>(Fixes() As String, ByVal SelectedFix As Long, FixPropertiesLabel As String, FixProperties() As String)
    ' This checker does not supply detailed information on possible fixes
End Sub

Private Property Get IStandardsChecker_<A href="usproHasSettings.htm">HasSettings</A>() As Boolean
    IStandardsChecker_HasSettings = True
End Property

Private Property Get IStandardsChecker_IdentityString() As String
    IStandardsChecker_IdentityString = "bentley.com.ReferencesChecker"
End Property

Private Sub IStandardsChecker_<A href="usmthRunCheck.htm">RunCheck</A>(ByVal ModelToCheck As <A href="usobjModelReference.htm">ModelReference</A>, ByVal FirstModel As Boolean, ByVal Options As Long)
    Dim att As Attachment
    m_aborted = False
    For Each att In ModelToCheck.<A href="usproAttachments.htm">Attachments</A>
        If att.<A href="usproIsMissingFile.htm">IsMissingFile</A> Then
            If onlyCheckDisplayed = False Or att.<A href="usproDisplayFlag.htm">DisplayFlag</A> Then
                ReportMissingReference att
                If m_aborted Then Exit Sub ' User entered Cancel
            End If
        End If
    Next
End Sub

Private Property Get IStandardsChecker_<A href="usproVersionString.htm">VersionString</A>() As String
    IStandardsChecker_VersionString = "Version 1.0.0.0"
End Property

</CODE></PRE>
