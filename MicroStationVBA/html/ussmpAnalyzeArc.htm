<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Analyze Arc Example</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>Analyze Arc Example</H1>

<P class=T>
This example illustrates some of the methods of <A href="usobjArcElement.htm">ArcElement</A>.  The first code fragment
            goes in a code module. It starts the execution of the command.  The command is implemented in a
            class called AnalyzeArcCommand.
</P>
<P class=T>
The macro AnalyzeArc starts the command running by creating a new
            instance of AnalyzeArcCommand and passing it to the <A href="usmthStartLocate.htm">StartLocate</A> method of
            <A href="usobjCommandState.htm">CommandState</A>.
</P>
<P class=T>
An object cannot be used as input to <B>StartLocate</B> unless that object's class implements <A href="usobjILocateCommandEvents.htm">ILocateCommandEvents</A>.
            A class that implements this interface must implement <A href="usevtAccept.htm">Accept</A>, <A href="usevtCleanup.htm">Cleanup</A>, <A href="usevtDynamics.htm">Dynamics</A>,
            <A href="usevtLocateFailed.htm">LocateFailed</A>, <A href="usevtLocateFilter.htm">LocateFilter</A>, <A href="usevtLocateReset.htm">LocateReset</A>, and <A href="usevtStart.htm">Start</A> methods.
</P>
<PRE class=CT><CODE>
Sub AnalyzeArc()
    <A href="usproCommandState.htm">CommandState</A>.StartLocate New AnalyzeArcCommand
End Sub

</CODE></PRE>
<P class=T>
Following is the code from the AnalyzeArcCommand class.
</P>
<PRE class=CT><CODE>
Implements ILocateCommandEvents

Private Sub ILocateCommandEvents_Accept(ByVal <A href="usproElement.htm">Element</A> As <A href="usobjElement.htm">Element</A>, _
                <A href="usproPoint.htm">Point</A> As <A href="usudtPoint3d.htm">Point3d</A>, ByVal <A href="usproView.htm">View</A> As <A href="usobjView.htm">View</A>)
    Dim dPrimaryRadius As Double
    Dim dSecondaryRadius As Double
    Dim dSweepAngle As Double
    Dim dStartAngle As Double
    Dim rotationMatrix As <A href="usudtMatrix3d.htm">Matrix3d</A>
    Dim CenterPnt As Point3d
    Dim StartPnt As Point3d
    Dim EndPnt As Point3d
    Dim oArcElement As ArcElement

    Set oArcElement = Element

    With oArcElement
        dPrimaryRadius = .<A href="usproPrimaryRadius.htm">PrimaryRadius</A>
        dSecondaryRadius = .<A href="usproSecondaryRadius.htm">SecondaryRadius</A>
        dSweepAngle = .sweepAngle
        dStartAngle = .<A href="usproStartAngle.htm">StartAngle</A>
        rotationMatrix = .<A href="usproRotation.htm">Rotation</A>
        CenterPnt = .<A href="usproCenterPoint.htm">CenterPoint</A>
        StartPnt = .<A href="usproStartPoint.htm">StartPoint</A>
        EndPnt = .<A href="usproEndPoint.htm">EndPoint</A>
    End With

    Debug.Print "Primary radius = " & dPrimaryRadius
    Debug.Print "SecondaryRadius = " & dSecondaryRadius
    Debug.Print "Sweep Angle = " & dSweepAngle
    Debug.Print "Start Angle = " & dStartAngle
    Debug.Print "Start Point (" & StartPnt.x & ", " & StartPnt.y & ")"

    '  Don't restart the command reusing this object.  This lets
    '  the user select the next element to process.

End Sub

Private Sub ILocateCommandEvents_Cleanup()

End Sub

Private Sub ILocateCommandEvents_Dynamics(Point As Point3d, ByVal View As View, _
            ByVal DrawMode As <A href="usenmMsdDrawingMode.htm">MsdDrawingMode</A>)

End Sub

Private Sub ILocateCommandEvents_LocateFailed()
    <A href="usmthShowStatus.htm">ShowStatus</A> "No arc element found"
End Sub

Private Sub ILocateCommandEvents_LocateFilter(ByVal Element As Element, _
                                Point As Point3d, Accepted As Boolean)

    '  Accepted defaults to False
    Accepted = False
    If Element.<A href="usproIsArcElement.htm">IsArcElement</A> Then
        ' ShowPrompt "Accept arc element"
        Accepted = True
    End If

End Sub

Private Sub ILocateCommandEvents_LocateReset()

End Sub

Private Sub ILocateCommandEvents_Start()
    Dim lc As <A href="usobjLocateCriteria.htm">LocateCriteria</A>

    '  Since this command does not modify the original element,
    '  set the locate criteria to allow  read-only elements.
    Set lc = CommandState.<A href="usmthCreateLocateCriteria.htm">CreateLocateCriteria</A>(False)
    CommandState.<A href="usmthSetLocateCriteria.htm">SetLocateCriteria</A> lc

    <A href="usmthShowCommand.htm">ShowCommand</A> "Analyze Arc Example"
    <A href="usmthShowPrompt.htm">ShowPrompt</A> "Select an arc"
End Sub

</CODE></PRE>
