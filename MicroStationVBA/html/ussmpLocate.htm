<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Copy Element Example</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>Copy Element Example</H1>

<P class=T>
This example illustrates the implementation of an element modification command.  The following
            code starts the command by creating an instance of the class that implements <A href="usobjILocateCommandEvents.htm">ILocateCommandEvents</A>
            and invoking <A href="usmthStartLocate.htm">StartLocate</A> passing in that instance as an argument.
</P>
<PRE class=CT><CODE>
Sub RunCopyElement()
    <A href="usproCommandState.htm">CommandState</A>.StartLocate New clsCopyElementCommand
End Sub

</CODE></PRE>
<P class=T>
This following code must be in a class that implements <B>ILocateCommandEvents</B>. In this example,
            it is in the class clsCopyElementCommand.
</P>
<PRE class=CT><CODE>
Implements ILocateCommandEvents

Private m_oStartElement As <A href="usobjElement.htm">Element</A>
Private m_tStartPoint As <A href="usudtPoint3d.htm">Point3d</A>

'  Both the Dynamics and the Accept event handlers use this
'  method to create a copy of the element and move as far
'  as the cursor has moved.
Function CreateMovedElement(oBase As Element, tInputPoint As Point3d, bAddToModel As Boolean) As Element
    Dim tDistance As Point3d
    Dim oContext As New CopyContext

    With tDistance
        .X = tInputPoint.X - m_tStartPoint.X
        .Y = tInputPoint.Y - m_tStartPoint.Y
        .Z = tInputPoint.Z - m_tStartPoint.Z
    End With

    oContext.<A href="usproAddElementToModel.htm">AddElementToModel</A> = bAddToModel
    '  CopyElement's default behavior is to add the element to the model. Use
    '  the CopyContext to control whether or not it adds the element to the model.
    Set CreateMovedElement = <A href="usproActiveModelReference.htm">ActiveModelReference</A>.<A href="usmthCopyElement.htm">CopyElement</A>(m_oStartElement, oContext)
    CreateMovedElement.<A href="usmthMove.htm">Move</A> tDistance

End Function


' This is called when the user enters a data point after the
'  LocateFilter has accepted an element
Private Sub ILocateCommandEvents_<A href="usevtAccept.htm">Accept</A>(ByVal <A href="usproElement.htm">Element</A> As Element, _
                <A href="usproPoint.htm">Point</A> As Point3d, ByVal <A href="usproView.htm">View</A> As <A href="usobjView.htm">View</A>)
    Dim oTemp As Element
    Set oTemp = CreateMovedElement(m_oStartElement, Point, True)

    oTemp.<A href="usmthRewrite.htm">Rewrite</A>
    oTemp.<A href="usmthRedraw.htm">Redraw</A>
    CommandState.StartLocate New clsCopyElementCommand
End Sub

Private Sub ILocateCommandEvents_<A href="usevtCleanup.htm">Cleanup</A>()

End Sub

Private Sub ILocateCommandEvents_<A href="usevtDynamics.htm">Dynamics</A>(Point As Point3d, _
        ByVal View As View, ByVal DrawMode As <A href="usenmMsdDrawingMode.htm">MsdDrawingMode</A>)
    Dim oTemp As Element

    Set oTemp = CreateMovedElement(m_oStartElement, Point, False)
    oTemp.Redraw DrawMode
End Sub

Private Sub ILocateCommandEvents_<A href="usevtLocateFailed.htm">LocateFailed</A>()
    CommandState.StartLocate New clsCopyElementCommand
End Sub


Private Sub ILocateCommandEvents_<A href="usevtLocateFilter.htm">LocateFilter</A>(ByVal Element As Element, _
        Point As Point3d, Accepted As Boolean)
    ' If this method does not set Accepted to False, then
    ' the element is accepted. This functions remembers what
    ' element was accepted and the datapoint used to accept
    ' the element.  Then it starts dynamics.
    Set m_oStartElement = Element
    m_tStartPoint = Point
    CommandState.<A href="usmthStartDynamics.htm">StartDynamics</A>
End Sub

Private Sub ILocateCommandEvents_<A href="usevtLocateReset.htm">LocateReset</A>()
    CommandState.StartLocate New clsCopyElementCommand
End Sub

Private Sub ILocateCommandEvents_<A href="usevtStart.htm">Start</A>()
    Dim lc As <A href="usobjLocateCriteria.htm">LocateCriteria</A>

    '  Since this command does not modify the original element,
    '  set the locate criteria to allow read-only elements.
    Set lc = CommandState.<A href="usmthCreateLocateCriteria.htm">CreateLocateCriteria</A>(False)
    CommandState.<A href="usmthSetLocateCriteria.htm">SetLocateCriteria</A> lc

    '  MicroStation disables AccuSnap whenever a new command starts, so a command
    '  should enable AccuSnap whenever it is appropriate.  This user still has the
    '  ability to turn off AccuSnap. Enabling AccuSnap does not override that.
    '  EnableAccuSnap only enables AccuSnap if the user has it turned on.
    CommandState.<A href="usmthEnableAccuSnap.htm">EnableAccuSnap</A>

    <A href="usmthShowCommand.htm">ShowCommand</A> "Copy Element"
    <A href="usmthShowPrompt.htm">ShowPrompt</A> "Select element to Copy"
End Sub

</CODE></PRE>
