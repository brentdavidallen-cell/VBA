<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Transform to and from ACS</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>Transform to and from ACS</H1>

<PRE class=CT><CODE>
'
'  Create the transforms that add/subtract the origin and multiply by the rotation
'
Sub GetACSTransforms(trnsToACS As <A href="usudtTransform3d.htm">Transform3d</A>, trnsFromACS As Transform3d)
    Dim pntOrigin As <A href="usudtPoint3d.htm">Point3d</A>
    Dim rotMatrix As <A href="usudtMatrix3d.htm">Matrix3d</A>
    Dim oACS As <A href="usobjACSManager.htm">ACSManager</A>

    Set oACS = <A href="usproACSManager.htm">ACSManager</A>

    rotMatrix = oACS.<A href="usproRotation.htm">Rotation</A>
    pntOrigin = oACS.<A href="usproOrigin.htm">Origin</A>

    '  Create a transform that rotates the point to the ACS and then
    '  subtracts the origin.
    trnsToACS = <A href="usmthTransform3dFromPoint3d.htm">Transform3dFromPoint3d</A>(<A href="usmthPoint3dNegate.htm">Point3dNegate</A>(pntOrigin))
    trnsToACS = <A href="usmthTransform3dFromMatrix3dTimesTransform3d.htm">Transform3dFromMatrix3dTimesTransform3d</A>(rotMatrix, trnsToACS)

    trnsFromACS = <A href="usmthTransform3dInverse.htm">Transform3dInverse</A>(trnsToACS)
End Sub
'
'  Get the transforms and apply them to user input points
'
Sub TestTransforms()
    Dim pntTemp As Point3d
    Dim msg As <A href="usobjCadInputMessage.htm">CadInputMessage</A>
    Dim trnsToACS As Transform3d, trnsFromACS As Transform3d

    If ACSManager.<A href="usproACSType.htm">ACSType</A> &lt;&gt; msdACSTypeRectangular Then
        Debug.Print "The acstype is " & ACSManager.ACSType
        Exit Sub
    End If

    GetACSTransforms trnsToACS, trnsFromACS

    Do While True
        Set msg = <A href="usproCadInputQueue.htm">CadInputQueue</A>.<A href="usmthGetInput.htm">GetInput</A>(msdCadInputTypeDataPoint, msdCadInputTypeReset)
        If msg.<A href="usproInputType.htm">InputType</A> = msdCadInputTypeReset Then Exit Sub

        CadInputQueue.<A href="usmthSendLastInput.htm">SendLastInput</A>
        pntTemp = msg.<A href="usproPoint.htm">Point</A>
        Debug.Print "The input point is " & Point3dToString(pntTemp)

        '  Shift by subtracting and then multiply to rotate
        pntTemp = <A href="usmthPoint3dFromTransform3dTimesPoint3d.htm">Point3dFromTransform3dTimesPoint3d</A>(trnsToACS, pntTemp)
        Debug.Print "Translated to ACS" & Point3dToString(pntTemp)

        ' The original point is
        pntTemp = Point3dFromTransform3dTimesPoint3d(trnsFromACS, pntTemp)
        Debug.Print "Translated back " & Point3dToString(pntTemp)
    Loop
End Sub
'
'  Utility method
'
Function Point3dToString(pnt As Point3d) As String
    With pnt
        Point3dToString = "(" & .X & ", " & .Y & ", " & .Z & ")"
    End With
End Function




</CODE></PRE>
