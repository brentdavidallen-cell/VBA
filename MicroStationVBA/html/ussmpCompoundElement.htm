<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Compound Element Example</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>Compound Element Example</H1>

<P class=T>
This example illustrates techniques for creating compound elements. It creates
            <A href="usobjLineElement.htm">LineElement</A>, <A href="usobjComplexShapeElement.htm">ComplexShapeElement</A>, and <A href="usobjComplexStringElement.htm">ComplexStringElement</A> elements using the methods
            <A href="usmthCreateLineElement1.htm">CreateLineElement1</A>, <A href="usmthCreateLineElement2.htm">CreateLineElement2</A>, <A href="usmthCreateComplexShapeElement1.htm">CreateComplexShapeElement1</A>, and <A href="usmthCreateComplexStringElement1.htm">CreateComplexStringElement1</A>.
            It displays the elements using the <A href="usmthRedraw.htm">Redraw</A> method, and adds the elements to the current model using
            <A href="usmthAddElement.htm">AddElement</A>.  Finally, it invokes <A href="usmthStartDefaultCommand.htm">StartDefaultCommand</A> to set MicroStation to a common state.
</P>
<PRE class=CT><CODE>
Sub CompoundElementTest()

    Dim startPoint1 As <A href="usudtPoint3d.htm">Point3d</A>
    Dim endPoint1 As Point3d
    Dim startPoint2 As Point3d
    Dim endPoint2 As Point3d
    Dim startPoints(1) As Point3d
    Dim oStringElements(1) As <A href="usobjChainableElement.htm">ChainableElement</A>
    Dim oLine As LineElement

    <A href="usproCadInputQueue.htm">CadInputQueue</A>.<A href="usmthSendCommand.htm">SendCommand</A> "mark"

    startPoint1 = <A href="usmthPoint3dFromXYZ.htm">Point3dFromXYZ</A>(0, 0, 0)
    endPoint1 = Point3dFromXYZ(200, 200, 0)
    startPoint2 = Point3dFromXYZ(100, 0, 0)
    endPoint2 = Point3dFromXYZ(400, 100, 0)

    startPoints(0) = startPoint1
    startPoints(1) = endPoint1

    Set oLine = CreateLineElement1(Nothing, startPoints)
    Set oStringElements(0) = oLine

    Set oLine = CreateLineElement2(Nothing, startPoint2, endPoint2)
    Set oStringElements(1) = oLine

    Dim oComplexShape As ComplexShapeElement
    Dim oComplexString As ComplexStringElement

    Set oComplexShape = CreateComplexShapeElement1(oStringElements, msdFillModeFilled)
    Set oComplexString = CreateComplexStringElement1(oStringElements)

    oComplexShape.<A href="usmthMove.htm">Move</A> endPoint2

    oComplexShape.Redraw
    oComplexString.Redraw msdDrawingModeNormal

    <A href="usproActiveModelReference.htm">ActiveModelReference</A>.AddElement oComplexShape
    ActiveModelReference.AddElement oComplexString

    <A href="usproCommandState.htm">CommandState</A>.StartDefaultCommand

End Sub

</CODE></PRE>
