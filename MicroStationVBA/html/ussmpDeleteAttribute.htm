<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Deleting User Attributes Example</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>Deleting User Attributes Example</H1>

<P class=T>
This example illustrates how to delete a user attribute from an element.
</P>
<P class=T>
This example uses <A href="usmthGetUserAttributeData.htm">GetUserAttributeData</A>, <A href="usmthAddUserAttributeData.htm">AddUserAttributeData</A>, <A href="usmthCopyByteArray.htm">CopyByteArray</A>, and <A href="usmthCopyInteger.htm">CopyInteger</A>.
            AddByteArrayLinkage adds user attribute data to an element.  GetByteArrayLinkage retrieves user
            attribute data from an element.  Both of these methods use <A href="usobjDataBlock.htm">DataBlock</A> objects to exchange
            data with a macro. In this example, the macro uses <B>CopyInteger</B> and <B>CopyByteArray</B> to transfer
            data to and from the <B>DataBlock</B>.
</P>
<PRE class=CT><CODE>
'  Do not use 22352 or 22353 as your attribute ID.  You must obtain a
'  unique attribute ID from Bentley Systems.
Const ID22352 As Long = 22352
Const ID22353 As Long = 22353

'  Creates the element that will get the user attributes
Function CreateLine() As <A href="usobjElement.htm">Element</A>
    Set CreateLine = <A href="usmthCreateLineElement2.htm">CreateLineElement2</A>(Nothing, <A href="usmthPoint3dFromXY.htm">Point3dFromXY</A>(-25, 0), Point3dFromXY(-25, 100))
    CreateLine.<A href="usmthRedraw.htm">Redraw</A> msdDrawingModeNormal
    <A href="usproActiveModelReference.htm">ActiveModelReference</A>.<A href="usmthAddElement.htm">AddElement</A> CreateLine
End Function

'  This subroutine assumes that each data block
'  has a string at the beginning of the block
Sub PrintAttributes(dblks() As DataBlock)
    Dim index As Integer
    Dim str As String

    For index = LBound(dblks) To UBound(dblks)
        dblks(index).<A href="usmthOffset.htm">Offset</A> = 0
        dblks(index).<A href="usmthCopyString.htm">CopyString</A> str, False
        Debug.Print str
    Next
End Sub

'  Adds a String attribute to an element
Sub AddStringAttribute(ele As Element, <A href="usproID.htm">ID</A> As Long, str As String)
    Dim dblk As New DataBlock

    dblk.CopyString str, True
    ele.AddUserAttributeData ID, dblk
    ele.<A href="usmthRewrite.htm">Rewrite</A>
End Sub


Sub AttributesExample()
    Dim dblk As DataBlock
    Dim ele As Element

    Set dblk = New DataBlock
    Set ele = CreateLine

    AddStringAttribute ele, ID22352, "Linkage # 0 for ID 22352"
    AddStringAttribute ele, ID22353, "Linkage # 0 for ID 22353"
    AddStringAttribute ele, ID22352, "Linkage # 1 for ID 22352"
    AddStringAttribute ele, ID22353, "Linkage # 1 for ID 22353"
    AddStringAttribute ele, ID22352, "Linkage # 2 for ID 22352"
    AddStringAttribute ele, ID22353, "Linkage # 2 for ID 22353"
    AddStringAttribute ele, ID22352, "Linkage # 3 for ID 22352"
    AddStringAttribute ele, ID22353, "Linkage # 3 for ID 22353"

    ' Now get all of the linkages for ID22352
    PrintAttributes ele.GetUserAttributeData(ID22352)

    '  Delete the final attribute
    ele.<A href="usmthDeleteUserAttributeData.htm">DeleteUserAttributeData</A> ID22352, 3
    ele.Rewrite
    PrintAttributes ele.GetUserAttributeData(ID22352)

    '  Delete the first attribute
    ele.DeleteUserAttributeData ID22352, 0
    ele.Rewrite
    PrintAttributes ele.GetUserAttributeData(ID22352)

    ' Now show that the linkages for ID22353
    PrintAttributes ele.GetUserAttributeData(ID22353)

    ActiveModelReference.<A href="usmthRemoveElement.htm">RemoveElement</A> ele
End Sub

</CODE></PRE>
