<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Saving a String as a Byte Array</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>Saving a String as a Byte Array</H1>

<P class=T>
This example illustrates how to save data to an element's attributes,
            and how to retrieve data from an element's attributes. This example saves a string as a byte array.
            It is possible to transfer a string using <A href="usmthCopyString.htm">CopyString</A>, but a string
            can be stored more compactly as a byte array.  This technique is only useful when all
            of the character codes are guaranteed to be in the range 0 to 255.
</P>
<P class=T>
This example uses <A href="usmthGetUserAttributeData.htm">GetUserAttributeData</A>, <A href="usmthAddUserAttributeData.htm">AddUserAttributeData</A>, <A href="usmthCopyByteArray.htm">CopyByteArray</A>, and
            <A href="usmthCopyInteger.htm">CopyInteger</A>.  AddByteArrayLinkage adds user attribute data to an element.  GetByteArrayLinkage
            retrieves user attribute data from an element.  Both of these methods use <A href="usobjDataBlock.htm">DataBlock</A> objects to exchange
            data with a macro. In this example, the macro uses CopyInteger and CopyByteArray to transfer
            data to and from the DataBlock.
</P>
<PRE class=CT><CODE>
'  Do not use 22352 as your attribute ID.  You must obtain a
'  unique attribute ID from Bentley Systems.
Private Const attrId As Long = 22352
'  This creates a linkage that has 2 bytes that contain a count of
'  bytes to follow, followed by the bytes from the string
Sub AddByteArrayLinkage()
    Dim ele As <A href="usobjElement.htm">Element</A>
    Dim id As <A href="usudtDLong.htm">DLong</A>
    Dim dblk As New DataBlock
    Dim str As String
    Dim index As Integer
    Dim length As Integer

    str = "AddByteArrayLinkage Test String"
    length = Len(str)

    '  Copy the count of bytes to the data block
    dblk.CopyInteger length, True

    ' Set the array to the correct size and copy the
    ' string to the array.
    ReDim attrBytes(1 To length) As Byte
    For index = 1 To Len(str)
        attrBytes(index) = AscB(Mid(str, index, 1))
    Next index

    ' Copy the array to the data block.  CopyByteArray copies
    ' all of the bytes in the array.
    dblk.CopyByteArray attrBytes, True

    '  Now save the data block as the element's attribute
    '  data to the element and write the element back
    '  to the design file.
    id = <A href="usmthDLongFromLong.htm">DLongFromLong</A>(50299)
    Set ele = <A href="usproActiveModelReference.htm">ActiveModelReference</A>.<A href="usmthGetElementByID.htm">GetElementByID</A>(id)
    ele.AddUserAttributeData attrId, dblk
    ele.<A href="usmthRewrite.htm">Rewrite</A>
End Sub

'  This retrieves a linkage that has 2 bytes that contain a count of
'  bytes to follow, followed by the bytes from the string
Sub GetByteArrayLinkage()
    Dim ele As Element
    Dim id As DLong
    Dim dblks() As DataBlock
    Dim dblk As DataBlock
    Dim str As String
    Dim index As Integer
    Dim length As Integer

    ' Get the element
    id = DLongFromLong(50299)
    Set ele = ActiveModelReference.GetElementByID(id)

    ' Get an array of data blocks
    dblks = ele.GetUserAttributeData(attrId)
    Set dblk = dblks(0)

    ' Extract the length of the string
    dblk.CopyInteger length, False

    '  Make the string and the array the proper length
    str = Space(length)
    ReDim attrBytes(1 To length) As Byte

    '  Now fill the array with the data from the data block
    dblk.CopyByteArray attrBytes, False

    '  Transfer the data from the array to the string.
    For index = 1 To 31
        Mid(str, index, 1) = Chr(attrBytes(index))
    Next index

    Debug.Print str
End Sub

</CODE></PRE>
