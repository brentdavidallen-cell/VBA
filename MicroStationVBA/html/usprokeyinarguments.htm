<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>KeyinArguments Property</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">


<H1 class=RH1><A NAME="usprokeyinarguments"></A>KeyinArguments Property</H1>

<P class=ALNSR>
<OBJECT ID="hhobj_7607" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
        <param name="Command" value="ALink">
        <param name="Font" value="Verdana,8,1">
        <param name="Text" value="Text:See Also">
        <param name="Flags" value=",,1">
        <param name="Item1" value="">
        <param name="Item2" value="usproKeyinArgumentsC">
</OBJECT>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<OBJECT ID="hhobj_7608" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
        <param name="Command" value="ALink">
        <param name="Font" value="Verdana,8,1">
        <param name="Text" value="Text:Example">
        <param name="Flags" value=",,1">
        <param name="Item1" value="">
        <param name="Item2" value="usproKeyinArgumentsX">
</OBJECT>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<OBJECT ID="hhobj_7609" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
        <param name="Command" value="ALink">
        <param name="Font" value="Verdana,8,1">
        <param name="Text" value="Text:Applies To">
        <param name="Flags" value=",,1">
        <param name="Item1" value="">
        <param name="Item2" value="usproKeyinArgumentsA">
</OBJECT>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<OBJECT ID="hhobj_7610" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
        <param name="Command" value="ALink">
        <param name="Font" value="Verdana,8,1">
        <param name="Text" value="Text:Specifics">
        <param name="Flags" value=",,1">
        <param name="Item1" value="">
        <param name="Item2" value="usproKeyinArgumentsS">
</OBJECT>
</P>

<P class=T> Read/Write <B>String</B>.
<P class=T>
Gets or sets a value representing the list of arguments given in the most recent "vba run" keyin command.
</P>
<P class=RL><B>Syntax</B></P>
<P><I>object</I>.<B>KeyinArguments</B> [= <I>String</I>]
<P class=T>The <B>KeyinArguments</B> property syntax has these parts:</P>
<TABLE cellpadding=4 cellspacing=4 cols=3>
<TR VALIGN="top">
<TH width=17%>Part</TH>
<TH width=79%>Description</TH>
</TR>
<TR VALIGN="top">
<TD class=TT width=17%><I>object</I></TD>
<TD class=TT width=79%%>A valid object.</TD>
</TR>
<TR VALIGN="top">
<TD class=TT width=17%><I>String</I></TD>
<TD class=TT width=79%>
A <B>String</B> expression. 
</TR>
</TABLE><BR>
<P class=RL><B>Remarks</B></P>

<P>
Any VBA macro can be invoked from MicroStation's keyin facility, using the command:
    <PRE><CODE>    vba run <I>macroName arguments...</I></CODE></PRE>
    <P>The macro name can optionally include a project name (enclosed in square brackets) and/or a module name
    (separated from the macro name by a period).</P>
    <P>For example, suppose you've written a VBA macro named AnnotateLevel,
    within a VBA module named LevelOperations, within a VBA project named Maintenance.
    A user could invoke your macro by issuing any of the following keyin commands:</P>
    <PRE><CODE>    vba run annotatelevel
    vba run leveloperations.annotatelevel
    vba run [maintenance]annotatelevel
    vba run [maintenance]leveloperations.annotatelevel</CODE></PRE>
    <P>Now further suppose that, when a user invokes AnnotateLevel from a keyin command, you want that user to be able to specify
    the name of the level to be processed. For example:</P>
    <PRE><CODE>    vba run annotatelevel carpentry</CODE></PRE>
    <P>However, VBA macros do not take arguments. The definition of a VBA macro is a Public Sub having no arguments:</P>
    <PRE><CODE>    Public Sub AnnotateLevel()
        :
    End Sub</CODE></PRE>
    <P>That's where <B>KeyinArguments</B> comes into play. Its value is the list of arguments given
    in the most recent "vba run" keyin command.</P>
    <P>So, if a user issues the keyin command:</P>
    <PRE><CODE>    vba run annotatelevel carpentry</CODE></PRE>
    <P>You can use <B>KeyinArguments</B> to get the argument within your macro:</P>
    <PRE><CODE>    Public Sub AnnotateLevel()

        Dim sLevelName As String
        sLevelName = KeyinArguments ' In this example, "carpentry".

        :

    End Sub
    </CODE></PRE>
    <P>In the preceding example, the keyin arguments comprised only a single word (carpentry). If the keyin arguments
    comprise multiple words, you can use VBA's <B>Split</B> function to parse <B>KeyinArguments</B> into an array of strings,
    each containing one word:</P>
    <PRE><CODE>    Dim asArguments() As String
    asArguments = Split(KeyinArguments)
    ' Now each item in asArguments corresponds to one word in KeyinArguments.
    </CODE></PRE>
    <P><B>KeyinArguments</B> is a read/write property. It's writeable so that you can, within VBA code, set its value before calling a macro.
    This allows you to programmatically simulate calling a macro from a keyin, including the arguments.</P>
    <P>(Incidentally, you cannot invoke a VBA macro by sending a "vba run" command to <A href="usproCadInputQueue.htm">CadInputQueue</A>.<A href="usmthSendCommand.htm">SendCommand</A>.
    Since only one statement of VBA code can execute at a time, the call to <B>CadInputQueue</B>.<B>SendCommand</B> will suspend VBA's execution until
    that call returns.)</P>
</P>
<P class=RL><B>Version</B></P>
<P>
08.00.00
</P>
</BODY>
</HTML>
