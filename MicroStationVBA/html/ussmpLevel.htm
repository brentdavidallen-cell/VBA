<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Moving Elements to a Different Level</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>Moving Elements to a Different Level</H1>

<P class=T>
This example illustrates techniques for accessing levels and for scanning the a model.
            FastChangeLevels and SlowChangeLevels are functionally equivalent, but
            FastChangeLevels is faster because it uses an <A href="usobjElementScanCriteria.htm">ElementScanCriteria</A>
            object to let the scanner filter out elements that are not on 'Level 3'.
</P>
<PRE class=CT><CODE>
Sub FastChangeLevel()
    Dim oLevel As <A href="usobjLevel.htm">Level</A>
    Dim count As Integer
    Set oLevel = <A href="usproActiveDesignFile.htm">ActiveDesignFile</A>.<A href="usproLevels.htm">Levels</A>("Level 3")

    Dim oScanCriteria As ElementScanCriteria
    Set oScanCriteria = New ElementScanCriteria

    '  By default, all levels are included.  To limit the
    '  search to one level, first exclude all levels and
    '  then include the desired level
    oScanCriteria.<A href="usmthExcludeAllLevels.htm">ExcludeAllLevels</A>
    oScanCriteria.<A href="usmthIncludeLevel.htm">IncludeLevel</A> oLevel

    '  Now that the ElementScanCriteria object has been set
    '  up, use it to scan.  The Scan method returns
    '  an ElementEnumerator object that can be used
    '  to step through the elements that satisfy the scan
    '  criteria.
    Dim oScanEnumerator As <A href="usobjElementEnumerator.htm">ElementEnumerator</A>
    Set oScanEnumerator = <A href="usproActiveModelReference.htm">ActiveModelReference</A>.<A href="usmthScan.htm">Scan</A>(oScanCriteria)

    Dim oElement As <A href="usobjElement.htm">Element</A>

    Set oLevel = ActiveDesignFile.Levels("Level 1")

    <A href="usproCadInputQueue.htm">CadInputQueue</A>.<A href="usmthSendCommand.htm">SendCommand</A> "Mark"
    <A href="usmthShowStatus.htm">ShowStatus</A> "Moving elements from 'Level 3' to 'Level 1'"

    '  Calling MoveNext the first time positions the enumerator
    '  to the first element.  Subsequent calls advance it by one.
    '  MoveNext returns False when it advances beyond the last
    '  element.
    Do While oScanEnumerator.<A href="usmthMoveNext.htm">MoveNext</A>
        Set oElement = oScanEnumerator.<A href="usproCurrent.htm">Current</A>

    '  Move the element to "Level 1" and rewrite the element.
        Set oElement.<A href="usproLevel.htm">Level</A> = oLevel
        oElement.<A href="usmthRewrite.htm">Rewrite</A>
        count = count + 1
    Loop

    <A href="usproCommandState.htm">CommandState</A>.<A href="usmthStartDefaultCommand.htm">StartDefaultCommand</A>
    ShowStatus "Moved " & count & " elements to 'Level 1'"
End Sub

Sub SlowChangeLevel()

    Dim oLevel1 As Level
    Dim oLevel3 As Level
    Dim oScanEnumerator As ElementEnumerator
    Dim oElement As Element
    Dim count As Integer

    CadInputQueue.SendCommand "Mark"
    Set oLevel1 = ActiveDesignFile.Levels("Level 1")
    Set oLevel3 = ActiveDesignFile.Levels("Level 3")

    '  Invoking Scan&lt; without a scan criteria causes
    '  Scan to return an ElementEnumerator object
    '  that returns all of the graphical elements.

    Set oScanEnumerator = ActiveModelReference.Scan

    ShowStatus "Moving elements from 'Level 3' to 'Level 4'"
    Do While oScanEnumerator.MoveNext
        Set oElement = oScanEnumerator.Current
        If oElement.Level Is oLevel3 Then
            Set oElement.Level = oLevel1
            oElement.Rewrite
            count = count + 1
        End If
    Loop

    CommandState.StartDefaultCommand
    ShowStatus "Moved " & count & " elements to 'Level 1'."
End Sub

</CODE></PRE>
