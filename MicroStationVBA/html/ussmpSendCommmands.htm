<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Starting a Command and Modifying the Element it Places</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>Starting a Command and Modifying the Element it Places</H1>

<P class=T>
This example shows how a procedure can start a MicroStation command that creates an element, and then
            modify the element that the command creates.
</P>
<P class=T>
The example consists of procedures for a form that has 2 command buttons: cmdComplexShape and
            cmdPlaceLine.
</P>
<PRE class=CT><CODE>
Private bRestarting As Boolean
Private bProcessingCommand As Boolean

Sub DoCommand(strCommand As String)
    Me.<A href="usproCaption.htm">Caption</A> = strCommand
    
    '  If there is already a call to GetInput, then another call
    '  to GetInput will fail.  If a previous call to this procedure is
    '  already waiting on a call to GetInput, then DoCommand just
    '  starts the new command and exits.
    If bProcessingCommand Then
        bRestarting = True
        <A href="usproCadInputQueue.htm">CadInputQueue</A>.<A href="usmthSendCommand.htm">SendCommand</A> strCommand, True
        Exit Sub
    End If
    
    bProcessingCommand = True
    With CadInputQueue
        Dim lastID As <A href="usudtDLong.htm">DLong</A>
        Dim cim As <A href="usobjCadInputMessage.htm">CadInputMessage</A>
        
        lastID = <A href="usproActiveModelReference.htm">ActiveModelReference</A>.<A href="usmthGetLastValidGraphicalElement.htm">GetLastValidGraphicalElement</A>.<A href="usproID.htm">ID</A>
        
        .SendCommand strCommand, True
        
        Do While True
            Dim eleLast As <A href="usobjElement.htm">Element</A>
            
            Set cim = CadInputQueue.<A href="usmthGetInput.htm">GetInput</A>
            
            ' For commands, SendLastInput is equivalent to
            '
            '      CadInputQueue.SendCommand cim.CommandKeyin, False
            '
            ' This example uses
            '
            '      CadInputQueue.SendCommand cim.CommandKeyin, True
            '
            ' to force MicroStation to select the proper icon in the
            ' tool palette
            '
            If cim.<A href="usproInputType.htm">InputType</A> = msdCadInputTypeCommand Then
                CadInputQueue.SendCommand cim.<A href="usproCommandKeyin.htm">CommandKeyin</A>, True
            Else
                .<A href="usmthSendLastInput.htm">SendLastInput</A>
            End If
            
            '  Compare element ID's to see if a new element has been added.  This
            '  approach only works for commands that create new elements.  To catch
            '  rewrites from commands that modify elements, use
            '  IChangeTrackEventsHandler.
            '
            Set eleLast = ActiveModelReference.GetLastValidGraphicalElement
            If <A href="usmthDLongComp.htm">DLongComp</A>(eleLast.ID, lastID) &lt;&gt; 0 Then
                '  Process the element
                eleLast.<A href="usproColor.htm">Color</A> = 3
                eleLast.<A href="usmthRewrite.htm">Rewrite</A>
                eleLast.<A href="usmthRedraw.htm">Redraw</A>
            End If
            
            If bRestarting Then
                bRestarting = False
            Else
                '  GetInput does not return viewing commands and settings
                '  commands, so this only exits on primitive commands
                If cim.InputType = msdCadInputTypeCommand Then Exit Do
            End If
        Loop
    End With
    
    bProcessingCommand = False
    On Error Resume Next
    Me.Caption = "No command"
End Sub
Private Sub cmdComplexShape_Click()
    DoCommand "Create Shape Icon"
End Sub
Private Sub cmdLine_Click()
    DoCommand "Place Smart Line"
End Sub
Private Sub UserForm_Initialize()
    Me.Caption = "No command"
End Sub

Private Sub UserForm_Terminate()
    CadInputQueue.SendCommand "choose element", True
End Sub

</CODE></PRE>
