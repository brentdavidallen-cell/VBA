<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Creating Named Groups from Graphic Groups</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>Creating Named Groups from Graphic Groups</H1>

<P class=T>
This example shows how a program can find all of the elements that belong to graphic groups and add them to named groups.
</P>
<PRE class=CT><CODE>
Function <A href="usmthGetNamedGroup.htm">GetNamedGroup</A>(GraphicGroupNumber As Long, ModelRef As <A href="usobjModelReference.htm">ModelReference</A>) As <A href="usobjNamedGroupElement.htm">NamedGroupElement</A>
    Dim strGG As String

    On Error Resume Next

    '  If the named group already exists, then return the NamedGroupElement.
    '  Otherwise, create the named group.
    strGG = "GraphicGroup__" & GraphicGroupNumber
    Set GetNamedGroup = ModelRef.GetNamedGroup(strGG)
    If GetNamedGroup Is Nothing Then
       Set GetNamedGroup = ModelRef.<A href="usmthAddNewNamedGroup.htm">AddNewNamedGroup</A>(strGG, "Created by VBA " & Now)
    End If
End Function
Sub CreateNamedGroups()
    Dim ee As <A href="usobjElementEnumerator.htm">ElementEnumerator</A>
    Dim ng As NamedGroupElement

    Set ee = <A href="usproActiveModelReference.htm">ActiveModelReference</A>.<A href="usproGraphicalElementCache.htm">GraphicalElementCache</A>.<A href="usmthScan.htm">Scan</A>
    Do While ee.<A href="usmthMoveNext.htm">MoveNext</A>
        If ee.<A href="usproCurrent.htm">Current</A>.<A href="usproGraphicGroup.htm">GraphicGroup</A> &gt; 0 Then
            Set ng = GetNamedGroup(ee.Current.GraphicGroup, ActiveModelReference)
            ng.<A href="usmthAddMember.htm">AddMember</A> ee.Current
            ng.<A href="usmthRewrite.htm">Rewrite</A>
        End If
    Loop
End Sub

</CODE></PRE>
