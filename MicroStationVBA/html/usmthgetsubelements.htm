<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>GetSubElements Method</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">


<H1 class=RH1><A NAME="usmthgetsubelements"></A>GetSubElements Method</H1>

<P class=ALNSR>
<OBJECT ID="hhobj_3083" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
        <param name="Command" value="ALink">
        <param name="Font" value="Verdana,8,1">
        <param name="Text" value="Text:See Also">
        <param name="Flags" value=",,1">
        <param name="Item1" value="">
        <param name="Item2" value="usmthGetSubElementsC">
</OBJECT>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<OBJECT ID="hhobj_3084" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
        <param name="Command" value="ALink">
        <param name="Font" value="Verdana,8,1">
        <param name="Text" value="Text:Example">
        <param name="Flags" value=",,1">
        <param name="Item1" value="">
        <param name="Item2" value="usmthGetSubElementsX">
</OBJECT>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<OBJECT ID="hhobj_3085" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
        <param name="Command" value="ALink">
        <param name="Font" value="Verdana,8,1">
        <param name="Text" value="Text:Applies To">
        <param name="Flags" value=",,1">
        <param name="Item1" value="">
        <param name="Item2" value="usmthGetSubElementsA">
</OBJECT>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<OBJECT ID="hhobj_3086" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
        <param name="Command" value="ALink">
        <param name="Font" value="Verdana,8,1">
        <param name="Text" value="Text:Specifics">
        <param name="Flags" value=",,1">
        <param name="Item1" value="">
        <param name="Item2" value="usmthGetSubElementsS">
</OBJECT>
</P>

<P class=T>
Constructs and returns a list of the sub-elements associated with this object.
</P>
<P class=RL><B>Syntax</B></P>
<P class=SYN><B>Set</B> <I><A href="usobjElementEnumerator.htm">ElementEnumerator</A></I> = <I>object</I>.<B>GetSubElements</B> 
<P class=T>The <B>GetSubElements</B> method syntax has these parts:</P>
<TABLE cellpadding=4 cellspacing=4 cols=3>
<TR VALIGN="top">
<TH width=17%>Part</TH>
<TH width=79%>Description</TH>
</TR>
<TR VALIGN="top">
<TD class=TT width=17%><I>object</I></TD>
<TD class=TT width=79%%>A valid object.</TD>
</TR>
</TABLE><BR>
<P class=RL><B>Remarks</B></P>

<P>
When a program uses the <A href="usproCurrent.htm">Current</A> property of an <B>ElementEnumerator</B> that <B>GetSubElements</B> returned,
    it gets a copy of the element.  Changes to this element do not affect the contents of the <B>ElementEnumerator</B> or
    the contents of the <A href="usobjComplexElement.htm">ComplexElement</A>.  If the program changes this copy and saves it to the <B>DesigFile</B>, the next
    time the program accesses the element from the <A href="usobjDesignFile.htm">DesignFile</A> the <B>ComplexElement</B> will have the changed components.
</P>
<P>
It is possible to directly modify the contents of a <A href="usobjCellElement.htm">CellElement</A> using
    <A href="usmthMoveToNextElement.htm">MoveToNextElement</A> to navigate around the components of the cell, <A href="usmthCopyCurrentElement.htm">CopyCurrentElement</A> to get a copy of the element,
    and <A href="usmthReplaceCurrentElement.htm">ReplaceCurrentElement</A> to put it back.
</P>
<P>
The following example illustrates the relationship of the element that <B>Current</B> returns and contents of the
    <B>ComplexElement</B>.
<code><pre>Sub PrintInfo(eleComponent As Element)
    With eleComponent
        Debug.Print "Element " & DLongToString(.ID) & " color: " & .Color
    End With
End Sub


'
'   This example reloads the ComplexElement from the design file so it has a copy
'   of the element that has the changes that were written to the file.
'
Sub SubElements1(eleComplex As ComplexElement)
    Dim eleComponent As Element
    Dim ee As ElementEnumerator
    Dim originalColor As Integer

    '
    ' Get the sub elements and then get the first element
    '
    Set ee = eleComplex.GetSubElements
    ee.MoveNext
    Set eleComponent = ee.Current

    '
    '   Get the color
    '
    originalColor = eleComponent.Color
    Debug.Print "The original color is " & originalColor

    '
    '   Change the color and save the changed element to the design file.
    '
    eleComponent.Color = originalColor + 1
    eleComponent.Rewrite

    Dim ele As Element
    Dim oModelReference As ModelReference

    '
    '   Now use the element's ModelReference and element ID to reload
    '   the ComplexElement from the design file. The first step
    '   assigns the ComplexElement to a variable of type Element so the program
    '   can use Element's methods.  After setting ele to eleComplex, ele and
    '   eleComplex refer to the same object but these variables provide access to
    '   different methods and properties.
    '
    Set ele = eleComplex
    Set oModelReference = ele.ModelReference
    Set eleComplex = oModelReference.GetElementByID(ele.ID)

    '
    '   Get a new enumerator.  Since the program read the changes from the
    '   DesignFile, the complex element now contains the changed component.
    '
    Set ee = eleComplex.GetSubElements
    ee.MoveNext
    Set eleComponent = ee.Current

    '
    '   Now it prints the updated color
    '
    PrintInfo eleComponent
End Sub

'
'   This example does not reload the ComplexElement.  It illustrates a number of
'   common coding errors.
'
Sub SubElements2(eleComplex As ComplexElement)
    Dim eleComponent As Element
    Dim ee As ElementEnumerator
    Dim originalColor As Integer

    '
    ' Get the sub elements and then get the first element
    '
    Set ee = eleComplex.GetSubElements
    ee.MoveNext
    Set eleComponent = ee.Current

    '
    '   Get the color
    '
    originalColor = eleComponent.Color
    Debug.Print "The original color is " & originalColor

    '
    '  Change the color.
    '
    eleComponent.Color = originalColor + 1

    '
    '   Reset the enumerator and get the element again.  The element that the
    '   enumerator returns this time does not have the color changed.
    '
    ee.Reset
    ee.MoveNext
    Set eleComponent = ee.Current
    PrintInfo eleComponent

    '
    '   Get a new enumerator from the ComplexElement and get the element again.
    '   Once again, the element that the enumerator returns does not
    '   have the color changed.
    '
    Set ee = eleComplex.GetSubElements
    ee.MoveNext
    Set eleComponent = ee.Current
    PrintInfo eleComponent

    '
    '   Change the color again and save the changed element to the design file.
    '
    eleComponent.Color = originalColor + 1
    eleComponent.Rewrite

    '
    '   Get a new enumerator from the ComplexElement and get the element again.
    '   Once again, the element that the enumerator returns does not
    '   have the color changed. The in-memory ComplexElement element reflects
    '   what was in the design file prior to when the component was written.
    '
    Set ee = eleComplex.GetSubElements
    ee.MoveNext
    Set eleComponent = ee.Current
    PrintInfo eleComponent
    End Sub
    </pre></code>
</P>
<P class=RL><B>Version</B></P>
<P>
08.00.00
</P>
</BODY>
</HTML>
