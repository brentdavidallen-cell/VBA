<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>HitPoint, LocateElement, and GetLocatedElement</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>HitPoint, LocateElement, and GetLocatedElement</H1>

<P class=T>
The DataPoint event handler in this example prints information on all of the elements that can be located using
        the data point that is passed into it.  For each element, it displays the type of the outer most element and a point on the element.
        If the located element is a complex header, it also displays the type of the located component.
</P>
<PRE class=CT><CODE>
Implements <A href="usobjIPrimitiveCommandEvents.htm">IPrimitiveCommandEvents</A>

Private Sub IPrimitiveCommandEvents_<A href="usevtDataPoint.htm">DataPoint</A>(<A href="usproPoint.htm">Point</A> As <A href="usudtPoint3d.htm">Point3d</A>, ByVal <A href="usproView.htm">View</A> As <A href="usobjView.htm">View</A>)
    Dim ele As <A href="usobjElement.htm">Element</A>
    Dim eleComponent As Element
    Dim hitPoint As Point3d

    '
    '   Passing True for the final argument tells LocateElement to calculate the
    '   list of hits and to return the first element in the list.  CommandState
    '   retains this list.  Use LocateElement with False for the final argument
    '   to step through the list.
    '
    Set ele = <A href="usproCommandState.htm">CommandState</A>.<A href="usmthLocateElement.htm">LocateElement</A>(Point, View, True)
    Debug.Print "Input Point: " & Point3dToString(Point)

    Do While Not ele Is Nothing
        Debug.Print "  Element type: " & ele.<A href="usproType.htm">Type</A>
        '
        '   LocateElement always projects the point onto the element.
        '   CommandState.GetHitPoint returns the projected point
        '
        hitPoint = CommandState.<A href="usmthGetHitPoint.htm">GetHitPoint</A>
        Debug.Print "    Point on Element " & Point3dToString(hitPoint)

        '
        '   LocateElement returns the outer most element. If the element is in a cell,
        '   then LocateElement returns the cell header.  A program can use
        '   GetLocatedElement to find the component that LocateElement found.
        '
        If ele.<A href="usproIsComplexElement.htm">IsComplexElement</A> Then
            Set eleComponent = CommandState.<A href="usmthGetLocatedElement.htm">GetLocatedElement</A>(False)
            Debug.Print "    Component type: " & eleComponent.Type
        End If

        '
        '   Get the next element in the list.
        '
        Set ele = CommandState.LocateElement(Point, View, False)
    Loop

End Sub
Private Sub IPrimitiveCommandEvents_<A href="usevtStart.htm">Start</A>()
    CommandState.<A href="usmthSetLocateCursor.htm">SetLocateCursor</A>
End Sub
Function Point3dToString(pnt As Point3d) As String
    Point3dToString = "(" & pnt.X & ", " & pnt.Y & ", " & pnt.Z & ")"
End Function

'
''  The remaining methods of IPrimitiveCommandEvents were omitted because they are
''  not used in this example.
'
</CODE></PRE>
