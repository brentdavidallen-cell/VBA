<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Vertex List Example</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>Vertex List Example</H1>

<P class=T>
This example illustrates some of the methods of the <A href="usobjVertexList.htm">VertexList</A> interface. The example is
            a simple primitive command that implements event handlers for start, data point, and reset.  Because the other event
            handlers of <A href="usobjIPrimitiveCommandEvents.htm">IPrimitiveCommandEvents</A> do nothing in this example, they have been omitted.
</P>
<P class=T>
Most of the logic for this example is in the data point event handler.  It tests to determine
            if it has a saved reference to an element.  If not, it tries to locate an element using
            <A href="usmthLocateElement.htm">LocateElement</A>. If it successfully finds an element that supports
            the <B>VertexList</B> interface, it retrieves the list of vertices using <A href="usmthGetVertices.htm">GetVertices</A>.
            It prints the vertex list, and saves the reference to the object.  On subsequent data points, it detects that it
            already has an element.  It uses <A href="usmthGetClosestSegment.htm">GetClosestSegment</A> to get the index of the
            first vertex of the segment closest to the data point.  Using that information, it prints the range of the closest segment.
</P>
<P class=T>
The reset event handler in this example just restarts the command.  It invokes
            <A href="usobjCommandState.htm">CommandState</A>.<A href="usmthStartPrimitive.htm">StartPrimitive</A>.  <B>StartPrimitive</B>
            first resets MicroStation's command state.  Next it invokes the command's start event handler.
</P>
<P class=T>
The start event handler displays a prompt and command name. Then it turns on the locate cursor by
            calling <A href="usmthSetLocateCursor.htm">SetLocateCursor</A>.  Next it uses <A href="usmthCreateLocateCriteria.htm">CreateLocateCriteria</A> and <A href="usmthSetLocateCriteria.htm">SetLocateCriteria</A> to set MicroStation's locate criteria
            so that the locate logic will find locked elements and elements from reference files.
</P>
<P class=T>
The start event handler has to do these things every time the command is restarted because MicroStation always resets the command
            state every time a new primitive or locate command is started.  MicroStation sets the command state back to the default and then
            calls the start event handler to give it a chance to establish the command state.
</P>
<PRE class=CT><CODE>
Implements IPrimitiveCommandEvents

Dim m_oVL As VertexList
Dim m_vertexList() As <A href="usudtPoint3d.htm">Point3d</A>

'  Utility function for formatting points
Function Point3dToString(thePoint As Point3d)
    With thePoint
        Point3dToString = "(" & .X & ", " & .Y & ", " & .Z & ")"
    End With
End Function

'  Data point event handler
Private Sub IPrimitiveCommandEvents_<A href="usevtDataPoint.htm">DataPoint</A>(<A href="usproPoint.htm">Point</A> As Point3d, ByVal <A href="usproView.htm">View</A> As <A href="usobjView.htm">View</A>)
    Dim oEle As <A href="usobjElement.htm">Element</A>
    Dim msg As String
    <A href="usmthShowStatus.htm">ShowStatus</A> ""
    On Error GoTo NoElement

    If m_oVL Is Nothing Then
        '  Try to locate an element.  If there is one within the
        '  range of the locate tolerance, see if the element
        '  has a vertex list.
        Set oEle = <A href="usproCommandState.htm">CommandState</A>.LocateElement(Point, View, True)
        If oEle.<A href="usproIsVertexList.htm">IsVertexList</A> Then
            With oEle.<A href="usproAsVertexList.htm">AsVertexList</A>
                Dim index As Integer
                Dim count As Long
                Set m_oVL = oEle
                count = m_oVL.<A href="usproVerticesCount.htm">VerticesCount</A>
                m_vertexList = m_oVL.GetVertices
                For index = 0 To count - 1
                    Dim currentPoint As Point3d
                    currentPoint = m_vertexList(index)
                    msg = "Vertex (" & index & "): "
                    msg = msg & Point3dToString(currentPoint)
                Debug.Print msg
                Next
            End With
            '  Subsequent data points will cause this method to
            '  find the closest segment of the element.
            <A href="usmthShowPrompt.htm">ShowPrompt</A> "Enter the test point"
            CommandState.<A href="usmthSetDefaultCursor.htm">SetDefaultCursor</A>
        End If
    Else
        Dim i As Long
        '   The range of the segment will be vertexList (i) to
        '   vertexList (i + 1)
        i = m_oVL.GetClosestSegment(Point)
        ' Initialize message with segment number
        msg = "The closest segment (" & i & ")is at "
        '  Add in the starting point
        msg = msg & Point3dToString(m_vertexList(i))
        '  Add in the ending point
        msg = msg & Point3dToString(m_vertexList(i + 1))
        '  Now display it
        Debug.Print msg
        '  MicroStation will activate the AccuDraw cursor, but
        '  it does not make sense in this context.
        CommandState.<A href="usproAccuDrawHints.htm">AccuDrawHints</A>.<A href="usmthDeactivate.htm">Deactivate</A>
    End If

    Exit Sub
NoElement:
    ShowStatus "Element not found"
End Sub

' Reset event handler
Private Sub IPrimitiveCommandEvents_<A href="usmthReset.htm">Reset</A>()
    '  Clean up MicroStation's state and call
    '  IPrimitiveCommandEvents_Start again.
    CommandState.StartPrimitive Me
End Sub

'  Start event handler
Private Sub IPrimitiveCommandEvents_<A href="usevtStart.htm">Start</A>()
    Dim oLocateCriteria As <A href="usobjLocateCriteria.htm">LocateCriteria</A>
    <A href="usmthShowCommand.htm">ShowCommand</A> "Finding closest segment"
    ShowPrompt "Select the element"
    CommandState.SetLocateCursor
    '  Set up the locate criteria to allow locked elements and
    '  reference files.  Specifying False as the argument to
    '  CreateLocateCriteria says that this program will not modify
    '  the elements and therefore can accept read-only elements
    '  such as locked elements and elements from reference files.
    Set oLocateCriteria = CommandState.CreateLocateCriteria(False)
    CommandState.SetLocateCriteria oLocateCriteria

    '  It will be Nothing the first time.  This is only necessary
    '  because the Reset handler IPrimitiveCommandEvents_Reset
    '  restarts the command
    Set m_oVL = Nothing
End Sub

</CODE></PRE>
<P class=T>
The following subroutine starts the command.
</P>
<PRE class=CT><CODE>
Sub FindClosestSegment()
    CommandState.StartPrimitive New clsClosestSegment
End Sub

</CODE></PRE>
