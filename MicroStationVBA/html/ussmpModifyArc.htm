<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Modify Arc Example</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>Modify Arc Example</H1>

<P class=T>
This example illustrates some of the methods of <A href="usobjArcElement.htm">ArcElement</A>.  It also illustrates how
            to implement a locate command by implementing a class that implements <A href="usobjIPrimitiveCommandEvents.htm">IPrimitiveCommandEvents</A>.
            The standard technique for implementing a locate command is to implement a class that
            implements <A href="usobjILocateCommandEvents.htm">ILocateCommandEvents</A>. However, occasionally it is necessary to implement a locate
            command that behaves differently than standard locate commands.  In such cases, implement the
            locate command using the <B>IPrimitiveCommandEvents</B> interface.
</P>
<P class=T>
This example uses the <A href="usobjCommandState.htm">CommandState</A>.<A href="usmthLocateElement.htm">LocateElement</A> method to find an element given a point.
            It uses <B>CommandState</B>.<A href="usmthSetLocateCursor.htm">SetLocateCursor</A> to switch the cursor to a locate cursor, i.e., the cursor with the
            circle. When a command is implemented using <B>ILocateCommandEvents</B>, <A href="usmthStartLocate.htm">StartLocate</A> switches to the locate cursor.
            If a locate command uses <A href="usmthStartPrimitive.htm">StartPrimitive</A> then it must explicitly set the locate cursor.
</P>
<P class=T>
The first code fragment  goes in a code module. It starts the execution of the command.
            The command is implemented in a class called ModifyArcPrimitive.
</P>
<PRE class=CT><CODE>
Sub RunModifyArcPrimitive()
    <A href="usproCommandState.htm">CommandState</A>.StartPrimitive New ModifyArcPrimitive
End Sub

</CODE></PRE>
<P class=T>
Following is the code from the ModifyArcPrimitive class.
</P>
<PRE class=CT><CODE>
Implements IPrimitiveCommandEvents
Dim m_oArcElement As ArcElement
Dim m_startPoint As <A href="usudtPoint3d.htm">Point3d</A>, m_endPoint As Point3d
Dim m_centerPoint As Point3d
Dim m_haveStart As Boolean, m_haveEnd As Boolean

Private Sub IPrimitiveCommandEvents_<A href="usevtCleanup.htm">Cleanup</A>()

End Sub
Private Function LocateArc(<A href="usproPoint.htm">Point</A> As Point3d, <A href="usproView.htm">View</A> As <A href="usobjView.htm">View</A>) As ArcElement

On Error GoTo NoElement
    ' LocateElement will locate any type of element, but if it returns
    ' an element that is not an Arc then VBA will generate an error
    ' when it tries to store the object reference in LocateArc.
    Set LocateArc = CommandState.LocateElement(Point, View, True)
NoElement:

End Function

Private Sub IPrimitiveCommandEvents_<A href="usevtDataPoint.htm">DataPoint</A>(Point As Point3d, ByVal View As View)
    If m_oArcElement Is Nothing Then
        '  This is the first data point. Use it to locate an arc
        Set m_oArcElement = LocateArc(Point, View)
        If m_oArcElement Is Nothing Then
            <A href="usmthShowError.htm">ShowError</A> "No Arc Found"
            Exit Sub
        End If

        m_centerPoint = m_oArcElement.<A href="usproCenterPoint.htm">CenterPoint</A>
        m_startPoint = m_oArcElement.<A href="usproStartPoint.htm">StartPoint</A>
        m_endPoint = m_oArcElement.<A href="usproEndPoint.htm">EndPoint</A>

        If <A href="usmthPoint3dDistance.htm">Point3dDistance</A>(Point, m_startPoint) &lt; Point3dDistance(Point, m_endPoint) Then
            m_haveEnd = True
            m_haveStart = False
            <A href="usmthShowPrompt.htm">ShowPrompt</A> "Enter new end point"
        Else
            m_haveEnd = False
            m_haveStart = True
            ShowPrompt "Enter new start point"
        End If

        m_oArcElement.<A href="usmthRedraw.htm">Redraw</A> msdDrawingModeTemporaryErase
        CommandState.<A href="usmthStartDynamics.htm">StartDynamics</A>
    Else '  Already have an Arc
        If m_haveStart = False Then
            ' Use the end point
            Dim radius As Double

            m_oArcElement.StartPoint = Point
            radius = Point3dDistance(m_endPoint, m_centerPoint)
            m_oArcElement.<A href="usproPrimaryRadius.htm">PrimaryRadius</A> = radius
            m_oArcElement.<A href="usproSecondaryRadius.htm">SecondaryRadius</A> = radius
        ElseIf m_haveEnd = False Then
            m_oArcElement.EndPoint = Point
        End If

        m_oArcElement.Redraw msdDrawingModeNormal
        m_oArcElement.<A href="usmthRewrite.htm">Rewrite</A>
        CommandState.StartPrimitive New ModifyArcPrimitive
    End If
End Sub

Private Sub IPrimitiveCommandEvents_<A href="usevtDynamics.htm">Dynamics</A>(Point As Point3d, ByVal View As View, ByVal DrawMode As <A href="usenmMsdDrawingMode.htm">MsdDrawingMode</A>)
    If m_oArcElement Is Nothing Then
        Exit Sub
    End If

    Dim oArcElement As ArcElement
    If m_haveStart Then
        Set oArcElement = <A href="usmthCreateArcElement1.htm">CreateArcElement1</A>(m_oArcElement, m_startPoint, m_centerPoint, Point)
    ElseIf m_haveEnd Then
        Dim radius As Double

        Set oArcElement = CreateArcElement1(m_oArcElement, Point, m_centerPoint, m_endPoint)
        radius = Point3dDistance(m_endPoint, m_centerPoint)
        oArcElement.PrimaryRadius = radius
        oArcElement.SecondaryRadius = radius
    End If

    If Not oArcElement Is Nothing Then
        oArcElement.Redraw msdDrawingModeXor
    End If

End Sub
Private Sub IPrimitiveCommandEvents_<A href="usproKeyin.htm">Keyin</A>(ByVal Keyin As String)

End Sub

Private Sub IPrimitiveCommandEvents_<A href="usmthReset.htm">Reset</A>()
    If Not m_oArcElement Is Nothing Then
        m_oArcElement.Redraw msdDrawingModeTemporaryErase
    End If

    '  Start from the beginning, using a new object to
    '  be certain that it is completely reinitialized.

    CommandState.StartPrimitive New ModifyArcPrimitive

End Sub

Private Sub IPrimitiveCommandEvents_<A href="usevtStart.htm">Start</A>()
    <A href="usmthShowCommand.htm">ShowCommand</A> "Vba Modify Arc"
    ShowPrompt "Select Arc"
    CommandState.SetLocateCursor
End Sub

</CODE></PRE>
