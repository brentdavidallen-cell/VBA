<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Interpreting XData from Models and Elements</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>Interpreting XData from Models and Elements</H1>

<P class=T>
This example contains the macros ShowAllModelXData and ShowEleXData.  ShowAllModelXData
       prints all of the XData from all of the active design file's models. The macro ShowEleXData
       prints all of the XData from the elements of the active model.  They both use <A href="usmthHasAnyXData.htm">HasAnyXData</A> to
       determine if the object has any XData.  For each object that has XData, they call
       <A href="usmthGetXDataApplicationNames.htm">GetXDataApplicationNames</A> to get the names of all applications that have XData on the object.
       Then for each application name they call <A href="usmthGetXData.htm">GetXData</A> to get an array of that application's XData.
       As the final step, they both call into InterpretXData and it interprets the XData.
</P>
<PRE class=CT><CODE>
Sub InterpretXData(Xdata() As <A href="usudtXDatum.htm">XDatum</A>)
    Dim I As Long
    Dim J As Long
    Dim D As <A href="usudtDLong.htm">DLong</A>
    Dim Lev As <A href="usobjLevel.htm">Level</A>
    Dim vt As Variant

    ' Using Debug.Print, display all of the XData to the Immediate Window of the
    ' Visual Basic Editor.
    For I = LBound(Xdata) To UBound(Xdata)

        With Xdata(I)

            Debug.Print GetXDatumName(.<A href="usproType.htm">Type</A>) & " --- ";

            If VarType(.<A href="usproValue.htm">Value</A>) = vbEmpty Then
                Debug.Print "the value is empty"
            Else
                <A href="usmthSelect.htm">Select</A> Case .Type
                    Case msdXDatumTypePoint, _
                         msdXDatumTypeWorldDirection, _
                         msdXDatumTypeWorldSpaceDisplacement, _
                         msdXDatumTypeWorldSpacePosition

                             ' Value is of the type Point3d.

                              Debug.Print .Value.X; .Value.Y; .Value.Z

                    Case msdXDatumTypeDatabaseHandle

                             '
                             ' Value is a hex string.  You can get the element ID
                             ' by calling DLongFromHexString
                             '
                             Debug.Print "&H" & .Value

                             Dim eleID As DLong
                             eleID = <A href="usmthDLongFromHexString.htm">DLongFromHexString</A>(.Value)

                    Case msdXDatumTypeBinaryData, _
                         msdXDatumTypeUnsupported

                             ' Value is of the type Byte().

                             For J = LBound(.Value) To UBound(.Value)
                                  Debug.Print Hex(.Value(J)); " ";
                             Next J

                    Case Else

                             ' Value is of a type that can be printed directly.
                             Debug.Print .Value

                End Select
            End If

        End With ' Xdata(I)

    Next I

End Sub
'
'   Finds all of the XData in any element
'
Sub ShowEleXData()
    Dim ee As <A href="usobjElementEnumerator.htm">ElementEnumerator</A>

    Set ee = <A href="usproActiveModelReference.htm">ActiveModelReference</A>.<A href="usproGraphicalElementCache.htm">GraphicalElementCache</A>.<A href="usmthScan.htm">Scan</A>
    Do While ee.<A href="usmthMoveNext.htm">MoveNext</A>
        If ee.<A href="usproCurrent.htm">Current</A>.HasAnyXData Then
            Dim appNames() As String
            Dim index As Long

            appNames = ee.Current.GetXDataApplicationNames

            For index = LBound(appNames) To UBound(appNames)
                Dim aXdata() As XDatum

                aXdata = ee.Current.GetXData(appNames(index))
                InterpretXData aXdata
            Next
        End If
    Loop
End Sub
'
'   Finds all XData contained on any model in the active design file
'
Sub ShowAllModelXData()
    Dim theModel As <A href="usobjModelReference.htm">ModelReference</A>
    Dim appNames() As String
    Dim index As Long

    For Each theModel In <A href="usproActiveDesignFile.htm">ActiveDesignFile</A>.<A href="usproModels.htm">Models</A>
        If theModel.HasAnyXData Then
            Debug.Print "---------Reporting XData for model " & theModel.<A href="usproName.htm">Name</A> & "---------"
            appNames = theModel.GetXDataApplicationNames
            For index = LBound(appNames) To UBound(appNames)
                Dim aXdata() As XDatum

                Debug.Print "---------Application " & appNames(index) & "---------"
                aXdata = theModel.GetXData(appNames(index))
                InterpretXData aXdata
            Next
        End If
    Next
End Sub
'
'   Translates an XData type into a String
'
Function GetXDatumName(xdType As <A href="usenmMsdXDatumType.htm">MsdXDatumType</A>) As String
    Select Case xdType
        Case msdXDatumTypeBinaryData
            GetXDatumName = "Binary Data"

        Case msdXDatumTypeControlString
            GetXDatumName = "Control String"

        Case msdXDatumTypeDatabaseHandle
            GetXDatumName = "Database Handle"

        Case msdXDatumTypeDistance
            GetXDatumName = "Distance"

        Case msdXDatumTypeInt16
            GetXDatumName = "Int16"

        Case msdXDatumTypeInt32
            GetXDatumName = "Int32"

        Case msdXDatumTypeLevel
            GetXDatumName = "Level"

        Case msdXDatumTypePoint
            GetXDatumName = "Point"

        Case msdXDatumTypeReal
            GetXDatumName = "Real"

        Case msdXDatumTypeScaleFactor
            GetXDatumName = "Scale Factor"

        Case msdXDatumTypeString
            GetXDatumName = "String"

        Case msdXDatumTypeUnsupported
            GetXDatumName = "Unsupported"

        Case msdXDatumTypeWorldDirection
            GetXDatumName = "World Direction"

        Case msdXDatumTypeWorldSpaceDisplacement
            GetXDatumName = "World Space Displacement"

        Case msdXDatumTypeWorldSpacePosition
            GetXDatumName = "World Space Position"

    End Select

    GetXDatumName = GetXDatumName & "(" & xdType & ")"
End Function


</CODE></PRE>
