<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CadInputQueue Example</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>CadInputQueue Example</H1>

<P class=T>
This example illustrates a technique for setting and getting the active color,
            and for sequencing events in MicroStation's input queue. It uses the property <A href="usproActiveSettings.htm">ActiveSettings</A>.
            <A href="usproColorName.htm">ColorName</A> to get and set the name of MicroStation's active color.  It uses the <A href="usmthGetInput.htm">GetInput</A>
            method to get input from the user.  It uses <A href="usmthSendCommand.htm">SendCommand</A> and <A href="usmthSendDataPoint.htm">SendDataPoint</A> to send
            input to MicroStation.
</P>
<PRE class=CT><CODE>
Sub PlaceRedLines()
    Dim saveActiveColor

    saveActiveColor = ActiveSettings.ColorName
    ActiveSettings.ColorName = "Red"

    On Error GoTo DoneSub

    With <A href="usproCadInputQueue.htm">CadInputQueue</A>
        Dim message As <A href="usobjCadInputMessage.htm">CadInputMessage</A>

        .SendCommand "place line"

        Do While True
            Set message = .GetInput(msdCadInputTypeDataPoint, msdCadInputTypeReset)
            If message.<A href="usproInputType.htm">InputType</A> = msdCadInputTypeDataPoint Then
                .SendDataPoint message.point
            ElseIf message.InputType = msdCadInputTypeReset Then
                Exit Do
            End If
        Loop
    End With

DoneSub:
    '  Set MicroStation back to a nice state for the user
    ActiveSettings.ColorName = saveActiveColor
    <A href="usproCommandState.htm">CommandState</A>.<A href="usmthStartDefaultCommand.htm">StartDefaultCommand</A>

End Sub

</CODE></PRE>
