<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Compute the Projection of a Point onto a B-spline Surface</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>Compute the Projection of a Point onto a B-spline Surface</H1>

<P class=T>
Demonstrates how to project a point onto a B-spline surface
                  both along a ray and orthogonally (minimum distance).
</P>
<P class=T>
Also demonstrates how to create a B-spline curve from an <A href="usudtEllipse3d.htm">Ellipse3d</A>
                  and how to create a simple Gordon (network) B-spline surface.
</P>
<P class=T>
Note that after MicroStation V8 2004 Edition (8.5.0), the <A href="usmthComputeBoresite.htm">ComputeBoresite</A>
                  method was deprecated.  This method returned the intersection point if one was
                  found; otherwise it threw a runtime exception.  Its replacement <A href="usmthIntersectRay3d.htm">IntersectRay3d</A>
                  returns a Boolean value to indicate the presence or absence of intersection and
                  returns in the first parameter the intersection point if found.
</P>
<PRE class=CT><CODE>
Sub TestBsplineSurfaceProjectPoint()
    Dim oSurfaceElt As <A href="usobjBsplineSurfaceElement.htm">BsplineSurfaceElement</A>
    Dim oLineElt As <A href="usobjLineElement.htm">LineElement</A>
    Dim oSurface As New BsplineSurface
    Dim aUCurves(0 To 1) As New BsplineCurve, aVCurves(0 To 1) As New BsplineCurve
    Dim sEllipse As Ellipse3d
    Dim sPoint As <A href="usudtPoint3d.htm">Point3d</A>
    Dim sParam As <A href="usudtPoint2d.htm">Point2d</A>
    Dim sRay As <A href="usudtRay3d.htm">Ray3d</A>
    Dim i As Long

    ' First create some B-spline curves from which we will generate a B-spline surface.

    ' UCurve0 (bottom semicircle in xz-plane)
    sEllipse.center = <A href="usmthPoint3dFromXYZ.htm">Point3dFromXYZ</A>(1, 0, 0)
    sEllipse.<A href="usevtStart.htm">Start</A> = <A href="usmthPi.htm">Pi</A>
    sEllipse.Sweep = Pi
    sEllipse.Vector0 = Point3dFromXYZ(1, 0, 0)
    sEllipse.Vector90 = Point3dFromXYZ(0, 0, 1)
    aUCurves(0).<A href="usmthFromEllipse3d.htm">FromEllipse3d</A> sEllipse

    ' UCurve1 (UCurve0 translated up y-axis)
    sEllipse.center = Point3dFromXYZ(1, 2, 0)
    aUCurves(1).FromEllipse3d sEllipse

    ' VCurve0 (left semicircle in yz-plane)
    sEllipse.center = Point3dFromXYZ(0, 1, 0)
    sEllipse.Start = 0
    sEllipse.Sweep = Pi
    sEllipse.Vector0 = Point3dFromXYZ(0, -1, 0)
    sEllipse.Vector90 = Point3dFromXYZ(0, 0, 1)
    aVCurves(0).FromEllipse3d sEllipse

    ' VCurve1 (VCurve0 translated up x-axis)
    sEllipse.center = Point3dFromXYZ(2, 1, 0)
    aVCurves(1).FromEllipse3d sEllipse

    ' Next create a Gordon surface interpolating the 4 semicircular B-spline curves.
    ' Note: both aUCurves have the same orientation,
    '       both aVCurves have the same orientation,
    '       the curves' true intersections equal those apparent in the xy-plane
    oSurface.<A href="usmthFromNetwork.htm">FromNetwork</A> aUCurves, aVCurves, <A href="usmthMatrix3dIdentity.htm">Matrix3dIdentity</A>
    Set oSurfaceElt = <A href="usmthCreateBsplineSurfaceElement1.htm">CreateBsplineSurfaceElement1</A>(Nothing, oSurface)
    <A href="usproActiveModelReference.htm">ActiveModelReference</A>.<A href="usmthAddElement.htm">AddElement</A> oSurfaceElt
    oSurfaceElt.<A href="usmthRedraw.htm">Redraw</A>

    ' Create a boreline to fire into the surface
    sRay.origin = Point3dFromXYZ(0.3, 0.7, 0.8)
    sRay.direction = <A href="usmthPoint3dNormalize.htm">Point3dNormalize</A>(Point3dFromXYZ(3, 5, -10))
    Set oLineElt = <A href="usmthCreateLineElement2.htm">CreateLineElement2</A>(Nothing, sRay.origin, <A href="usmthPoint3dAdd.htm">Point3dAdd</A>(sRay.origin, sRay.direction))
    oLineElt.color = oLineElt.color + 1
    ActiveModelReference.AddElement oLineElt
    oLineElt.Redraw

    ' Compute the intersection of the boreline and the surface
    ' Note: the default tolerance for ComputeBoresite fails to converge in this case; we use a tighter tolerance
    If oSurface.IntersectRay3d(sPoint, sParam, sRay, 0.00001) Then
        ' Display the boresite on the surface
        Set oLineElt = CreateLineElement2(oLineElt, sPoint, sPoint)
        oLineElt.<A href="usproLineWeight.htm">LineWeight</A> = 5
        ActiveModelReference.AddElement oLineElt
        oLineElt.Redraw

        ' Demonstrate that the boresite can differ from the closest point on the surface
        oSurface.<A href="usmthComputeMinimumDistance.htm">ComputeMinimumDistance</A> sPoint, sParam, sRay.origin

        ' Display the closest point and the boreline that yields the closest point
        Set oLineElt = CreateLineElement2(Nothing, sRay.origin, Point3dAdd(sRay.origin, Point3dNormalize(<A href="usmthPoint3dSubtract.htm">Point3dSubtract</A>(sPoint, sRay.origin))))
        oLineElt.color = oLineElt.color + 2
        ActiveModelReference.AddElement oLineElt
        oLineElt.Redraw
        Set oLineElt = CreateLineElement2(oLineElt, sPoint, sPoint)
        oLineElt.LineWeight = 5
        ActiveModelReference.AddElement oLineElt
        oLineElt.Redraw
    End If

End Sub

</CODE></PRE>
