<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Construct a B-spline Surface From Poles</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>Construct a B-spline Surface From Poles</H1>

<P class=T>
Demonstrates how to construct a B-spline surface from poles.
</P>
<P class=T>
In this example, all areas of low-level B-spline surface construction are
                  highlighted in creating a nonuniform rational biperiodic, biquadratic
                  punctured B-spline surface.
</P>
<PRE class=CT><CODE>
Sub TestBsplineSurfaceFromPoles()
    Dim oBsplineSurfaceElement As <A href="usobjBsplineSurfaceElement.htm">BsplineSurfaceElement</A>
    Dim oBsplineSurface As New BsplineSurface
    Dim aPoles() As <A href="usudtPoint3d.htm">Point3d</A>
    Dim aBoundPoints() As <A href="usudtPoint2d.htm">Point2d</A>
    Dim aKnots() As Double
    Dim nUPole As Long, nVPole As Long, nUKnot As Long, nVKnot As Long

    ' Construct a biperiodic biquadratic punctured NURBS surface
    oBsplineSurface.<A href="usproVOrder.htm">VOrder</A> = 3
    oBsplineSurface.<A href="usproUOrder.htm">UOrder</A> = 3
    oBsplineSurface.<A href="usproVClosed.htm">VClosed</A> = True
    oBsplineSurface.<A href="usproUClosed.htm">UClosed</A> = True

    '...set 8x8 poles array (and uniform knots)...
    nUPole = 8
    nVPole = 8
    oBsplineSurface.setPoles computePoles(aPoles, nUPole, nVPole, 3#, 1#)

    '...set some non-unit weights (makes surface rational; unset weights default to 1.0)...
    setNontrivialWeights oBsplineSurface, 0.25

    '...set nonuniform u- and v-knots...
    nUKnot = <A href="usproBspline.htm">Bspline</A>.<A href="usmthComputeKnotsCount.htm">ComputeKnotsCount</A>(oBsplineSurface.<A href="usproUPolesCount.htm">UPolesCount</A>, oBsplineSurface.UOrder, oBsplineSurface.UClosed)
    nVKnot = Bspline.ComputeKnotsCount(oBsplineSurface.<A href="usproVPolesCount.htm">VPolesCount</A>, oBsplineSurface.VOrder, oBsplineSurface.VClosed)
    oBsplineSurface.<A href="usmthSetUKnots.htm">SetUKnots</A> computeKnots(aKnots, nUKnot, 0.1)
    oBsplineSurface.<A href="usmthSetVKnots.htm">SetVKnots</A> computeKnots(aKnots, nVKnot, 0.1)

    '...punch a hole in right side...
    oBsplineSurface.<A href="usmthAddBound.htm">AddBound</A> computeBound(aBoundPoints, 500, <A href="usmthPoint2dFromXY.htm">Point2dFromXY</A>(0.4, 0.4), 0.05)
    oBsplineSurface.<A href="usproBoundsTrim.htm">BoundsTrim</A> = False  ' any bounds will punch holes in the surface

    ' Create the element from our working definition, and add it to the active model
    Set oBsplineSurfaceElement = <A href="usmthCreateBsplineSurfaceElement1.htm">CreateBsplineSurfaceElement1</A>(Nothing, oBsplineSurface)
    <A href="usproActiveModelReference.htm">ActiveModelReference</A>.<A href="usmthAddElement.htm">AddElement</A> oBsplineSurfaceElement
    oBsplineSurfaceElement.<A href="usmthRedraw.htm">Redraw</A>

End Sub

' fills an 8x8 pole array (through which we "hang" a torus-like biperiodic surface)
Function computePoles(aPoles() As Point3d, nUPoles As Long, nVPoles As Long, radiusOuter As Double, radiusInner As Double) As Point3d()
    Dim radiusMid As Double, radius As Double, height As Double
    Dim col As Long

    ' this algorithm only works for an 8x8 array
    If nUPoles &lt;&gt; 8 Or nVPoles &lt;&gt; 8 Then
        Exit Function
    End If
    ReDim aPoles(0 To nVPoles - 1, 0 To nUPoles - 1)

    radiusMid = (radiusOuter + radiusInner) / 2#

    ' array has dimensions nVPole x nUPole, with faster increase in u-direction
    For col = LBound(aPoles, 2) To UBound(aPoles, 2)
        If col = 0 Or col = 4 Then
            height = 0                              ' equatorial height
        ElseIf col = 1 Or col = 2 Or col = 3 Then
            height = radiusMid - radiusInner        ' at height of v=0.25 (North polar) isoparametric curve
        Else
            height = radiusInner - radiusMid        ' at height of v=0.75 (South polar) isoparametric curve
        End If

        If col = 0 Or col = 1 Or col = 7 Then
            radius = radiusInner
        ElseIf col = 2 Or col = 6 Then
            radius = radiusMid
        Else
            radius = radiusOuter
        End If

        ' Each row of the array consists of 8 poles arranged around a square that is
        '   radially arrayed (from an xz-plane source square) about the z-axis.
        ' Each column of the array consists of 8 poles arranged around a square that is
        '   parallel to the xy-plane and centered and stacked along the z-axis.
        aPoles(0, col) = <A href="usmthPoint3dFromXYZ.htm">Point3dFromXYZ</A>(-radius, 0, height)
        aPoles(1, col) = Point3dFromXYZ(-radius, -radius, height)
        aPoles(2, col) = Point3dFromXYZ(0, -radius, height)
        aPoles(3, col) = Point3dFromXYZ(radius, -radius, height)
        aPoles(4, col) = Point3dFromXYZ(radius, 0, height)
        aPoles(5, col) = Point3dFromXYZ(radius, radius, height)
        aPoles(6, col) = Point3dFromXYZ(0, radius, height)
        aPoles(7, col) = Point3dFromXYZ(-radius, radius, height)
    Next col

    computePoles = aPoles
End Function

' sets normalized nonuniform interior knots
Function computeKnots(aKnots() As Double, nKnot As Long, intraKnotClusterGap As Double) As Double()
    Dim interKnotClusterGap As Double, knotVal As Double
    Dim i As Long, nCluster As Long

    If nKnot Mod 2 = 0 Then
        Exit Function ' algorithm only works for odd # interior knots
    End If
    ReDim aKnots(0 To nKnot - 1)

    nCluster = (nKnot + 1) \ 2
    If nCluster * intraKnotClusterGap &gt;= 1# Then
        Exit Function
    End If

    interKnotClusterGap = (1# - (nCluster * intraKnotClusterGap)) / nCluster
    knotVal = 0
    For i = LBound(aKnots) To UBound(aKnots)
        If i Mod 2 = 0 Then
            knotVal = knotVal + interKnotClusterGap
        Else
            knotVal = knotVal + intraKnotClusterGap
        End If

        aKnots(i) = knotVal
    Next i

    computeKnots = aKnots
End Function

' sets selected weights in the 2D weight array to a given (non-unit) value
Sub setNontrivialWeights(oBsplineSurface As <A href="usobjBsplineSurface.htm">BsplineSurface</A>, weight As Double)
    Dim offset As Long, row As Long, col As Long

    ' Unit weights are default
    If weight = 1# Then
        Exit Sub
    End If

    ' Set every other weight in the 2D array (checkerboard pattern)
    offset = 0
    For row = 0 To oBsplineSurface.VPolesCount - 1
        For col = 0 + offset To oBsplineSurface.UPolesCount - 1 Step 2
            oBsplineSurface.weight(row, col) = weight
        Next col
        offset = (offset + 1) Mod 2
    Next row
End Sub

' punches a (parametrically) circular hole in the surface
Function computeBound(aBoundPoints() As Point2d, nPoints As Long, parametricCenter As Point2d, radius As Double) As Point2d()
    Dim uVector As Point2d, vVector As Point2d
    Dim angle As Double
    Dim i As Long

    ReDim aBoundPoints(0 To nPoints - 1)

    uVector = Point2dFromXY(1, 0)
    vVector = Point2dFromXY(0, 1)

    ' Note: bound points form a closed loop
    For i = LBound(aBoundPoints) To UBound(aBoundPoints)
        angle = (i / CDbl(UBound(aBoundPoints))) * 2 * <A href="usmthPi.htm">Pi</A>
        aBoundPoints(i) = <A href="usmthPoint2dAdd2Scaled.htm">Point2dAdd2Scaled</A>(parametricCenter, uVector, radius * Cos(angle), vVector, radius * Sin(angle))
    Next i

    computeBound = aBoundPoints
End Function


</CODE></PRE>
