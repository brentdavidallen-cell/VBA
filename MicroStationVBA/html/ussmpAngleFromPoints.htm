<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Create Angle From Points</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>Create Angle From Points</H1>

<P class=T>
Demonstrates how to mimic the angle-from-2-points and angle-from-3-points commands in MicroStation.
</P>
<PRE class=CT><CODE>
'Return same angle as keyin "active angle pt3"
Function GetActiveAngleFrom3Points(pt1 As <A href="usudtPoint3d.htm">Point3d</A>, pt2 As Point3d, pt3 As Point3d, oView As <A href="usobjView.htm">View</A>) As Double
    Dim vec1 As <A href="usudtVector3d.htm">Vector3d</A>, vec2 As Vector3d, vec3 As Vector3d
    Dim angle As Double

    'get vectors in plane of view
    vec1 = <A href="usmthVector3dFromMatrix3dTimesVector3d.htm">Vector3dFromMatrix3dTimesVector3d</A>(oView.<A href="usproRotation.htm">Rotation</A>, <A href="usmthVector3dSubtractPoint3dPoint3d.htm">Vector3dSubtractPoint3dPoint3d</A>(pt1, pt2))
    vec2 = Vector3dFromMatrix3dTimesVector3d(oView.Rotation, Vector3dSubtractPoint3dPoint3d(pt3, pt2))
    vec3 = <A href="usmthVector3dFromXY.htm">Vector3dFromXY</A>(1#, 0#)

    'duplicate keyin logic
    angle = <A href="usmthDegrees.htm">Degrees</A>(<A href="usmthVector3dAngleBetweenVectorsXY.htm">Vector3dAngleBetweenVectorsXY</A>(vec3, vec2) - Vector3dAngleBetweenVectorsXY(vec3, vec1))
    If angle &lt; 0# Then
        angle = angle + 360#
    End If

    GetActiveAngleFrom3Points = angle
End Function

'Return same angle as keyin "active angle pt2"
Function GetActiveAngleFrom2Points(pt1 As Point3d, pt2 As Point3d, oView As View) As Double
    Dim vec1 As Vector3d, vec2 As Vector3d
    Dim angle As Double

    'get vectors in plane of view
    vec1 = Vector3dFromMatrix3dTimesVector3d(oView.Rotation, Vector3dSubtractPoint3dPoint3d(pt2, pt1))
    vec2 = Vector3dFromXY(1#, 0#)

    'duplicate keyin logic
    angle = Degrees(Vector3dAngleBetweenVectorsXY(vec2, vec1))
    If angle &lt; 0# Then
        angle = angle + 360#
    End If

    GetActiveAngleFrom2Points = angle
End Function

Sub TestActiveAngleFromPoints()
    Dim oLine1 As <A href="usobjLineElement.htm">LineElement</A>, oLine2 As LineElement
    Dim oView As View
    Dim pt1 As Point3d, pt2 As Point3d, pt3 As Point3d
    Dim activeAngle As Double, computedAngle As Double

    'Test in a view
    Set oView = <A href="usproActiveDesignFile.htm">ActiveDesignFile</A>.<A href="usproViews.htm">Views</A>(2)

    'Show the Lines in view
    pt1 = <A href="usmthPoint3dFromXYZ.htm">Point3dFromXYZ</A>(-3, -5, 2)
    pt2 = Point3dFromXYZ(1, 1, 0)
    pt3 = Point3dFromXYZ(-7, -3, -1)
    Set oLine1 = <A href="usmthCreateLineElement2.htm">CreateLineElement2</A>(Nothing, pt2, pt1)
    Set oLine2 = CreateLineElement2(Nothing, pt2, pt3)
    oLine1.<A href="usmthRedraw.htm">Redraw</A>
    oLine2.color = oLine1.color + 1
    oLine2.Redraw

    'Set active angle from keyin "active angle pt3"
    With <A href="usproCadInputQueue.htm">CadInputQueue</A>
        .<A href="usmthSendCommand.htm">SendCommand</A> "active angle pt3"
        .<A href="usmthSendDataPoint.htm">SendDataPoint</A> pt1, oView  'target1
        .SendDataPoint pt2, oView  'anchor
        .SendDataPoint pt3, oView  'target2
    End With
    activeAngle = Degrees(<A href="usproActiveSettings.htm">ActiveSettings</A>.angle)

    'Compute angle from 3 pts in view
    computedAngle = GetActiveAngleFrom3Points(pt1, pt2, pt3, oView)

    'Set active angle from keyin "active angle pt2"
    With CadInputQueue
        .SendCommand "active angle pt2"
        .SendDataPoint pt1, oView
        .SendDataPoint pt2, oView
    End With
    activeAngle = Degrees(ActiveSettings.angle)

    'Compute angle from 2 pts in view
    computedAngle = GetActiveAngleFrom2Points(pt1, pt2, oView)

End Sub

</CODE></PRE>
