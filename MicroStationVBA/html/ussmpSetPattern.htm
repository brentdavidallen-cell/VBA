<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Cross Hatching an Element</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>Cross Hatching an Element</H1>

<P class=T>
This example shows how to give an element a cross hatch pattern.
</P>
<PRE class=CT><CODE>
Sub DoPattern(ele As <A href="usobjShapeElement.htm">ShapeElement</A>)
    Dim ptrn As <A href="usobjCrossHatchPattern.htm">CrossHatchPattern</A>

    <A href="usproCadInputQueue.htm">CadInputQueue</A>.<A href="usmthSendCommand.htm">SendCommand</A> "NULL"

    '  Use a CrossHatchPattern object to set up the parameters for
    '  the hatching operation.
    Set ptrn = <A href="usmthCreateCrossHatchPattern.htm">CreateCrossHatchPattern</A>(1000, 1000, <A href="usmthPi.htm">Pi</A> / 4, -Pi / 4)

    Dim vertices() As <A href="usudtPoint3d.htm">Point3d</A>
    vertices = ele.<A href="usmthGetVertices.htm">GetVertices</A>

    '  SetPatternWithOrigin knows this is a cross hatch because the
    '  patterning parameters are being passed in a CrossHatchPattern
    '  object.
    ele.<A href="usmthSetPatternWithOrigin.htm">SetPatternWithOrigin</A> ptrn, vertices(2), <A href="usmthMatrix3dIdentity.htm">Matrix3dIdentity</A>

    '  Now save it to the file and display the pattern by redrawing
    '  the element
    ele.<A href="usmthRewrite.htm">Rewrite</A>
    ele.<A href="usmthRedraw.htm">Redraw</A>

    <A href="usproCommandState.htm">CommandState</A>.<A href="usmthStartDefaultCommand.htm">StartDefaultCommand</A>
End Sub

</CODE></PRE>
