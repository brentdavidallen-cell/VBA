<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CopyContext Object</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1><A NAME="usobjcopycontext"></A>CopyContext Object</H1>

<P>
<P class=ALNSR>
<OBJECT ID="hhobj_456" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
        <param name="Command" value="ALink">
        <param name="Font" value="Verdana,8,1">
        <param name="Text" value="Text:See Also">
        <param name="Flags" value=",,1">
        <param name="Item1" value="">
        <param name="Item2" value="usobjCopyContextC">
</OBJECT>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<OBJECT ID="hhobj_457" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
        <param name="Command" value="ALink">
        <param name="Font" value="Verdana,8,1">
        <param name="Text" value="Text:Example">
        <param name="Flags" value=",,1">
        <param name="Item1" value="">
        <param name="Item2" value="usobjCopyContextX">
</OBJECT>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<OBJECT ID="hhobj_458" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
        <param name="Command" value="ALink">
        <param name="Font" value="Verdana,8,1">
        <param name="Text" value="Text:Properties">
        <param name="Flags" value=",,1">
        <param name="Item1" value="">
        <param name="Item2" value="usobjCopyContextP">
</OBJECT>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<OBJECT ID="hhobj_459" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
        <param name="Command" value="ALink">
        <param name="Font" value="Verdana,8,1">
        <param name="Text" value="Text:Methods">
        <param name="Flags" value=",,1">
        <param name="Item1" value="">
        <param name="Item2" value="usobjCopyContextM">
</OBJECT>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<OBJECT ID="hhobj_460" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
        <param name="Command" value="ALink">
        <param name="Font" value="Verdana,8,1">
        <param name="Text" value="Text:Events">
        <param name="Flags" value=",,1">
        <param name="Item1" value="">
        <param name="Item2" value="usobjCopyContextE">
</OBJECT>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<OBJECT ID="hhobj_461" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
        <param name="Command" value="ALink">
        <param name="Font" value="Verdana,8,1">
        <param name="Text" value="Text:Specifics">
        <param name="Flags" value=",,1">
        <param name="Item1" value="">
        <param name="Item2" value="usobjCopyContextS">
</OBJECT>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<OBJECT ID="hhobj_462" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
        <param name="Command" value="ALink">
        <param name="Font" value="Verdana,8,1">
        <param name="Text" value="Text:Interfaces">
        <param name="Flags" value=",,1">
        <param name="Item1" value="">
        <param name="Item2" value="usobjCopyContextI">
</OBJECT>
</P>

<P class=T>
A <B>CopyContext</B> determines how <A href="usobjModelReference.htm">ModelReference</A>.<A href="usmthCopyElement.htm">CopyElement</A> copies <A href="usobjElement.htm">Element</A>s.  If a program calls
    <B>ModelReference</B>.<B>CopyElement</B> but does not provide a <B>CopyContext</B> object then <B>ModelReference</B>.<B>CopyElement</B>
    creates one and all of the properties get their default values.
    <P>When <B>ModelReference</B>.<B>CopyElement</B> has to remap graphic group numbers, it uses the <B>CopyContext</B> object to keep track
    of the remapping.  If uses this information across calls so if it is called repeatedly with <B>Element</B>s from the same
    group and with the same <B>CopyContext</B> for each call it can map the elements to the same graphic group. However, if it
    is called repeatedly with a different <B>CopyContext</B> each time or no <B>CopyContext</B> then it maps the graphic group to a new,
    different graphic group on every call.
    <P>When a program starts copying elements, CopyElement tracks information about element associations from
    the source elements so it can establish the same relationships among the target elements. Whenever anything calls the internal
    MicroStation function that <A href="usmthUpdateElementDependencyState.htm">UpdateElementDependencyState</A> calls, MicroStation establishes the copied associations among the newly
    created elements.  It then reinitializes the data structures it uses to track these assocations. Whenever a <B>CopyContext</B>
    object is deleted, MicroStation calls the same internal function that <B>UpdateElementDependencyState</B>
    calls and that causes MicroStation to establish the associations for any elements copied since the last time that internal function
    was called. Therefore, when a program copies a group of elements it is very important to
    create a <B>CopyContext</B> object prior to copying the elements, to use the same <B>CopyContext</B> object for every call to <B>CopyElement</B> for
    that group of elements, and to release all references to that <B>CopyContext</B> when done copying the elements. The following code
    illustrates this. This code copies an element and related tags and associates the elements properly. However, if
    the program copied the tags without passing <B>CopyContext</B> to <B>CopyElement</B>, the new tag elements would not be properly
    associated with the copy of the original source element.
    <pre><code>
Sub CopyElementWithTags(sourceElement As Element)
    Dim oCC As New CopyContext

    ActiveModelReference.CopyElement sourceElement, oCC

    Dim tagIndex As Long
    Dim aTags() As TagElement

    aTags = sourceElement.GetTags

    For tagIndex = LBound(aTags) To UBound(aTags)
        Dim sourceTag As TagElement
        Set sourceTag = aTags(tagIndex)
        ActiveModelReference.CopyElement sourceTag, oCC
    Next
End Sub
    </code></pre>
</P>
<P class=RL><B>Remarks</B></P>
<P>
A program that runs outside of MicroStation or needs to create a <B>CopyContext</B> object in
    another MicroStation process should use app.<A href="usmthCreateObjectInMicroStation.htm">CreateObjectInMicroStation</A> ("MicroStationDGN.CopyContext")
    where app is an object reference to the <A href="usobjApplication.htm">Application</A> object for that process.  If a program passes a <B>CopyContext</B>
    object to <B>CopyElement</B>, then it is essential that the object comes from the same process where <B>CopyElement</B> will run.
</P>
<P>
Using the expression <b>new CopyElement</b>
    in a VBA program running in MicroStation works correctly to create a <B>CopyContext</B> object in the current
    process. Therefore, it is the proper thing to do in a VBA application. However, using the expression
    <b>new CopyElement</b> to create a <B>CopyContext</B> object from a separate process while there are
    multiple copies of MicroStation running may create an object for the wrong process.
</P>
<P class=RL><B>Version</B></P>
<P>
08.01.02
</P>
</BODY>
</HTML>
