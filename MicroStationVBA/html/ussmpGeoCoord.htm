<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using the GeographicCoordinateSystem Class</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>Using the GeographicCoordinateSystem Class</H1>

<PRE class=CT><CODE>
'
'  Copyright: (c) 2010 Bentley Systems, Incorporated. All rights reserved.
'
Option Explicit

Sub GeoCoordinateExample()
    Dim gcs As <A href="usobjGeographicCoordinateSystem.htm">GeographicCoordinateSystem</A>
    Set gcs = <A href="usproActiveModelReference.htm">ActiveModelReference</A>.<A href="usmthGetGCS.htm">GetGCS</A>(True)
    If Not gcs Is Nothing Then
        <A href="usmthShowStatus.htm">ShowStatus</A> "GCS Name is " & gcs.<A href="usproName.htm">Name</A>
        ShowStatus "GCS Description is " & gcs.<A href="usproDescription.htm">Description</A>
        ShowStatus "GCS Datum Name is " & gcs.<A href="usproDatumName.htm">DatumName</A>
        ShowStatus "GCS Datum Description is " & gcs.<A href="usproDatumDescription.htm">DatumDescription</A>
        ShowStatus "GCS Ellipsoid Name is " & gcs.<A href="usproEllipsoidName.htm">EllipsoidName</A>
        ShowStatus "GCS Ellipsoid Description is " & gcs.<A href="usproEllipsoidDescription.htm">EllipsoidDescription</A>
        ShowStatus "GCS Ellipsoid Polar Radius is " & gcs.<A href="usproEllipsoidPolarRadius.htm">EllipsoidPolarRadius</A>
        ShowStatus "GCS Ellipsoid Equatorial Radius is " & gcs.<A href="usproEllipsoidEquatorialRadius.htm">EllipsoidEquatorialRadius</A>
        ShowStatus "GCS False Easting is " & gcs.<A href="usproFalseEasting.htm">FalseEasting</A>
        ShowStatus "GCS False Northing is " & gcs.<A href="usproFalseNorthing.htm">FalseNorthing</A>
        ShowStatus "GCS Minimum Latitude is " & gcs.<A href="usproMinimumLatitude.htm">MinimumLatitude</A>
        ShowStatus "GCS Minimum Longtitude is " & gcs.<A href="usproMinimumLongitude.htm">MinimumLongitude</A>
        ShowStatus "GCS Maximum Latitude is " & gcs.<A href="usproMaximumLatitude.htm">MaximumLatitude</A>
        ShowStatus "GCS Maximum Longitude is " & gcs.<A href="usproMaximumLongitude.htm">MaximumLongitude</A>
    Else
        ShowStatus "No GCS assigned to active model"
        Exit Sub
    End If
    
    Dim otherGCS As GeographicCoordinateSystem
    Set otherGCS = <A href="usproApplication.htm">Application</A>.<A href="usmthCreateGCSFromKeyName.htm">CreateGCSFromKeyName</A>("PA83-N")
    On Error Resume Next
    
    If gcs.<A href="usmthIsEquivalent.htm">IsEquivalent</A>(otherGCS) Then
        ShowStatus "The two GCSs are the same"
    Else
        ShowStatus "The two GCSs are different"
    End If
    
    If gcs.<A href="usmthHasEquivalentDatum.htm">HasEquivalentDatum</A>(otherGCS) Then
        ShowStatus "The two GCS have the same Datum"
    Else
        ShowStatus "The two GCS have different Datums"
    End If
   
    Dim iPoint As Integer
    Dim lastPoint As <A href="usudtGeoPoint3D.htm">GeoPoint3D</A>
    
    iPoint = 0
    
    ' Terminate any active commands
    <A href="usproCadInputQueue.htm">CadInputQueue</A>.<A href="usmthSendCommand.htm">SendCommand</A> "NULL"
    
    Do While True
    '
    '  Wait for a data point or reset.
        Dim oMessage As <A href="usobjCadInputMessage.htm">CadInputMessage</A>
        Set oMessage = CadInputQueue.<A href="usmthGetInput.htm">GetInput</A>(msdCadInputTypeDataPoint, msdCadInputTypeReset)
                      
    '   Now process the message
    '
        <A href="usmthSelect.htm">Select</A> Case oMessage.<A href="usproInputType.htm">InputType</A>
        Case msdCadInputTypeReset
            Exit Sub
            
        Case msdCadInputTypeDataPoint
            Dim inPoint As <A href="usudtPoint3d.htm">Point3d</A>
            
            inPoint = oMessage.point
            With inPoint
                ShowStatus "x = " & .X & ", y = " & .Y & ", z = " & .Z
            End With
            
            ' Exercise the MasterUnits methods.
            Dim llPoint As GeoPoint3D
            llPoint = gcs.<A href="usmthLatLongFromMasterUnits.htm">LatLongFromMasterUnits</A>(inPoint)
            
            ' Try reversing back to MasterUnits
            Dim roundTrip As Point3d
            roundTrip = gcs.<A href="usmthMasterUnitsFromLatLong.htm">MasterUnitsFromLatLong</A>(llPoint)
            
            Dim inPoint2d As <A href="usudtPoint2d.htm">Point2d</A>
            inPoint2d.X = inPoint.X
            inPoint2d.Y = inPoint.Y
            Dim llPoint2d As <A href="usudtGeoPoint2D.htm">GeoPoint2D</A>
                        
            llPoint2d = gcs.<A href="usmthLatLongFromMasterUnits2d.htm">LatLongFromMasterUnits2d</A>(inPoint2d)
            With llPoint2d
                ShowStatus "Longitude = " & .Longitude & ", Latitude = " & .Latitude
            End With
            
            ' Try reversing back to MasterUnits
            Dim roundTrip2d As Point2d
            roundTrip2d = gcs.<A href="usmthMasterUnitsFromLatLong2d.htm">MasterUnitsFromLatLong2d</A>(llPoint2d)
            
            ' Exercise the Cartesian methods.
            Dim cartesianPoint As Point3d
            cartesianPoint = gcs.<A href="usmthCartesianFromLatLong.htm">CartesianFromLatLong</A>(llPoint)
            
            Dim roundTripFromCartesian As GeoPoint3D
            roundTripFromCartesian = gcs.<A href="usmthLatLongFromCartesian.htm">LatLongFromCartesian</A>(cartesianPoint)
            
            Dim cartesianPoint2d As Point2d
            cartesianPoint2d = gcs.<A href="usmthCartesianFromLatLong2d.htm">CartesianFromLatLong2d</A>(llPoint2d)
            
            Dim roundTripFromCartesian2d As GeoPoint2D
            roundTripFromCartesian2d = gcs.<A href="usmthLatLongFromCartesian2d.htm">LatLongFromCartesian2d</A>(cartesianPoint2d)
            
            
            ' Get the Latitude/Longitude in the other GCS
            Dim otherLlPoint As GeoPoint3D
            otherLlPoint = gcs.<A href="usmthLatLongFromLatLong.htm">LatLongFromLatLong</A>(llPoint, otherGCS)
            
            ' Get the 2D version in the other GCS
            Dim otherLlPoint2d As GeoPoint2D
            otherLlPoint2d = gcs.<A href="usmthLatLongFromLatLong2d.htm">LatLongFromLatLong2d</A>(llPoint2d, otherGCS)
                        
            Dim mgString As String
            mgString = gcs.<A href="usmthMilitaryGridFromLatLong.htm">MilitaryGridFromLatLong</A>(llPoint2d, True, 5)
            ShowStatus "Military Grid (US National Grid is " & mgString
            
            Dim outLlPoint As GeoPoint2D
            outLlPoint = gcs.<A href="usmthLatLongFromMilitaryGrid.htm">LatLongFromMilitaryGrid</A>(mgString, True)
            ShowStatus "From Military grid, Longitude = " & outLlPoint.Longitude & ", Latitude = " & outLlPoint.Latitude
            
            If (iPoint &gt; 0) Then
                Dim distance As Double
                Dim initialAzimuth As Double
                gcs.<A href="usmthGetDistance.htm">GetDistance</A> distance, initialAzimuth, lastPoint, llPoint
                ShowStatus "Distance from previous point is " & distance & ", InitialAzimuth = " & initialAzimuth
                
                Dim scaleAlongMeridian As Double
                scaleAlongMeridian = gcs.<A href="usmthGetScaleAlongMeridian.htm">GetScaleAlongMeridian</A>(llPoint)
                Dim scaleAlongParallel As Double
                scaleAlongParallel = gcs.<A href="usmthGetScaleAlongParallel.htm">GetScaleAlongParallel</A>(llPoint)
                Dim gridScale As Double
                gridScale = gcs.<A href="usmthGetGridScale.htm">GetGridScale</A>(llPoint)
                ShowStatus "Scale along Meridian is " & scaleAlongMeridian & ", Scale Along Parallel = " & scaleAlongParallel & ", Grid Scale = " & gridScale
                
            End If
            lastPoint = llPoint
            iPoint = iPoint + 1
            
        End Select
    Loop
   
End Sub


</CODE></PRE>
