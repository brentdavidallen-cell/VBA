<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Construct a B-spline Surface from Rail and Swept Section</TITLE>
<style>@import url(/Office.css);</style>
<link disabled rel="stylesheet" href="/MSOffice.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1 class=RH1>Construct a B-spline Surface from Rail and Swept Section</H1>

<P class=T>
Demonstrates how to construct a B-spline surface by sweeping a section curve
                  along a rail curve.  Four methods of sweep are demonstrated: sweep that aligns
                  each generated section with the rail, rigid sweep that aligns each
                  generated section with a modified frame that preserves the section y-axis,
                  sweep that blends two sections along the same rail, and sweep along a helix.
</P>
<P class=T>
Note that the method <A href="usmthFromRailsAndSweptSections.htm">FromRailsAndSweptSections</A>, which sweeps one or two sections
                  along one or two rails, was added after MicroStation V8 2004 Edition (8.5.0).
</P>
<PRE class=CT><CODE>
Sub TestBsplineSurfaceSweepSectionAlongRail()
    Dim oSweptSurfaceElt As <A href="usobjBsplineSurfaceElement.htm">BsplineSurfaceElement</A>
    Dim oBsplineCurveElt As <A href="usobjBsplineCurveElement.htm">BsplineCurveElement</A>
    Dim oArcElt As <A href="usobjArcElement.htm">ArcElement</A>
    Dim olineelt As <A href="usobjLineElement.htm">LineElement</A>
    Dim oSweptSurface As New BsplineSurface
    Dim oRail As New BsplineCurve, oBsplineCurve As New BsplineCurve, oSection As New BsplineCurve
    Dim transformSectionToRailStart As <A href="usudtTransform3d.htm">Transform3d</A>
    Dim rotateSectionToXYPlane As <A href="usudtMatrix3d.htm">Matrix3d</A>, rotateXYSectionPerpendicularToRailStart As Matrix3d
    Dim rotation As Matrix3d, sectionFrame As Matrix3d
    Dim arcStartTangent As <A href="usudtRay3d.htm">Ray3d</A>
    Dim aPoles() As <A href="usudtPoint3d.htm">Point3d</A>
    Dim railStartPoint As Point3d, railStartTangent As Point3d, sectionStartPoint As Point3d, translation As Point3d
    Dim curvature As Double, torsion As Double
    Dim nPole As Long, i As Long

    ' First, build a B-spline rail curve by concatenating a line, a B-spline curve and an arc.
    ' ...start with a line
    Set olineelt = <A href="usmthCreateLineElement2.htm">CreateLineElement2</A>(Nothing, <A href="usmthPoint3dZero.htm">Point3dZero</A>, <A href="usmthPoint3dFromXYZ.htm">Point3dFromXYZ</A>(1, 0, 0))
    oRail.<A href="usmthFromElement.htm">FromElement</A> olineelt

    ' ...append an open nonrational quintic uniform B-spline curve
    nPole = 10
    ReDim aPoles(0 To nPole - 1)
    aPoles(0) = oRail.<A href="usmthEvaluatePoint.htm">EvaluatePoint</A>(1)
    aPoles(1) = Point3dFromXYZ(3, 1, 0)
    aPoles(2) = Point3dFromXYZ(3, 3, 1)
    aPoles(3) = Point3dFromXYZ(-0.5, 3.5, -0.5)
    aPoles(4) = Point3dFromXYZ(1, 9, 1)
    aPoles(5) = Point3dFromXYZ(4, 5, 3)
    aPoles(6) = Point3dFromXYZ(10, 6, 9)
    aPoles(7) = Point3dFromXYZ(3, -5, 3)
    aPoles(8) = Point3dFromXYZ(-2, -9, -7)
    aPoles(9) = Point3dFromXYZ(-3, 6, 2)
    oBsplineCurve.<A href="usmthSetPoles.htm">SetPoles</A> aPoles
    oBsplineCurve.order = 6
    oRail.<A href="usmthAppendCurve.htm">AppendCurve</A> oBsplineCurve

    ' ...append an arc with G1 continuity (junction has continuous tangent direction)
    arcStartTangent.origin = oRail.<A href="usmthEvaluatePointTangent.htm">EvaluatePointTangent</A>(arcStartTangent.direction, 1)
    Set oArcElt = <A href="usmthCreateArcElement4.htm">CreateArcElement4</A>(Nothing, arcStartTangent, Point3dFromXYZ(-4, 4, 4))
    oBsplineCurve.FromElement oArcElt
    oRail.AppendCurve oBsplineCurve

    ' ...improve the parameterization of the rail curve.
    oRail.<A href="usmthSetKnots.htm">SetKnots</A> <A href="usproBspline.htm">Bspline</A>.<A href="usmthComputeChordLengthKnots.htm">ComputeChordLengthKnots</A>(oRail.<A href="usmthGetPoles.htm">GetPoles</A>, oRail.<A href="usmthGetWeights.htm">GetWeights</A>, oRail.order, oRail.<A href="usproClosed.htm">Closed</A>)

    ' Next, create a planar open nonrational quadratic uniform section B-spline section curve...
    nPole = 4
    ReDim aPoles(0 To nPole - 1)
    sectionStartPoint = Point3dFromXYZ(10, 10, 10)
    aPoles(0) = sectionStartPoint
    aPoles(1) = Point3dFromXYZ(10, 10, 11)
    aPoles(2) = Point3dFromXYZ(10, 11, 11)
    aPoles(3) = Point3dFromXYZ(10, 11, 10)
    oSection.SetPoles aPoles
    oSection.order = 3

    ' ...and transform it to start at the rail's start point and to lie perpendicular to the rail's start tangent.
    sectionStartPoint = oSection.<A href="usmthEvaluatePointFrame.htm">EvaluatePointFrame</A>(sectionFrame, curvature, torsion, 0, Point3dFromXYZ(0, 0, 1))
    rotateSectionToXYPlane = <A href="usmthMatrix3dRotationFromRowZ.htm">Matrix3dRotationFromRowZ</A>(sectionFrame.RowZ)
    railStartPoint = oRail.EvaluatePointTangent(railStartTangent, 0)
    rotateXYSectionPerpendicularToRailStart = <A href="usmthMatrix3dRotationFromColumnZ.htm">Matrix3dRotationFromColumnZ</A>(railStartTangent)
    rotation = <A href="usmthMatrix3dFromMatrix3dTimesMatrix3d.htm">Matrix3dFromMatrix3dTimesMatrix3d</A>(rotateXYSectionPerpendicularToRailStart, rotateSectionToXYPlane)
    translation = <A href="usmthPoint3dSubtract.htm">Point3dSubtract</A>(railStartPoint, <A href="usmthPoint3dFromMatrix3dTimesPoint3d.htm">Point3dFromMatrix3dTimesPoint3d</A>(rotation, sectionStartPoint))
    transformSectionToRailStart = <A href="usmthTransform3dFromMatrix3dPoint3d.htm">Transform3dFromMatrix3dPoint3d</A>(rotation, translation)
    For i = LBound(aPoles) To UBound(aPoles)
        oSection.pole(i) = <A href="usmthPoint3dFromTransform3dTimesPoint3d.htm">Point3dFromTransform3dTimesPoint3d</A>(transformSectionToRailStart, oSection.pole(i))
    Next i

    ' Visualize the rail and initial section curves.
    Set oBsplineCurveElt = <A href="usmthCreateBsplineCurveElement1.htm">CreateBsplineCurveElement1</A>(Nothing, oRail)
    <A href="usproActiveModelReference.htm">ActiveModelReference</A>.<A href="usmthAddElement.htm">AddElement</A> oBsplineCurveElt
    oBsplineCurveElt.<A href="usmthRedraw.htm">Redraw</A>
    Set oBsplineCurveElt = CreateBsplineCurveElement1(Nothing, oSection)
    ActiveModelReference.AddElement oBsplineCurveElt
    oBsplineCurveElt.Redraw

    ' Create and display the swept surface
    oSweptSurface.<A href="usmthFromRailAndSweptSection.htm">FromRailAndSweptSection</A> oRail, oSection
    ' Alternate method (added after MicroStation V8 2004 Edition) produces equivalent surface:
    ' oSweptSurface.fromRailsAndSweptSections oRail, Nothing, oSection, Nothing
    Set oSweptSurfaceElt = <A href="usmthCreateBsplineSurfaceElement1.htm">CreateBsplineSurfaceElement1</A>(oBsplineCurveElt, oSweptSurface)
    oSweptSurfaceElt.color = oSweptSurfaceElt.color + 1
    ActiveModelReference.AddElement oSweptSurfaceElt
    oSweptSurfaceElt.Redraw
End Sub

Sub TestBsplineSurfaceSweepRigidSectionAlongRail()
    Dim oSweptSurfaceElt As BsplineSurfaceElement
    Dim oSweptSurface As New BsplineSurface
    Dim oRail As New BsplineCurve
    Dim oSection As New BsplineCurve
    Dim ellipse As <A href="usudtEllipse3d.htm">Ellipse3d</A>
    Dim railRadius As Double
    Dim sectionStartRadius As Double, sectionEndRadius As Double
    Dim normalizedLinearEndScale As Double

    railRadius = 10
    sectionStartRadius = 4
    sectionEndRadius = 1
    normalizedLinearEndScale = sectionEndRadius / sectionStartRadius

    ' Create a circular rail in the xy-plane.
    ellipse.center = Point3dZero
    ellipse.<A href="usevtStart.htm">Start</A> = 0
    ellipse.Sweep = 2 * <A href="usmthPi.htm">Pi</A>
    ellipse.Vector0 = Point3dFromXYZ(railRadius, 0, 0)
    ellipse.Vector90 = Point3dFromXYZ(0, railRadius, 0)
    oRail.<A href="usmthFromEllipse3d.htm">FromEllipse3d</A> ellipse

    ' Create a circular section in the xz-plane.
    ' Note: rail starts in the plane of the section.
    ellipse.center = ellipse.Vector0
    ellipse.Vector0 = Point3dFromXYZ(sectionStartRadius, 0, 0)
    ellipse.Vector90 = Point3dFromXYZ(0, 0, sectionStartRadius)
    oSection.FromEllipse3d ellipse

    ' Create and display the swept surface (a hollow tapered torus).
    ' Note: a linearly decreasing scale is applied to each cross section
    oSweptSurface.<A href="usmthFromRailAndSweptRigidSection.htm">FromRailAndSweptRigidSection</A> oRail, oSection, <A href="usmthPoint3dNormalize.htm">Point3dNormalize</A>(ellipse.Vector90), normalizedLinearEndScale, normalizedLinearEndScale

    ' Alternate method (added after MicroStation V8 2004 Edition) produces constant-radius torus.
    ' Note: this function works differently from FromRailAndSwept[Rigid]Section when the section lies off the rail;
    '       passing this smaller rail gives this torus the same center as the torus produced with the older methods.
    'ellipse.center = Point3dZero
    'ellipse.Vector0 = Point3dFromXYZ(railRadius - sectionStartRadius, 0, 0)
    'ellipse.Vector90 = Point3dFromXYZ(0, railRadius - sectionStartRadius, 0)
    'oRail.FromEllipse3d ellipse
    'oSweptSurface.FromRailsAndSweptSections oRail, Nothing, oSection, Nothing

    Set oSweptSurfaceElt = CreateBsplineSurfaceElement1(Nothing, oSweptSurface)
    ActiveModelReference.AddElement oSweptSurfaceElt
    oSweptSurfaceElt.Redraw
End Sub

Sub TestBsplineSurfaceSweepSectionsAlongRail()
    Dim oSquareElt As <A href="usobjShapeElement.htm">ShapeElement</A>
    Dim oSection0 As New BsplineCurve, oSection1 As New BsplineCurve, oRail As New BsplineCurve
    Dim oSweptSurface As New BsplineSurface
    Dim oSweptSurfaceElt As BsplineSurfaceElement
    Dim sEllipse As Ellipse3d
    Dim aPoints() As Point3d

    ' We will generate a surface that blends between a a square and a circle along a parabolic rail.

    ' Create a square in the z=4 plane
    ReDim aPoints(0 To 3)
    aPoints(0) = Point3dFromXYZ(1.5, -1.5, 4)
    aPoints(1) = Point3dFromXYZ(-1.5, -1.5, 4)
    aPoints(2) = Point3dFromXYZ(-1.5, 1.5, 4)
    aPoints(3) = Point3dFromXYZ(1.5, 1.5, 4)
    Set oSquareElt = <A href="usmthCreateShapeElement1.htm">CreateShapeElement1</A>(Nothing, aPoints, msdFillModeNotFilled)
    oSection0.FromElement oSquareElt

    ' Create a circle in the xy-plane
    sEllipse.center = Point3dZero
    sEllipse.Start = 0
    sEllipse.Sweep = 2 * Pi
    sEllipse.Vector0 = <A href="usmthPoint3dFromXY.htm">Point3dFromXY</A>(1, 0)
    sEllipse.Vector90 = Point3dFromXY(0, 1)
    oSection1.FromEllipse3d sEllipse

    ' Create half of a parabola
    ReDim aPoints(0 To 2)
    aPoints(0) = Point3dFromXYZ(1, 0, 0)
    aPoints(1) = Point3dFromXYZ(1.25, 0, 4)
    aPoints(2) = Point3dFromXYZ(1.5, 0, 4)
    oRail.SetPoles aPoints

    ' Create and display the swept surface.
    ' Note: this surface constructor was added after MicroStation V8 2004 Edition.
    oSweptSurface.FromRailsAndSweptSections oRail, Nothing, oSection0, oSection1, , , , False
    Set oSweptSurfaceElt = CreateBsplineSurfaceElement1(Nothing, oSweptSurface)
    ActiveModelReference.AddElement oSweptSurfaceElt
    oSweptSurfaceElt.Redraw
End Sub

Sub TestBsplineSurfaceSweepSectionAlongHelicalRail()
    Dim oCurveElt As BsplineCurveElement, oSurfaceElt As BsplineSurfaceElement
    Dim oSection As New BsplineCurve, oSurface As New BsplineSurface
    Dim sTransform As Transform3d, sSectionFrame As Transform3d
    Dim sRotation As Matrix3d, sFrenetFrame As Matrix3d
    Dim aPoles() As Point3d, originPoint As Point3d
    Dim curvature As Double, torsion As Double
    Dim nPt As Long
    Dim i As Long

    ' We'll "randomize" the section curve to show that it does not have to be in position on the helical rail.
    sTransform = Transform3dFromMatrix3dPoint3d(Matrix3dRotationFromRowZ(Point3dFromXYZ(-3, 2, 0.5)), Point3dFromXYZ(5, 10, -3))
    sRotation = <A href="usmthMatrix3dFromAxisAndRotationAngle.htm">Matrix3dFromAxisAndRotationAngle</A>(0, 1#)

    ' Create section curve.
    nPt = 4
    ReDim aPoles(0 To nPt - 1)
    aPoles(0) = Point3dFromTransform3dTimesPoint3d(sTransform, Point3dFromMatrix3dTimesPoint3d(sRotation, Point3dFromXYZ(0, 0, 0)))
    aPoles(1) = Point3dFromTransform3dTimesPoint3d(sTransform, Point3dFromMatrix3dTimesPoint3d(sRotation, Point3dFromXYZ(0, 0, 1)))
    aPoles(2) = Point3dFromTransform3dTimesPoint3d(sTransform, Point3dFromMatrix3dTimesPoint3d(sRotation, Point3dFromXYZ(0, 1, 1)))
    aPoles(3) = Point3dFromTransform3dTimesPoint3d(sTransform, Point3dFromMatrix3dTimesPoint3d(sRotation, Point3dFromXYZ(0, 1, 0)))
    oSection.SetPoles aPoles
    oSection.order = 3
    Set oCurveElt = CreateBsplineCurveElement1(Nothing, oSection)
    ActiveModelReference.AddElement oCurveElt
    oCurveElt.Redraw

    ' Compute the section frame.
    originPoint = oSection.EvaluatePointFrame(sFrenetFrame, curvature, torsion, 0#, Point3dFromXYZ(0, 0, 1))
    sSectionFrame = Transform3dFromMatrix3dPoint3d(<A href="usmthMatrix3dTranspose.htm">Matrix3dTranspose</A>(sFrenetFrame), originPoint)

    ' Create the swept surface along a helical rail.
    oSurface.<A href="usmthFromHelicalRailAndSweptSection.htm">FromHelicalRailAndSweptSection</A> oSection, sSectionFrame, 5#, 15#, 3#
    Set oSurfaceElt = CreateBsplineSurfaceElement1(oCurveElt, oSurface)
    oSurfaceElt.color = oSurfaceElt.color + 1
    ActiveModelReference.AddElement oSurfaceElt
    oSurfaceElt.Redraw
End Sub

</CODE></PRE>
